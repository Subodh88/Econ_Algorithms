/* Written by Subodh K Dubey, June 2013  */
library maxlik;
maxset;
cls;
format /m1/rzt 1,6;


/*****************************************************************************
                  Global Variable Definition and Setting
*****************************************************************************/
clearg nind,nobs,_row,_randper,_randd,nvar,nvar_ut,nvar_mear,nvar_latent,nc,Run_No,MACML_run,Seed_cov,Seed_error,MACML_seed,seed,seed1,seed2,seed3,seed10;
clearg nvar_mear_cont,nvar_mear_ordl,GHK,_halt_maxdraws,_halt_numdraws,nrep,allHaltDraws,negative_infinity,positive_infinity,negative_infinity_d,positive_infinity_d;
clearg Alpha_corr_active,Chol_Corr_Map,Positive_Obs,iteration_limit,gradient_limit,Gradient_Store,Analytic_Gradient_ON,Force_converegnce,Gradient_Check,Data_gen_check;
clearg outer_feed,outer_feed_aprox,final_run,upper_limit,Dmatrix_recovery,beta_recovery,Alpha_recovery,One_CDF_ON,Gradient_store1,Covariance_ON,ALPHA_ERROR_TWO,SAME_SEED;
clearg Continous_var_plus,D_matrix_ELEMENT_Nor,D_matrix_Error_Nor,Error_covariance,Error_correlation,PSI_ERROR_FOUR,data_stat;
clearg Latent_Correlation,Error_IID,nvar_mear_cont_active,Negative_Mean;

Own_data = 0;                              /* Make this 1, if you want to specify your own dataset */
Simulation_data = 1;                       /* Make this 1, if you wish to perform a simulation run */

nind = 1000;                           /* Number of Observations */
nobs = nind;
_row = nobs;

_randper = 1;                        /* random permutations of all digits */
_randd = 0;                          /* All permutations or random permutations */
nvar_latent = 5;                     /* Number of latent variables in the structural equation */
nvar = 6;                            /* Number of covariates in the structural equation */ 
nvar_mear = 5;                       /* Total Number of variables in the measurement equation */
nvar_mear_cont = 1;                  /* Number of continuous variables in the measurement equation */
nvar_mear_ordl = nvar_mear - nvar_mear_cont;   /* Number of ordinal variables in the measurement equation */
nvar_ut = 2;                                  /* Number of exogenous variables in the choice model equation per alternative */
nc   = 3;                                     /* Number of alternatives in the choice model */


/*****************************************************************************
                  How to specify your own dataset
*****************************************************************************/
/* If you have your own dataset, specify your daatset in the following way. The dataset should be a csv file without header. */
/* The number of rows in the dataset should be equal to nobs and columns should be equal to (nvar+nvar_ut*nc+2+nvar_mear+1). */
if(Own_data eq 1);
 load dataset_name[nobs,(nvar+nvar_ut*nc+2+nvar_mear+1)] = C:/subodh/ICLV/ICLV_data.csv;  
/*****************************************************************************/
elseif(Simulation_data eq 1);                 
  Run_No = 2;                                  /* Simulation run number */

seed1 = 23580;                        /* The seed for exogenous variable generation */ 
seed2 = 10000 + 25*Run_No +2;        /* The seed for Structural Equation error term */
seed  = 10000 + 25*Run_No;          /* The seed for Choice model error term */
seed3 = 10000 + 25*Run_No +1;      /* The seed for Measurement Equation error tem */
endif;

seed10 = 300000;                  /* Starting seed value for MACML */

negative_infinity = -100;                   /* Numerical value of negative infinity */
positive_infinity = 100;                    /* Numerical value of positive infinity */
negative_infinity_d = 0;                    /* Differentiated value of negative infinity */
positive_infinity_d = 0;                    /* Differentiated value of positive infinity */

upper_limit = 1e-100;                       /* Do not change */

/*****************************************************************************
                  File Path (Change or provide the paths appropriately)
*****************************************************************************/

runpath = "C:/subodh/ICLV/1/";    /* The program generates the data for simulation internally in case simulation option is chosen and outputs the file to the location provided by the variable runpath */           
                                  /* The program also generate a duplicate data file when the own_data option is chosen to verify that correct columns were read during label generation and outputs the file to the location provided by the variable runpath */
outpath = "C:/subodh/ICLV/1/";    /* Path for estimation result file */

/*****************************************************************************
                  Estimation Settings (DO not change anything here)
*****************************************************************************/
iteration_limit = 350;
gradient_limit  = 5e-5;
Force_converegnce    = 1;       /* Make this 1, if you want to stop the estimation based on maximum number of iteration */

/*****************************************************************************
                  Data Generation 
*****************************************************************************/
meanvar = 1.75*ones(1,1) | 1.75*ones(1,1) | 2.5*ones(1,1) | 2.5*ones(1,1) | 0.5*ones(1,1); 
sigvar  =  1.0*ones(1,1)   | 1.0*ones(1,1)   | 1.0*ones(1,1)    | 1.0*ones(1,1)      |  1.0*ones(1,1) ;   
{Edu_ran, newstate} = rndu(nobs,1,seed1);

for i(1,nobs,1);
	if(Edu_ran[i] < 0.5);
		Edu_ran[i] = 0;
	elseif(Edu_ran[i] >=0.5 );
		Edu_ran[i] = 1;
	endif;
endfor;

meanvar1 = 1.0*ones(1,1) | 1.0*ones(1,1) | 2.0*ones(1,1) | 2.0*ones(1,1) | 1.0*ones(1,1) | 1.5*ones(1,1);
sigvar1  =  1.0*ones(nvar_ut,1)    | 1.0*ones(nvar_ut,1)     | 1.0*ones(nvar_ut,1);   

dataset = runpath $+ "syndata.dat";
dataset_out = runpath $+ "myfile_mod.txt";

/* Defining the labels for the variables */
/* The order of variables are as follows : first all the covariates of the structural equation followed by exogeneous variables of the alternatives of the choice model equation. */
vnames = { Air_freq Bus_freq Air_TT Bus_TT Income Education TT_car TC_car TT_air TC_air TT_bus TC_bus };

ntot = nvar + nvar_ut*nc;
fin = 0;
create fin = ^dataset with ^vnames,ntot,8,8;
obs = 0; nr = 1;
do while obs < nobs;
	dat = {};
	
	if(Own_data eq 1);
	   dat = dat ~ dataset_name[obs+1,1:cols(vnames)];
    elseif(Simulation_data eq 1);	   
	   dat = dat ~ abs(meanvar'+(sigvar'.*(rndns(nr,(nvar-1),seed1)))) ~ (Edu_ran[obs+1]  )~ abs(meanvar1'+(sigvar1'.*(rndns(nr,nvar_ut*(nc),seed1))));
    endif;
   
   if writer(fin,dat) /= nr;
         print "Disk Full"; end;
      endif;
   obs= obs+nr;
endo;
closeall fin;

invar = getname(dataset)|"uno"|"sero";
outvar = invar;

call initalize(dataset);

proc(0)= initalize(dataset);
     local add_data,fout,y,fpin,nin,outdata;
	 clear fin;
     open fin = ^dataset;
     fpin = typef(fin);
     nin = rowsf(fin);
     do until eof(fin);
       add_data = readr(fin,nobs);
     endo;
    if fin > 0; fin = close(fin); endif;
     outdata = add_data~ones(nobs,1)~zeros(nobs,1);
     create fout = ^dataset with ^outvar,0,8;
     y = writer(fout,outdata);   
     if fout > 0;fout = close(fout);endif; 
 endp;
 
open f1 = ^dataset;          
assign = readr(f1,nobs);
outwidth 200;
output file = ^dataset_out;     
output reset;
screen off;
print assign;
output off;
screen on;
 
 load Main_data[nobs,nvar + nvar_ut*nc +2] = ^dataset_out;                                                
  
 logfile= outpath $+ "log" $+ ftocv(Run_No,2,0) $+ "_" $+ ftocv(MACML_run,1,0)$+ ".txt";            /* Estimation output file name */
 OUTPUT FILE= ^logfile ON;outwidth 250;format /m1 /rzt 1,15; OUTPUT reset;
 
/* Position of UNO variable (i.e., the column of ones) in data set. 
   The dataset should consist of a column of ones.*/
   

{ unov,ivuno } = indices(dataset,"uno");

/* Position of SERO variable (i.e., the column of zeros) in data set. 
   The dataset should consist of a column of zeros.*/
   

{ serov,ivsero } = indices(dataset,"sero");

/* Structural Equation Specification */
let ivl1 = { Air_freq Bus_freq Air_TT Bus_TT Income Education sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero };
let ivl2 = { sero sero sero sero sero sero Air_freq Bus_freq Air_TT Bus_TT Income Education sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero };
let ivl3 = { sero sero sero sero sero sero sero sero sero sero sero sero Air_freq Bus_freq Air_TT Bus_TT Income Education sero sero sero sero sero sero sero sero sero sero sero sero };
let ivl4 = { sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero Air_freq Bus_freq Air_TT Bus_TT Income Education sero sero sero sero sero sero };
let ivl5 = { sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero sero Air_freq Bus_freq Air_TT Bus_TT Income Education };

{ p1,ivlt1 } = indices(dataset,ivl1');
{ p2,ivlt2 } = indices(dataset,ivl2');
{ p3,ivlt3 } = indices(dataset,ivl3');
{ p4,ivlt4 } = indices(dataset,ivl4');
{ p5,ivlt5 } = indices(dataset,ivl5');

 ivgenvl = ivlt1' ~ ivlt2' ~ ivlt3' ~ ivlt4' ~ ivlt5' ;
 nvarml = cols(ivl1);
 
 /* Choice Model Specification */
 let iva1 = { sero sero TT_car TC_car };
 let iva2 = { uno sero TT_air TC_air  };
 let iva3 = { sero uno TT_bus TC_bus  };
 
 { v1,ivat1 } = indices(dataset,iva1');
 { v2,ivat2 } = indices(dataset,iva2');
 { v3,ivat3 } = indices(dataset,iva3');
 
 ivgenva = ivat1' ~ ivat2' ~ ivat3' ;
 nvarma = cols(iva1);
 nCholErr = (nc-1)*(nc)/2;
 
 				   
/*****************************************************************************
                  Parameter Values 
*****************************************************************************/
	
	Alpha = 0.5|0.0|0.6|0.0|0.0|0.0|
            0.0|0.5|0.0|0.6|0.0|0.0|
		    0.3|0.0|0.0|0.0|0.0|0.0|
		    0.0|0.3|0.0|0.0|-0.4|0.0|
		    0.0|0.0|0.0|0.0|0.0|0.8;
		 
	Beta_corr = { 1.00 0.00 0.60 0.00 0.00,
				  0.00 1.00 0.00 0.60 0.00,
				  0.60 0.00 1.00 0.00 0.50,
				  0.00 0.60 0.00 1.00 0.48,
				  0.00 0.00 0.50 0.48 1.00 };
	
    /* 1 indicates that the correponding correlation element is active (i.e., needs to be estimated) and zero otherwise */ 	
	Alpha_corr_active1 = zeros(nvar_latent,nvar_latent);
    for i(2,nvar_latent,1);
	   for j(1,i-1,1);
		   if(i ne j);
			   if(abs(Beta_corr[i,j])>0);
				  Alpha_corr_active1[i,j] = 1;
			   endif;
		   endif;
	  endfor;
    endfor;

		  
    delta = ones(nvar_mear,1);
	delta[2:nvar_mear,1] = -1*delta[2:nvar_mear,1];
    
    
	d_matrix = 0.0|0.0|0.0|0.0|0.2|
			   0.3|0.0|0.0|0.0|0.0|
			   0.0|0.4|0.0|0.0|0.0|		
			   0.0|0.0|0.5|0.0|0.0|
			   0.0|0.0|0.0|0.6|0.0;
	
	Psi   = zeros(nvar_mear,nvar_mear);
	Psi   = diagrv(Psi,ones(nvar_mear,1));
			  

    beta = 0.5|-1.0|-1.0|-0.8;

	Lambda = 0.0|0.0|0.0|0.0|0.0|
			 0.5|0.0|0.5|0.0|-0.5|
			 0.0|0.2|0.0|0.2|0.3;
		 
		
	Lamda_error = { 1.00 0.60,
					0.60 1.36 };	
					
	
    if(nvar_mear_ordl > 0);	
    threshold_low = 0*ones(nvar_mear_ordl,1);
    threshold_upper = 1.5*ones(nvar_mear_ordl,1);
    endif;

    nCholOmega1 = (rows(Psi))*(rows(Psi)+1)/2;
    nCholOmega = (rows(Beta_corr))*(rows(Beta_corr)+1)/2;
	
	Beta_corr1_pass = (upmat(chol(Beta_corr)))';
	Beta_corr1_pass1 = Beta_corr1_pass;
	
	for i(2,rows(Beta_corr),1);
			for j(1,i,1);
				
				if(i eq 2);
					if (i ne j);
						Beta_corr1_pass[i,j] =  ( sqrt(Beta_corr1_pass1[i,j]^2/(1-Beta_corr1_pass1[i,j]^2)) )  ;
					endif;
					
					if( i eq j);
						Beta_corr1_pass[i,j] =  ( sqrt((1-Beta_corr1_pass1[i,j]^2)/Beta_corr1_pass1[i,j]^2) )  ;
					endif;
				endif;
				
				if(i ne 2);
					if(i ne j);
						mult_term = Beta_corr1_pass1[i,1:i-1];
						mult_term1 = ones(1,i-1);
						mult_term1[1,j] = 0;
						mult_term = mult_term1 .* mult_term;
						mult_term = mult_term.^2;
						mult_term = sqrt(1 + sumc(mult_term'));
						Beta_corr1_pass[i,j] =  ( sqrt(Beta_corr1_pass1[i,j]^2/(1-Beta_corr1_pass1[i,j]^2)) ) * mult_term  ;
					endif;
					
				    if( i eq j);
				        Beta_corr1_pass[i,j] =  (1)/Beta_corr1_pass1[i,j]^2   ;
					endif;
				endif;	
					
			endfor;
   endfor;
	
/*****************************************************************************
                  Vector of all parameters 
*****************************************************************************/	
 if(nvar_mear_ordl > 0);
 dgp_X = Alpha|vech(Beta_corr)|delta|d_matrix|vech(Psi)|beta|Lambda|vech(Lamda_error)|threshold_low|threshold_upper;
 bb   =  (dgp_X[1:nvarml]
         |vech(chol(xpnd(dgp_X[nvarml+1:nvarml+nCholOmega]))')
		 |dgp_X[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear]
		 |dgp_X[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear]
		 |vech(chol(xpnd(dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]))')
		 |dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)]
		 |dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)]
		 |vech(chol(xpnd(dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr]))')
		 |dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr+rows(threshold_low)]
		 |dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr+rows(threshold_low)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr+rows(threshold_low)+rows(threshold_upper)]);
 else;
  dgp_X = Alpha|vech(Beta_corr)|delta|d_matrix|vech(Psi)|beta|Lambda|vech(Lamda_error);
   bb   =  (dgp_X[1:nvarml]
         |vech(chol(xpnd(dgp_X[nvarml+1:nvarml+nCholOmega]))')
		 |dgp_X[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear]
		 |dgp_X[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear]
		 |vech(chol(xpnd(dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]))')
		 |dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)]
		 |dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)]
		 |vech(chol(xpnd(dgp_X[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr]))'));
endif;		 
 	 
if(nvar_mear_ordl > 0);		 
dgp_X2 = Alpha|vech(Beta_corr1_pass)|delta|d_matrix|vech(Psi)|beta|Lambda|vech(Lamda_error)|threshold_low|threshold_upper;
 bb2   =  (dgp_X2[1:nvarml]
         |dgp_X2[nvarml+1:nvarml+nCholOmega]
		 |dgp_X2[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear]
		 |dgp_X2[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear]
		 |vech(chol(xpnd(dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]))')
		 |dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)]
		 |dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)]
		 |vech(chol(xpnd(dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr]))')
		 |dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr+rows(threshold_low)]
		 |dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr+rows(threshold_low)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr+rows(threshold_low)+rows(threshold_upper)]);
else;
	dgp_X2 = Alpha|vech(Beta_corr1_pass)|delta|d_matrix|vech(Psi)|beta|Lambda|vech(Lamda_error);
    bb2   =  (dgp_X2[1:nvarml]
         |dgp_X2[nvarml+1:nvarml+nCholOmega]
		 |dgp_X2[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear]
		 |dgp_X2[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear]
		 |vech(chol(xpnd(dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]))')
		 |dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)]
		 |dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)]
		 |vech(chol(xpnd(dgp_X2[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr]))'));
endif;
	 
/*****************************************************************************
                  Active Parameter Setting
*****************************************************************************/	 
	D_matrix_active = zeros(nvar_mear*nvar_latent,1);
	for i(1,nvar_mear*nvar_latent,1);
		if(D_matrix[i,1] > 0);
			D_matrix_active[i] = 1;
		endif;
	endfor;
	
					  
	Psi_active1     =  zeros(nvar_mear,nvar_mear);
	Psi_diagonal   =  zeros(nvar_mear,1);
	
	if(nvar_mear_cont > 0);
	for i(1,nvar_mear_cont,1);
		Psi_diagonal[i] = 1;
	endfor;
	endif;
	
	Psi_active1  = diagrv(Psi_active1,Psi_diagonal);
	Psi_active   = vech(Psi_active1);
			          


    _max_active = 1|0|1|0|0|0|
                  0|1|0|1|0|0|
			      1|0|0|0|0|0|
			      0|1|0|0|1|0|
			      0|0|0|0|0|1|
			  
                  vech(Alpha_corr_active1)|			  
			      ones(nvar_mear,1)|
			  
			      D_matrix_active|
			  
			      Psi_active|
			  
			      1|1|1|1|
			  
			      0|0|0|0|0|
			      1|0|1|0|1|
			      0|1|0|1|1|
			  
			      0|
	              1|1;
			  
    if(nvar_mear_ordl > 0);	
	    _max_active = _max_active |(zeros(nvar_mear_ordl,1)|ones(nvar_mear_ordl,1));
    endif;
			  

//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
if(Own_data eq 1);
   st_col = (nvar + nvar_ut*nc +2 +1);
   end_col = (nvar + nvar_ut*nc +2 +nvar_mear +1);
   data_addition = dataset_name[nobs,st_col:end_col];  /* Stores the measurement equation variables and chosen alternative column */
elseif(Simulation_data eq 1);   
   data_addition = dloop(Main_data,bb);  /* This procedure here calculates the measurement equation variables and the chosen alternatives, given the parameters value */
endif;   


if(Own_data eq 1);
    Main_data = dataset_name;                        /* Final dataset */
elseif(Simulation_data eq 1);
	Main_data = Main_data ~ data_addition;          /* Final dataset */
endif;	

/* If you have your own dataset, simply replace the right hand side of previous line with the name of your dataset. */
/* For example Main_data = dataset_name; */

ivgenyc = (seqa(nvar + nvar_ut*nc +2 +1,1,nvar_mear_cont))';    
if(nvar_mear_ordl > 0);	
   ivgenyo = (seqa(nvar + nvar_ut*nc +2 +nvar_mear_cont+1,1,nvar_mear_ordl))';  
endif;
altchm = nvar + nvar_ut*nc +2 +nvar_mear +1;


Alpha_nam         =  0 $+ "Alpha" $+ ftocv(seqa(1,1,nvarml),2,0);
Beta_corr_nam     =  0 $+ "Tild" $+ ftocv(seqa(1,1,nCholOmega),2,0);
delta_nam         =  0 $+ "Delta" $+ ftocv(seqa(1,1,nvar_mear),2,0);
d_matrix_nam      =  0 $+ "D_caP" $+ ftocv(seqa(1,1,nvar_latent*nvar_mear),2,0);
Psi_nam           =  0 $+ "Psi" $+ ftocv(seqa(1,1,nCholOmega1),2,0);
Beta_nam          =  "ASC_air" | "ASC_bus" | "TT" | "TC" ;
Lambda_nam        =  0 $+ "Lambda" $+ ftocv(seqa(1,1,rows(Lambda)),2,0);
Lamda_nam         =  0 $+ "Lamda" $+ ftocv(seqa(1,1,nCholErr),2,0);
if(nvar_mear_ordl > 0);
threshold_low_nam =  0 $+ "Th_Low" $+ ftocv(seqa(1,1,rows(threshold_low)),2,0);
threshold_up_nam =  0 $+ "Th_Up" $+ ftocv(seqa(1,1,rows(threshold_upper)),2,0);
endif;

if(nvar_mear_ordl > 0);
_max_ParNames = Alpha_nam|Beta_corr_nam|delta_nam|d_matrix_nam|Psi_nam|Beta_nam|Lambda_nam|Lamda_nam|threshold_low_nam|threshold_up_nam;
else;
_max_ParNames = Alpha_nam|Beta_corr_nam|delta_nam|d_matrix_nam|Psi_nam|Beta_nam|Lambda_nam|Lamda_nam;
endif;


_max_GradTol = gradient_limit; 

if(Force_converegnce eq 1);
_max_MaxIters = iteration_limit;
endif;

_max_Options = { bfgs stepbt };
_max_CovPar = 2;
_max_GradProc = &lgd;

clearg start_time,end_time,simulation_time;
start_time = gettime();

{ x,f,g,cov,retcode } = maxprt(maxlik(Main_data,0,&lpr,bb2));


clear _max_GradProc;

    Alpha1           = x[1:nvarml];
    
	 Beta_corr1       = (upmat(xpnd(x[nvarml+1:nvarml+nCholOmega])))';
     Beta_corr2       = Beta_corr1;	
	 
    for i(2,rows(Beta_corr1),1);
			row_all = Beta_corr2[i,1:i-1];
			row_all_sq = row_all.^2;
			denom = sqrt(1+sumc(row_all_sq'));
      for j(1,i,1);
				if (i ne j);
					Beta_corr1[i,j] = Beta_corr2[i,j]/denom;
				endif;
				
				if (i eq j);
					Beta_corr1[i,j] = 1/denom;
				endif;
	  endfor;
   endfor;
		
    Beta_corr1        = Beta_corr1*Beta_corr1';		
	delta1           = x[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear];
	d_matrix1        = x[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear];
	Psi1             = (upmat(xpnd(x[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1])))';
	Psi1             = Psi1*Psi1';
	beta1            = x[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+2*nvar_ut];
	Lambda1          = x[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+2*nvar_ut+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+2*nvar_ut+nc*nvar_latent];
	Lamda_error1     = (upmat(xpnd(x[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+2*nvar_ut+nc*nvar_latent+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+2*nvar_ut+nc*nvar_latent+nCholErr])))';
	Lamda_error1     = Lamda_error1*Lamda_error1';
	if(nvar_mear_ordl > 0);
	threshold_low1   = x[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+2*nvar_ut+nc*nvar_latent+nCholErr+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+2*nvar_ut+nc*nvar_latent+nCholErr+nvar_mear_ordl];
	threshold_upper1 = x[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+2*nvar_ut+nc*nvar_latent+nCholErr+nvar_mear_ordl+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+2*nvar_ut+nc*nvar_latent+nCholErr+nvar_mear_ordl+nvar_mear_ordl];
    endif;
    
	if(nvar_mear_ordl > 0);
	dgp_X1 = Alpha1|vech(Beta_corr1)|delta1|d_matrix1|vech(Psi1)|beta1|Lambda1|vech(Lamda_error1)|threshold_low1|threshold_upper1;
    bb1    =  (dgp_X1[1:nvarml]
              |vech(chol(xpnd(dgp_X1[nvarml+1:nvarml+nCholOmega]))')
		      |dgp_X1[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear]
		      |dgp_X1[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear]
		      |vech(chol(xpnd(dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]))')
		      |dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)]
		      |dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent]
		      |vech(chol(xpnd(dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr]))')
		      |dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl]
		      |dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+nvar_mear_ordl]);

   else;
	dgp_X1 = Alpha1|vech(Beta_corr1)|delta1|d_matrix1|vech(Psi1)|beta1|Lambda1|vech(Lamda_error1);
    bb1    =  (dgp_X1[1:nvarml]
              |vech(chol(xpnd(dgp_X1[nvarml+1:nvarml+nCholOmega]))')
		      |dgp_X1[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear]
		      |dgp_X1[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear]
		      |vech(chol(xpnd(dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]))')
		      |dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)]
		      |dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent]
		      |vech(chol(xpnd(dgp_X1[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr]))'));
    endif;
	      
    _max_MaxIters = 0;
	_max_CovPar   = 1;
	_max_Options = { bfgs stepbt };
	_max_GradProc = &lgd1;

	{ x,f,g,cov,retcode } = maxprt(maxlik(Main_data,0,&lpr1,bb1));

    end_time = gettime();
    simulation_time = round((end_time - start_time)/60);

	Hessian      = _max_FinalHess*nobs;
	if(det(Hessian) > 0);
	   Hessian_inv  = inv(Hessian);
	endif;
	
	needx        = selif(x,_max_active);

	if(det(Hessian) > 0);
		Hessian_St_Error = sqrt(diag(Hessian_inv));
	else;
		Hessian_St_Error = zeros(rows(needx),1);
	endif;


	Cross_Product1 = selif(Gradient_store1',_max_active);
	Cross_Product  = Cross_Product1*Cross_Product1';
	st_error_IM    = sqrt(diag(inv(Cross_Product)));
	Cov_BHHH       = Hessian_inv* Cross_Product*Hessian_inv;
	Var_BHHH       = diag(Cov_BHHH);

	Negative_Variance = 0;
	for i(1,rows(Var_BHHH),1);
		if(Var_BHHH[i] < 0);
			Negative_Variance = Negative_Variance + 1;
			Var_BHHH[i] = st_error_IM[i]^2;
		endif;
	endfor;
	st_error_BHHH = sqrt(Var_BHHH);
    LL_run = f*nobs;
		"-----------------Final Result---------------------------------------------------------------------------------";
		"Log-likelihood value : " ftos(LL_run,"%#*.*lG",10,6);
		print "Parameter         Estimate      ST.Error        T-Stat";
		omat = (selif(_max_parNames,_max_active) ~ needx ~ st_error_BHHH ~ (needx./st_error_BHHH) );
		mask = 0~1~1~1;
		let fmt[4,3] = 
					"-*.*s "  8 8   @ format info for variable names column @
					"*.*lf" 15 3   @ format info for mean column           @
					"*.*lf" 15 4   @ format info for mean column           @
					"*.*lf" 15 2   @ format info for mean column           @;
		y = printfm(omat,mask,fmt);
		
		
/*-------------------------------------------------------------------------------------------------------------------------------------------------------
        All the procedures are below this line. DO not change anything below this line
---------------------------------------------------------------------------------------------------------------------------------------------------------*/
proc(1)= dloop(dta,parm);
	local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Psi_chol,Beta_coeff,Lambda_coeff,Chol_Lamda_mat,lower_threshold,upper_threshold,Alpha_corr,D_matrix,Psi_matrix,Lamda,Lamda_chol,Lambda_mat;
	local AlphaW,z,i,j,y,Xbeta,v1,LambdaZ,Utility,err_Alpha_corr,err_Psi_coeff,err_Lamda,Y_full,U_full,Y_vector,U_vector,Alt_Chosen,Y_vector_indicator;	
	local err_Alpha_corr_add,err_Psi_coeff_add,err_Lamda_add,err_y_add,err_U_add,Alpha_insert,Psi_insert;
	
	Alpha_coeff        =  parm[1:nvarml];
	Chol_Alpha_corr    =  upmat(xpnd(parm[nvarml+1:nvarml+nCholOmega]));
	delta_coeff        =  parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear];
	d_matrix_coeff     =  parm[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear];
	Psi_chol           =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]));
	Beta_coeff         =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)];
	Lambda_coeff       =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent];
	Chol_Lamda_mat     =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+rows(Lambda)+nCholErr]));
	
	if(nvar_mear_ordl > 0);
	lower_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl];
	upper_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+rows(threshold_low)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+nvar_mear_ordl];
    endif;

	Alpha_corr = Chol_Alpha_corr'*Chol_Alpha_corr;
	D_matrix   = reshape(d_matrix_coeff,nvar_mear,nvar_latent);
	Psi_matrix = Psi_chol'*Psi_chol;
	Lamda      = zeros(nc,nc);                Lamda[2:nc,2:nc] = Chol_Lamda_mat'*Chol_Lamda_mat;
	Lamda_chol = zeros(nc,nc);                Lamda_chol[2:nc,2:nc] = Chol_Lamda_mat';
	Lambda_mat = reshape(Lambda_coeff,nc,nvar_latent);
	
		
	AlphaW = (ones(nvar_latent,1) .*. Alpha_coeff  )*~(dta[.,ivgenvl])';
	z = {}; j = 1;
	
	do until j > nvar_latent;
       z = z~(sumc(AlphaW[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
       j = j+1;
    endo;
    
    y = {}; j = 1;
	
	do until j > nobs;
       y = y|( (D_matrix * z[j,.]' ) +  delta_coeff)' ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
    endo;

    err_Psi_coeff  = (rndns(nobs,nvar_mear,seed)); 
	err_Alpha_corr = (rndns(nobs,nvar_latent,seed)); 
   
   err_y_add = {};
   j = 1;
   
   do until j > nobs;
       err_y_add = err_y_add |  ( ( D_matrix * (Chol_Alpha_corr' * err_Alpha_corr[j,.]')) + (Psi_chol' * err_Psi_coeff[j,.]') )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
   endo;
        
   Xbeta = (ones(nc,1) .*. Beta_coeff )*~(dta[.,ivgenva])';
   v1 = {}; j = 1;
   
   do until j > nc;
       v1 = v1~(sumc(Xbeta[(j-1)*nvarma+1:(j*nvarma),.]));
       j = j+1;
   endo;
   
   LambdaZ = {}; j = 1;
   
   do until j > nobs;
       LambdaZ = LambdaZ|(Lambda_mat * (z[j,.])' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
   endo;
	
   Utility = v1 + LambdaZ;  err_Lamda  = (rndns(nobs,nc,seed)); err_U_add = {};
   j = 1;
   
   do until j > nobs;
       err_U_add = err_U_add | ( ( Lambda_mat * (Chol_Alpha_corr' * err_Alpha_corr[j,.]')) + (Lamda_chol * err_Lamda[j,.]') )';             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
   endo;
   
      
  Y_vector = y + err_y_add;
  U_vector = Utility + err_U_add;
 
  
  Alt_Chosen = maxindc(U_vector');
  Y_vector_indicator = zeros(nobs,nvar_mear);
  
  if(nvar_mear_cont > 0);
  Y_vector_indicator[.,1:nvar_mear_cont] = Y_vector[.,1:nvar_mear_cont];
  endif;
  
  
  if(nvar_mear_ordl > 0);
	  i = 1;
	  do until i>nobs;
		  for j(nvar_mear_cont+1,nvar_mear,1);
			   if(Y_vector[i,j] <= lower_threshold[j-nvar_mear_cont]);
				  Y_vector_indicator[i,j] = 1;
			   elseif(Y_vector[i,j] > lower_threshold[j-nvar_mear_cont] AND Y_vector[i,j] < upper_threshold[j-nvar_mear_cont]) ;
				   Y_vector_indicator[i,j] = 2;
			   elseif(Y_vector[i,j] >= upper_threshold[j-nvar_mear_cont]);
				   Y_vector_indicator[i,j] = 3;
			   endif;
		   endfor;
		   i = i+1;
	   endo;
   endif;
   
   retp(Y_vector_indicator ~ Alt_Chosen);
   clear Alphaw,z,y,Xbeta,v1,LambdaZ,Utility,err_Alpha_corr,err_Psi_coeff,err_Lamda,Y_full,U_full,Y_vector,U_vector,Alt_Chosen,Y_vector_indicator;
 endp;
 
//------------------------------------------------------------------------------------------------------------------------------------------------------------ 
proc lpr(parm,dta);
	local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Psi_chol,Beta_coeff,Lambda_coeff,Chol_Lamda_mat,lower_threshold,upper_threshold,Alpha_corr,D_matrix,Psi_matrix,Lamda,Lamda_chol,Lambda_mat;
	local AlphaW,z,i,j,y,Xbeta,v1,LambdaZ,Utility,temp,Chol_Alpha_corr_adjusted,iden_matrix,one_negative,seednext,seed20,Likelihood,Full_error,e1,e12,e21,e22,U_Y,M,Alt_Chosen;
	local B_Tild,Error_Tild,Mean_changed,Error_changed,rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,lower_threshold_append,upper_threshold_append;
	local g1,g2,g3,p1,p2,p3,p3_1,p3_2,rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,S,LL,ch,ss,p1_negative,p2_negative,p3_negative;
	local BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,pair_G,check1,lower_threshold_matrix,upper_threshold_matrix,negative_check,Temp_negative,Diff_Mean_mu,Chol_Alpha_corr_adjusted1;
	local mean_gu_final,var_gu_final;
	
	Alpha_coeff        =  parm[1:nvarml];
	Chol_Alpha_corr    =  upmat(xpnd(parm[nvarml+1:nvarml+nCholOmega]));
	delta_coeff        =  parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear];
	d_matrix_coeff     =  parm[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear];
	Psi_chol           =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]));
	Beta_coeff         =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)];
	Lambda_coeff       =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent];
	Chol_Lamda_mat     =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr]));
	if(nvar_mear_ordl > 0);
	lower_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl];
	upper_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+nvar_mear_ordl];
    endif;

	
		   
    Chol_Alpha_corr_adjusted = Chol_Alpha_corr';
	Chol_Alpha_corr_adjusted1 = Chol_Alpha_corr';
		
		for i(2,rows(Beta_corr),1);
			row_all = Chol_Alpha_corr_adjusted1[i,1:i-1];
			row_all_sq = row_all.^2;
			denom = sqrt(1+sumc(row_all_sq'));
			for j(1,i,1);
				if (i ne j);
					Chol_Alpha_corr_adjusted[i,j] = Chol_Alpha_corr_adjusted1[i,j]/denom;
					clear temp;
				endif;
				
				if (i eq j);
					Chol_Alpha_corr_adjusted[i,j] = 1/denom;
					clear temp;
				endif;
			endfor;
		endfor;
	   
	Chol_Alpha_corr = Chol_Alpha_corr_adjusted'; clear denom;	
	
	Alpha_corr = Chol_Alpha_corr'*Chol_Alpha_corr;
	D_matrix   = reshape(d_matrix_coeff,nvar_mear,nvar_latent);  
	Psi_matrix = Psi_chol'*Psi_chol;
	Lamda      = zeros(nc,nc);                Lamda[2:nc,2:nc] = Chol_Lamda_mat'*Chol_Lamda_mat;
	Lamda_chol = zeros(nc,nc);                Lamda_chol[2:nc,2:nc] = Chol_Lamda_mat';
	Lambda_mat = reshape(Lambda_coeff,nc,nvar_latent);
	
	AlphaW = (ones(nvar_latent,1) .*. Alpha_coeff  )*~(dta[.,ivgenvl])';
	z = {}; j = 1;
	
	do until j > nvar_latent;
       z = z~(sumc(AlphaW[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
       j = j+1;
    endo;
  
    
	y = {}; j = 1;
	
	do until j > nobs;
       y = y|( (D_matrix * z[j,.]' ) +  delta_coeff)' ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
    endo;

    if(nvar_mear_ordl > 0);
		lower_threshold_matrix = zeros(nobs,nvar_mear_ordl);
		upper_threshold_matrix = zeros(nobs,nvar_mear_ordl);
		
		for i(1,nobs,1);
			for j(1,nvar_mear_ordl,1);
				if(dta[i,ivgenyo[j]] == 1);
				  lower_threshold_matrix[i,j] = negative_infinity;
				  upper_threshold_matrix[i,j] = lower_threshold[j];
				elseif(dta[i,ivgenyo[j]] == 2) ;
				   lower_threshold_matrix[i,j] = lower_threshold[j];
				   upper_threshold_matrix[i,j] = upper_threshold[j];
				elseif(dta[i,ivgenyo[j]] == 3);
				   lower_threshold_matrix[i,j] = upper_threshold[j];
				   upper_threshold_matrix[i,j] = positive_infinity;
			   endif;
			   
		   endfor;
	   endfor;
   endif;
   
   Xbeta = (ones(nc,1) .*. Beta_coeff )*~(dta[.,ivgenva])';
   v1 = {}; j = 1;
   
   do until j > nc;
       v1 = v1~(sumc(Xbeta[(j-1)*nvarma+1:(j*nvarma),.]));
       j = j+1;
   endo;
   LambdaZ = {}; j = 1;
   
   do until j > nobs;
       LambdaZ = LambdaZ|(Lambda_mat * z[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
   endo;
	
   Utility = v1 + LambdaZ;
   iden_matrix = eye(nc-1);
   one_negative = -1*ones(nc-1,1);
   seednext = seed10;
   Temp_negative = ones(nobs,1);
   Likelihood = {};
   
   for i(1,nobs,1);
	   negative_check = 0; 
	   U_Y = {}; LL = 0;
	   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
	   
	   U_Y   = U_Y | y[i,.]'| Utility[i,.]';
	   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
	   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
	   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
	   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
	   
	   Full_error = Full_error | (e1~e12);
	   Full_error = Full_error | (e21~e22);
	   
	   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
	   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
	   Alt_chosen = dta[i,altchm];
	   
	   if(Alt_chosen eq 1);
		temp = one_negative ~ iden_matrix;
	   elseif(Alt_chosen eq nc);
		temp = iden_matrix ~ one_negative;
	   else;
		ch = Alt_chosen;
		temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
	   endif;
	   
	   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
	   clear temp;
	   
	   B_Tild = M * U_Y;
	   Error_Tild = M * Full_error * M';
	   
	   
	   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                              
	   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];     
	   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
	   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
	   Diff_Mean     = (dta[i,ivgenyc])';      
	   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
	   
	   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
	   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
	   
	  
	   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
	   
	   if(nvar_mear_ordl > 1);
	   p2 = 1; pair_G = 0;
	   for g1(1,nvar_mear_ordl-1,1);
		   for g2(g1+1,nvar_mear_ordl,1);
			   
			   pair_G = pair_G + 1;
			   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
			   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
			   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
			   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
			   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
	           
			   
			   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
			   p2 = p2*p2_temp;
			   
			   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp; 
		   endfor;
	   endfor;
       endif;
	   
       if(nvar_mear_ordl > 0);
		   lower_threshold_append = {}; upper_threshold_append = {}; 
		   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
		   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
		   for j(1,nc-1,1);
				lower_threshold_append = lower_threshold_append |  negative_infinity;
				upper_threshold_append = upper_threshold_append |  0;
			endfor;
		endif;
		
	if(nvar_mear_ordl > 0);
	   p3 = 1;	
	   for g3(1,nvar_mear_ordl,1);
		   S = zeros(nc,nvar_mear_ordl+nc-1);
		   S[1,g3] = 1;
		   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
		   
		   rho_low_g3 = S*lower_threshold_append;
		   rho_up_g3  = S*upper_threshold_append;
		   
		   mean_gu    = S*Mean_changed;
		   var_gu     = S*Error_changed*S';
		   
		   om  = sqrt(diag(var_gu));
		   mean_low_final = (rho_low_g3 - mean_gu)./om;
		   mean_up_final  = (rho_up_g3 - mean_gu)./om;
		   var_final      = corrvc(var_gu);
		   var_final      = diagrv(var_final,ones(nc,1));
		   
		   seed20 = seednext;
		   
		   {p3_1,ss} = cdfmvna(mean_up_final',var_final,seed20);
		   seednext = ss;
		   p3 = p3*p3_1;
		   
		   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf;
	   endfor;
   else;
	   
	     mean_gu    = -Mean_changed;
	     var_gu     = Error_changed;
	   
	     om  = diag(var_gu);
	     mean_gu_final = mean_gu'./(sqrt(om))';
	     var_gu_final = corrvc(var_gu);
	     var_gu_final = diagrv(var_gu_final,ones(nc-1,1));
	   
	     seed20 = seednext;
		   if((nc-1) eq 2);
					  p3_1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
		   else;
			  {p3_1,ss} = cdfmvna(mean_gu_final,var_gu_final,seed20);
			   seednext = ss;
		   endif;
		   	   
		   p3 = p3_1;
		   
		   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_final,var_gu_final;
    endif;
	   
	   
	   if (p1 < 0);
		   p1 = (p1-((p1<=0)*(p1-0.0001)));
		   negative_check = negative_check + 1;
	   endif;
	   
	   if(nvar_mear_ordl > 1);
		   if (p2 < 0);
			   p2 = (p2-((p2<=0)*(p2-0.0001)));
			   negative_check = negative_check + 1;
		   endif;
       endif;
   
       if (p3 < 0);
		   p3 = (p3-((p3<=0)*(p3-0.0001)));
		   negative_check = negative_check + 1;
	   endif;
	   
	   if(negative_check > 0);
	      LL = ln(0.0001); 
	   else;
		 if(nvar_mear_ordl > 1);
		    LL = ln(p1) + ln(p2) + ln(p3);
		 else;
			LL = ln(p1) + ln(p3);
		 endif;
	  endif;
	  
	  Likelihood = Likelihood | LL;
	  
	  if(negative_check > 0);
	     Temp_negative[i] = 0;
	  endif;
	  	  
	  
	 
	   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean;
   endfor;
   
 Positive_Obs = Temp_negative; 
 retp(Likelihood);
 clear Alphaw,y,Xbeta,v1,LambdaZ,Utility,Temp_negative;
 endp; 
	   
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

proc lgd(parm,dta);

    local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Psi_chol,Beta_coeff,Lambda_coeff,Chol_Lamda_mat,lower_threshold,upper_threshold,Alpha_corr,D_matrix,Psi_matrix,Lamda,Lamda_chol,Lambda_mat;
	local AlphaW1,z1,i,j,y1,Xbeta1,v11,LambdaZ1,Utility1,temp,Chol_Alpha_corr_adjusted,iden_matrix,one_negative,seednext,seed20,Full_error,e1,e12,e21,e22,U_Y,M,Alt_Chosen;
	local B_Tild,Error_Tild,Mean_changed,Error_changed,rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,lower_threshold_append,upper_threshold_append;
	local g3,p1,p2,p3,p3_1,p3_2,rho_low_g3,rho_up_g3,mean_gu,mean_low_final,mean_up_final,var_final,diff_cdf,S,LL,ch,ss,p1_negative,p2_negative,p3_negative;
	local BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,pair_G;
	local alpha_gradient,ialpha,alphad,AlphaWd,zd,yd,Utilityd,gg_temp,U_Yd,gg,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2;
    local p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44,mean_gu_d,mean_low_final_d,mean_up_final_d,p1_dd,p2_dd,p3_dd,w1,g1,w2,g2;
	local alpha_corr_gradient,ia_corr,d_chol_alpha_corr,Alpha_corrdd,Alpha_corrd,Full_error_d,e1_d,e12_d,e21_d,e22_d,B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d;
    local Error_Y_d,Diff_Mean_d,Mean_changed_d,Error_changed_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md;
    local rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d,omncd,var_gu_d,var_final_d,shi_r_unq,var_gu,om,delta_coeff_gradient,idelta,delta_coeff_d;
    local d_matrix_gradient,idmat,d_matrix_coeff_d,D_matrix_d,p1_dm,p1_dr,Psi_gradient,ipsi,d_chol_psi,Psidd,Psid,beta_gradient,ibeta,betad,Xbetad,v1d,lambda_gradient,ilambda,d_lambda;
    local Lambda_mat_d,LambdaZd,lamda_gradient,ilamda,d_chol_lamda,lamdadd,lamdad1,Lamdad,lower_threshold_gradient,ilower_th,lower_threshold_d,upper_threshold_d,lower_threshold_append_d,upper_threshold_append_d; 
    local upper_threshold_gradient,iupper_th,gradient,Alpha_corr_d,Psi_matrix_d,Lamda_d,p1_d,rho_low_g3d,rho_up_g3d,check,Diff_Mean_mu,Diff_Mean_mu_d;
	local lower_threshold_matrix,upper_threshold_matrix,lower_threshold_matrix_d,upper_threshold_matrix_d,d_chol_alpha_corr1,icheck,jcheck,Chol_Alpha_corr_adjusted1;
	local mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d;
	local row_num,col_num,denom1;
	
	Alpha_coeff        =  parm[1:nvarml];
	Chol_Alpha_corr    =  upmat(xpnd(parm[nvarml+1:nvarml+nCholOmega]));
	delta_coeff        =  parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear];
	d_matrix_coeff     =  parm[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear];
	Psi_chol           =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]));
	Beta_coeff         =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)];
	Lambda_coeff       =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent];
	Chol_Lamda_mat     =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr]));
	
	if(nvar_mear_ordl > 0);
	lower_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl];
	upper_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+nvar_mear_ordl];
    endif;

			
		Chol_Alpha_corr_adjusted = Chol_Alpha_corr';
	    Chol_Alpha_corr_adjusted1 = Chol_Alpha_corr';
		
		for i(2,rows(Beta_corr),1);
			row_all = Chol_Alpha_corr_adjusted1[i,1:i-1];
			row_all_sq = row_all.^2;
			denom = sqrt(1+sumc(row_all_sq'));
			for j(1,i,1);
				if (i ne j);
					Chol_Alpha_corr_adjusted[i,j] = Chol_Alpha_corr_adjusted1[i,j]/denom;
					clear temp;
				endif;
				
				if (i eq j);
					Chol_Alpha_corr_adjusted[i,j] = 1/denom;
					clear temp;
				endif;
			endfor;
		endfor;
	   
	Chol_Alpha_corr = Chol_Alpha_corr_adjusted'; clear denom;
	
	
	Alpha_corr = Chol_Alpha_corr'*Chol_Alpha_corr;
	D_matrix   = reshape(d_matrix_coeff,nvar_mear,nvar_latent);  
	Psi_matrix = Psi_chol'*Psi_chol;
	Lamda      = zeros(nc,nc);                Lamda[2:nc,2:nc] = Chol_Lamda_mat'*Chol_Lamda_mat;
	Lamda_chol = zeros(nc,nc);                Lamda_chol[2:nc,2:nc] = Chol_Lamda_mat';
	Lambda_mat = reshape(Lambda_coeff,nc,nvar_latent);
	
	Alpha_corr_d = zeros(nvar_latent,nvar_latent);
	Psi_matrix_d = zeros(nvar_mear,nvar_mear);
	Lamda_d      = zeros(nc,nc); 

    AlphaW1 = (ones(nvar_latent,1) .*. Alpha_coeff  )*~(dta[.,ivgenvl])';
	z1 = {}; j = 1;
	
	do until j > nvar_latent;
       z1 = z1~(sumc(AlphaW1[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
       j = j+1;
    endo;
     y1 = {}; j = 1;
	
	do until j > nobs;
       y1 = y1|( (D_matrix * z1[j,.]' ) +  delta_coeff)' ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
    endo;

   Xbeta1 = (ones(nc,1) .*. Beta_coeff )*~(dta[.,ivgenva])';
   v11 = {}; j = 1;
   
   do until j > nc;
       v11 = v11~(sumc(Xbeta1[(j-1)*nvarma+1:(j*nvarma),.]));
       j = j+1;
   endo;
   LambdaZ1 = {}; j = 1;
   
   do until j > nobs;
       LambdaZ1 = LambdaZ1|(Lambda_mat * z1[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
   endo;
	
   Utility1 = v11 + LambdaZ1;
   iden_matrix = eye(nc-1);
   one_negative = -1*ones(nc-1,1);
   
   if(nvar_mear_ordl > 0);
    lower_threshold_matrix = zeros(nobs,nvar_mear_ordl);
	upper_threshold_matrix = zeros(nobs,nvar_mear_ordl);
	
		for i(1,nobs,1);
			for j(1,nvar_mear_ordl,1);
				if(dta[i,ivgenyo[j]] == 1);
				  lower_threshold_matrix[i,j] = negative_infinity;
				  upper_threshold_matrix[i,j] = lower_threshold[j];
				elseif(dta[i,ivgenyo[j]] == 2) ;
				   lower_threshold_matrix[i,j] = lower_threshold[j];
				   upper_threshold_matrix[i,j] = upper_threshold[j];
				elseif(dta[i,ivgenyo[j]] == 3);
				   lower_threshold_matrix[i,j] = upper_threshold[j];
				   upper_threshold_matrix[i,j] = positive_infinity;
			   endif;
			   
		   endfor;
	   endfor;
   endif;
   
   
   //-----------------------------------------------------------ALPHA GRADIENT--------------------------------------------------------------------------
   alpha_gradient = {};
   
   for ialpha(1,nvarml,1);
	   
	   if(_max_active[ialpha] eq 0);
		   alpha_gradient = alpha_gradient ~ zeros(nobs,1);
	   else;
		   
		   alphad = zeros(nvarml,1); alphad[ialpha] = 1;
           AlphaWd = (ones(nvar_latent,1) .*. alphad  )*~(dta[.,ivgenvl])';
		   zd = {}; j = 1;
			
			do until j > nvar_latent;
			   zd = zd~(sumc(AlphaWd[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
			   j = j+1;
			endo;
		  
		   	
			yd = {}; j = 1;
			
			do until j > nobs;
			   yd = yd| (D_matrix * zd[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
			   j = j+1;
			endo;

			LambdaZd = {}; j = 1;
   
		    do until j > nobs;
			   LambdaZd = LambdaZd|(Lambda_mat * zd[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
			   j = j+1;
		    endo;
			
		    Utilityd = LambdaZd;
            
			seednext = seed10;
            gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';     
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);			   			   
					   p2_dd = 0; pair_G = 0;
					   for g1(1,nvar_mear_ordl-1,1);
						   for g2(g1+1,nvar_mear_ordl,1);
							   
							   pair_G = pair_G + 1;
							   
							   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
							   
							   rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
					   
							   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
							   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
							   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
							   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
							   
							   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
										   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   endfor;
					   endfor;
				    else;
					  p2_dd = 0; 
			        endif;
			   
                   if(nvar_mear_ordl > 0);	
					   lower_threshold_append = {}; upper_threshold_append = {}; 
					   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
					   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
					   for j(1,nc-1,1);
							lower_threshold_append = lower_threshold_append |  negative_infinity;
							upper_threshold_append = upper_threshold_append |  0;
						endfor;
						
				   endif;	
				   
				if(nvar_mear_ordl > 0); 
				   p3_dd = 0;	
				   for g3(1,nvar_mear_ordl,1);
					   S = zeros(nc,nvar_mear_ordl+nc-1);
					   S[1,g3] = 1;
					   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
					   
					   rho_low_g3 = S*lower_threshold_append;
					   rho_up_g3  = S*upper_threshold_append;
					   
					   mean_gu    = S*Mean_changed;
					   var_gu     = S*Error_changed*S';
					   
					   mean_gu_d    = S*Mean_changed_d;
					   
					   om  = sqrt(diag(var_gu));
					   mean_low_final = (rho_low_g3 - mean_gu)./om;
					   mean_up_final  = (rho_up_g3 - mean_gu)./om;
					   var_final      = corrvc(var_gu);
					   var_final      = diagrv(var_final,ones(nc,1));
					   
					   mean_low_final_d = (- mean_gu_d)./om;
					   mean_up_final_d  = (- mean_gu_d)./om;
					   
					   seed20 = seednext;
					   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
					   seednext = ss;
						   
					   p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d)  )  ;
				       
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   endfor;
			   else;
				   
					 mean_gu    = -Mean_changed;
				     var_gu     = Error_changed;
				   
				   om  = sqrt(diag(var_gu));
				   mean_gu_final = mean_gu./om;
				   var_gu_final = corrvc(var_gu);
				   var_gu_final = diagrv(var_gu_final,ones(nc-1,1));
				   
				   mean_gu_d   = -Mean_changed_d;
				   mean_gu_final_d  = (mean_gu_d)./om;
				   
				   seed20 = seednext;
					
		           if((nc-1) eq 2);
					  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
					  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
					  g1 = g1'; 
				   else;
					  
					  {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
					   seednext = ss;
				   endif;
				   				   
					   p3_dd = ( (1/w1) *  (g1[1,1:nc-1] * mean_gu_final_d)  )  ;
					   
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d;
				endif;
				   
				   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 alpha_gradient = alpha_gradient ~ gg_temp;   

         clear Alphawd,zd,yd,LambdaZd,Utilityd;
	 endif;
	  endfor;
 
  //--------------------------------------------------------------------ALPHA_CORRELATION--------------------------------------------------
alpha_corr_gradient = {};
for ia_corr(1,nCholOmega,1);
	
	if(_max_active[nvarml+ia_corr] eq 0);
		
		alpha_corr_gradient = alpha_corr_gradient ~ zeros(nobs,1);
		
	else;
		
		  
			d_chol_alpha_corr1 = zeros(nCholOmega,1);    
			d_chol_alpha_corr1[ia_corr]=1;                         
			d_chol_alpha_corr1 = (upmat(xpnd(d_chol_alpha_corr1)))';
			
			for icheck(1,rows(Beta_corr),1);
				for jcheck(1,icheck-1,1);
					if(d_chol_alpha_corr1[icheck,jcheck] eq 1);
						row_num = icheck;
						col_num = jcheck;
						break;
					endif;
				endfor;
			endfor;
			
			row_all = Chol_Alpha_corr_adjusted1[row_num,1:row_num-1];
			row_all_sq = row_all.^2;
			denom = sqrt(1+sumc(row_all_sq'));
			denom1 = (1+sumc(row_all_sq'));
			
			for jcheck(1,row_num,1);
			    if(jcheck ne row_num);
					
					if(jcheck eq col_num);
						d_chol_alpha_corr1[row_num,jcheck] = (denom1 - (Chol_Alpha_corr_adjusted1[row_num,jcheck]^2))/(denom*denom1);
					endif;
					
					if(jcheck ne col_num);
						d_chol_alpha_corr1[row_num,jcheck] = (-Chol_Alpha_corr_adjusted1[row_num,jcheck]*Chol_Alpha_corr_adjusted1[row_num,col_num])/(denom*denom1);
					endif;
				endif;
				
				if(jcheck eq row_num);
					d_chol_alpha_corr1[row_num,jcheck] = (-Chol_Alpha_corr_adjusted1[row_num,col_num])/(denom*denom1);
				endif;
			endfor;
			
					
				
			
			d_chol_alpha_corr = d_chol_alpha_corr1;
		    Alpha_corrd = d_chol_alpha_corr*Chol_Alpha_corr + Chol_Alpha_corr'*d_chol_alpha_corr';
           
		   			   
		   yd = zeros(nobs,nvar_mear);
		   Utilityd = zeros(nobs,nc); 
		  
			seednext = seed10;
            gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]'; 
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix * Alpha_corrd * D_matrix' + Psi_matrix_d );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_corrd * Lambda_mat');
				   e21_d  = e21_d ~ ( Lambda_mat * Alpha_corrd * D_matrix'); 
				   e22_d  = e22_d ~ ( Lambda_mat * Alpha_corrd * Lambda_mat' + Lamda_d);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];     
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean_d     = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   
				   p1_dd = (1/p1)*(p1_d' * vech(Error_Y_d));
				   
				   if(nvar_mear_ordl > 1);
					   p2_dd = 0; pair_G = 0;
					   for g1(1,nvar_mear_ordl-1,1);
						   for g2(g1+1,nvar_mear_ordl,1);
							   
							   pair_G = pair_G + 1;
							   
							   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
							   
							   om_low_g1   =   Error_changed[g1,g1];
							   om_low_g2   =   Error_changed[g2,g2];
							   om_up_g1    =   Error_changed[g1,g1];
							   om_up_g2    =   Error_changed[g2,g2];
							   
							   omncd_low_g1   =   Error_changed_d[g1,g1];
							   omncd_low_g2   =   Error_changed_d[g2,g2];
							   omncd_up_g1    =   Error_changed_d[g1,g1];
							   omncd_up_g2    =   Error_changed_d[g2,g2];
							   
							   rho_low_g1md  =  - Mean_changed_d[g1] ;
							   rho_low_g2md  =  - Mean_changed_d[g2] ;
							   rho_up_g1md   =  - Mean_changed_d[g1] ;
							   rho_up_g2md   =  - Mean_changed_d[g2] ;
							   
							   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
							   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
							   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
							   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
							   
							   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
							   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
							   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
							   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
							   
							   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
					   
							   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
							   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
							   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
							   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
							   
							   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
										   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
						   endfor;
					   endfor;
				   else;
					   p2_dd = 0;
				   endif;
				   
				   if(nvar_mear_ordl > 0);
					   lower_threshold_append = {}; upper_threshold_append = {}; 
					   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
					   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
					   for j(1,nc-1,1);
							lower_threshold_append = lower_threshold_append |  negative_infinity;
							upper_threshold_append = upper_threshold_append |  0;
						endfor;
						
					endif;
					
                 if(nvar_mear_ordl > 0);
                   p3_dd = 0;	
				   for g3(1,nvar_mear_ordl,1);
					   S = zeros(nc,nvar_mear_ordl+nc-1);
					   S[1,g3] = 1;
					   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
					   
					   rho_low_g3 = S*lower_threshold_append;
					   rho_up_g3  = S*upper_threshold_append;
					   
					   mean_gu    = S*Mean_changed;
					   var_gu     = S*Error_changed*S';
					   
					   mean_gu_d    = S*Mean_changed_d;
					   var_gu_d     = S*Error_changed_d*S';
					   
					   om  = (diag(var_gu));
					   omncd  = (diag(var_gu_d));
					   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
					   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
					   var_final      = corrvc(var_gu);
					   var_final      = diagrv(var_final,ones(nc,1));
					   
					   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   
					   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
					   var_final_d      = diagrv(var_final_d ,ones(nc,1));
					   seed20 = seednext;
					   		   
						{w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
					    seednext = ss;
						   
					   
					   					   
					   shi_r_unq = {};
					   for ishi(1,rows(var_final_d)-1,1);
							shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
					   endfor;
					   
					   
					   p3_dd = p3_dd + ( (1/w1) * ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
					   
						
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
					   clear omncd,var_gu_d,var_final_d,shi_r_unq;
				   endfor;
			   else;
				       mean_gu    = -Mean_changed;
					   var_gu     = Error_changed;
					   
					   
					   mean_gu_d   = -Mean_changed_d;
					   var_gu_d     = Error_changed_d;
					   
					   om     = (diag(var_gu));
					   omncd  = (diag(var_gu_d));
					   mean_gu_final  =   mean_gu./sqrt(om);
					   
					   var_gu_final      = corrvc(var_gu);
					   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
					   
					   mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   
					   
					   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
					   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
					   seed20 = seednext;
					   
					   if((nc-1) eq 2);
						  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
						  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
						  g1 = g1'; 
						  
						  p3_dd =  ( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
				       else;
					  
						   {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
						   seednext = ss;
					   
				            
							shi_r_unq = {};
						    for ishi(1,rows(var_gu_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
						    endfor;
					   
					   
					        p3_dd = p3_dd + ( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
					   					   
					   endif;
					   
					   					   
					   
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_gu_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
					   clear omncd,var_gu_d,var_gu_final_d,shi_r_unq;
				   
			   endif;
			   
			   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 alpha_corr_gradient = alpha_corr_gradient ~ gg_temp;   

         clear d_chol_alpha_corr,Alpha_corrdd,Alpha_corrd,d_chol_alpha_corr1;
	 endif;
	  endfor;

//------------------------------------------------------------------------------DELTA COEFFICEINT----------------------------------------------------------------
delta_coeff_gradient = {};
for idelta(1,nvar_mear,1);
	
	if(_max_active[nvarml+nCholOmega+idelta] eq 0);
		
		delta_coeff_gradient = delta_coeff_gradient ~ zeros(nobs,1);
		
	else;
		
		delta_coeff_d = zeros(nvar_mear,1);  delta_coeff_d[idelta] = 1; 
        yd = {}; j = 1;
			
		do until j > nobs;
		  yd = yd| (delta_coeff_d' )  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
		  j = j+1;
		endo;

	    Utilityd = zeros(nobs,nc);

        seednext = seed10;
        gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                              
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);
					   p2_dd = 0; pair_G = 0;
					   for g1(1,nvar_mear_ordl-1,1);
						   for g2(g1+1,nvar_mear_ordl,1);
							   
							   pair_G = pair_G + 1;
							   
							   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
							   
							   rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
					   
							   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
							   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
							   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
							   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
							   
							   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
										   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   endfor;
					   endfor;
				   else;
				       p2_dd = 0;
				   endif;
				   
				   if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			    if(nvar_mear_ordl > 0);
			       p3_dd = 0;	
				   for g3(1,nvar_mear_ordl,1);
					   S = zeros(nc,nvar_mear_ordl+nc-1);
					   S[1,g3] = 1;
					   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
					   
					   rho_low_g3 = S*lower_threshold_append;
					   rho_up_g3  = S*upper_threshold_append;
					   
					   mean_gu    = S*Mean_changed;
					   var_gu     = S*Error_changed*S';
					   
					   mean_gu_d    = S*Mean_changed_d;
					   
					   om  = sqrt(diag(var_gu));
					   mean_low_final = (rho_low_g3 - mean_gu)./om;
					   mean_up_final  = (rho_up_g3 - mean_gu)./om;
					   var_final      = corrvc(var_gu);
					   var_final      = diagrv(var_final,ones(nc,1));
					   
					   mean_low_final_d = (- mean_gu_d)./om;
					   mean_up_final_d  = (- mean_gu_d)./om;
					   
					   seed20 = seednext;
					   					   
					   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
					    seednext = ss;
						   
					    p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d)  )  ;
					   
							  
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   endfor;
			   else;
				       mean_gu    = -Mean_changed;
					   var_gu     = Error_changed;
					   
					   mean_gu_d   = -Mean_changed_d;
					   
					   
					   om  = sqrt(diag(var_gu));
					   mean_gu_final = ( mean_gu)./om;
					  
					   var_gu_final      = corrvc(var_gu);
					   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
					   
					   mean_gu_final_d = ( mean_gu_d)./om;
					   					   
					   seed20 = seednext;
					   
					   
					   if((nc-1) eq 2);
						  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
						  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
						  g1 = g1'; 
					  else;
						  
						  {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
						   seednext = ss;
						   
					   endif;
					   
					   	p3_dd =  ( (1/w1) *  (g1[1,1:nc-1] * mean_gu_final_d)  )  ;
					   						  
							  
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   
			   endif;
			   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 delta_coeff_gradient = delta_coeff_gradient ~ gg_temp;   

         clear yd,Utilityd,delta_coeff_d;
	 endif;
	  endfor;

//---------------------------------------------------------------------------D_MATRIX-----------------------------------------------------------------------------
d_matrix_gradient = {};
for idmat(1,nvar_latent*nvar_mear,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+idmat] eq 0);
		
		d_matrix_gradient = d_matrix_gradient ~ zeros(nobs,1);
		
	else;
         
		d_matrix_coeff_d = zeros(nvar_latent*nvar_mear,1);  d_matrix_coeff_d[idmat] = 1; 
		D_matrix_d   = reshape(d_matrix_coeff_d,nvar_mear,nvar_latent);
        yd = {}; j = 1;
			
		do until j > nobs;
		  yd = yd| (D_matrix_d * z1[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
		  j = j+1;
		endo;

	    Utilityd = zeros(nobs,nc);
		
		seednext = seed10;
         gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix_d * Alpha_corr * D_matrix' + D_matrix * Alpha_corr * D_matrix_d' + Psi_matrix_d );
				   e12_d  = e12_d ~ ( D_matrix_d * Alpha_corr * Lambda_mat');
				   e21_d  = e21_d ~ ( Lambda_mat * Alpha_corr * D_matrix_d'); 
				   e22_d  = e22_d ~ ( Lambda_mat * Alpha_corr_d * Lambda_mat' + Lamda_d);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                              
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';    
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_dm = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_dr = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   			   
				   
				   p1_dd = (1/p1)*(p1_dm' * (Diff_Mean_d-Diff_Mean_mu_d) + p1_dr' * vech(Error_Y_d));
				   
				   				   			   
				   if(nvar_mear_ordl > 1);
					   p2_dd = 0; pair_G = 0;
					   for g1(1,nvar_mear_ordl-1,1);
						   for g2(g1+1,nvar_mear_ordl,1);
							   
							   pair_G = pair_G + 1;
							   
							   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
							   
							   om_low_g1   =   Error_changed[g1,g1];
							   om_low_g2   =   Error_changed[g2,g2];
							   om_up_g1    =   Error_changed[g1,g1];
							   om_up_g2    =   Error_changed[g2,g2];
							   
							   omncd_low_g1   =   Error_changed_d[g1,g1];
							   omncd_low_g2   =   Error_changed_d[g2,g2];
							   omncd_up_g1    =   Error_changed_d[g1,g1];
							   omncd_up_g2    =   Error_changed_d[g2,g2];
							   
							   rho_low_g1md  =  - Mean_changed_d[g1] ;
							   rho_low_g2md  =  - Mean_changed_d[g2] ;
							   rho_up_g1md   =  - Mean_changed_d[g1] ;
							   rho_up_g2md   =  - Mean_changed_d[g2] ;
							   
							   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
							   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
							   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
							   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
							   
							   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
							   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
							   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
							   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
							   
							   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
					   
										   
							   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
							   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
							   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
							   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
							   
							   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
								
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
						   endfor;
					   endfor;
				   else;
					   p2_dd = 0;
				   endif;
				   
				   
				   if(nvar_mear_ordl > 0);				   
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
				
			       endif;
			
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   var_gu_d     = S*Error_changed_d*S';
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
						   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_final_d      = diagrv(var_final_d ,ones(nc,1));
						   seed20 = seednext;
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						   seednext = ss;
							   
						   
						   					  
						   shi_r_unq = {};
						   for ishi(1,rows(var_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
						   endfor;
						   
						  
						   p3_dd = p3_dd + ( (1/w1) *  ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
						   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endfor;
				   else;
					       
							 mean_gu    = -Mean_changed;
						     var_gu     = Error_changed;
						   
						   
							mean_gu_d   = -Mean_changed_d;
						    var_gu_d     = Error_changed_d;
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_gu_final = (mean_gu)./sqrt(om);
						  
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   
						   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1'; 
							  p3_dd = ( (1/w1) *  ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
						   else;
							  
						      {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							  seednext = ss;
							   												  
							   shi_r_unq = {};
							   for ishi(1,rows(var_gu_final_d)-1,1);
									shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							   endfor;
							   
							   p3_dd = ( (1/w1) *  ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
					      endif;
					   
					   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					endif;
					   
					   
	               				   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 d_matrix_gradient = d_matrix_gradient ~ gg_temp;   

         clear d_matrix_coeff_d,D_matrix_d,yd,Utilityd;
	 endif;
	 endfor;

//-------------------------------------------------------------------------------PSI GRADIENT--------------------------------------------------------------
Psi_gradient = {};
for ipsi(1,nCholOmega1,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+ipsi] eq 0);
		
		Psi_gradient = Psi_gradient ~ zeros(nobs,1);
		
	else;
		
		   d_chol_psi = zeros(nCholOmega1,1);    d_chol_psi[ipsi]=1;                         Psidd = upmat(xpnd(d_chol_psi));
		   Psid       = Psidd'*Psi_chol + Psi_chol'*Psidd;
            
		   yd = zeros(nobs,nvar_mear);
		   Utilityd = zeros(nobs,nc); 

			seednext = seed10;
            gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]'; 
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix * Alpha_corr_d * D_matrix' + Psid );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_corr_d * Lambda_mat');
				   e21_d  = e21_d ~ ( Lambda_mat * Alpha_corr_d * D_matrix'); 
				   e22_d  = e22_d ~ ( Lambda_mat * Alpha_corr_d * Lambda_mat' + Lamda_d);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';     
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont]; 
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   
				   p1_dd = (1/p1)*(p1_d' * vech(Error_Y_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   om_low_g1   =   Error_changed[g1,g1];
						   om_low_g2   =   Error_changed[g2,g2];
						   om_up_g1    =   Error_changed[g1,g1];
						   om_up_g2    =   Error_changed[g2,g2];
						   
						   omncd_low_g1   =   Error_changed_d[g1,g1];
						   omncd_low_g2   =   Error_changed_d[g2,g2];
						   omncd_up_g1    =   Error_changed_d[g1,g1];
						   omncd_up_g2    =   Error_changed_d[g2,g2];
						   
						   rho_low_g1md  =  - Mean_changed_d[g1] ;
						   rho_low_g2md  =  - Mean_changed_d[g2] ;
						   rho_up_g1md   =  - Mean_changed_d[g1] ;
						   rho_up_g2md   =  - Mean_changed_d[g2] ;
						   
						   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   
						   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
						   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
						   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
						   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
						   
						   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;
			   
			       if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   var_gu_d     = S*Error_changed_d*S';
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
						   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_final_d      = diagrv(var_final_d ,ones(nc,1));
						   seed20 = seednext;
						   
						   
							{w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
							seednext = ss;
							   						   
						   shi_r_unq = {};
						   for ishi(1,rows(var_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
						   endfor;
						   
						   
						p3_dd = p3_dd + ( (1/w1) *  ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
						  
							
							
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endfor;
				   else;
					       mean_gu    = -Mean_changed;
						   var_gu     = Error_changed;
						   
						   
						   mean_gu_d   = -Mean_changed_d;
						   var_gu_d     = Error_changed_d;
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_gu_final = (mean_gu)./sqrt(om);
						   
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - (mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   
						   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1'; 
							  p3_dd =  ( (1/w1) *  ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
						  else;
							  
							  {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							   seednext = ss;
							   
						   				   						   
							   shi_r_unq = {};
							   for ishi(1,rows(var_gu_final_d)-1,1);
									shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							   endfor;
							   
							   
							   p3_dd =  ( (1/w1) *  ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
						  endif;
						   
						   
							
							
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endif;
					   
					   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 Psi_gradient = Psi_gradient ~ gg_temp;   

         clear d_chol_psi,Psidd,Psid;
	 endif;
	 endfor;

//--------------------------------------------------------------------BETA----------------------------------------------------------------------
beta_gradient = {};
for ibeta(1,nvar_ut+2,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+ibeta] eq 0);
		
		beta_gradient = beta_gradient ~ zeros(nobs,1);
		
	else;
		
		betad = zeros(nvar_ut+2,1);  betad[ibeta] = 1;
		
		Xbetad = (ones(nc,1) .*. betad )*~(dta[.,ivgenva])';
        v1d = {}; j = 1;
   
		do until j > nc;
		    v1d = v1d~(sumc(Xbetad[(j-1)*nvarma+1:(j*nvarma),.]));
			j = j+1;
		endo;
		
		yd = zeros(nobs,nvar_mear);
		Utilityd = v1d;
		
		seednext = seed10;
            gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
					   endfor;
				   endfor;
			   else;
				  p2_dd = 0; 
			  endif;
			  
                   if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   
						   om  = sqrt(diag(var_gu));
						   mean_low_final = (rho_low_g3 - mean_gu)./om;
						   mean_up_final  = (rho_up_g3 - mean_gu)./om;
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (- mean_gu_d)./om;
						   mean_up_final_d  = (- mean_gu_d)./om;
						   
						   seed20 = seednext;
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						   seednext = ss;
							   						   
						   
						   p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d) )  ;
						   	   
						   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
					   endfor;
				   else;
					       mean_gu    = -Mean_changed;
						   var_gu     = Error_changed;
						   
						   mean_gu_d   = -Mean_changed_d;
						   						   
						   om  = sqrt(diag(var_gu));
						   mean_gu_final = (mean_gu)./om;
						  
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = (mean_gu_d)./om;
						   
						   
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1';
						   else;
							  
							  {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							   seednext = ss;
								   
						   endif;
							   
						   
						   p3_dd = ( (1/w1) *  (g1[1,1:nc-1] * mean_gu_final_d) )  ;
						   
						   
						   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   endif;
					   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 beta_gradient = beta_gradient ~ gg_temp;   

         clear Xbetad,betad,yd,v1d,Utilityd;
	 endif;
	  endfor;
 
 //------------------------------------------------------------------------------------------LAMBDA--------------------------------------------
 lambda_gradient = {};
 for ilambda(1,nc*nvar_latent,1);
	
     if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+nvar_ut+2+ilambda] eq 0);
		
	    lambda_gradient = lambda_gradient ~ zeros(nobs,1);

     else;
	
	      d_lambda = zeros(rows(Lambda),1);   d_lambda[ilambda] = 1;
		  Lambda_mat_d = reshape(d_lambda,nc,nvar_latent);
		  
		  LambdaZd = {}; j = 1;
   
		  do until j > nobs;
			  LambdaZd = LambdaZd|(Lambda_mat_d * z1[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
			  j = j+1;
		  endo;
		  
		  yd = zeros(nobs,nvar_mear);
		  Utilityd = LambdaZd;
		  
		  seednext = seed10;
          gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix * Alpha_corr_d * D_matrix' + Psi_matrix_d );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_corr * Lambda_mat_d');
				   e21_d  = e21_d ~ ( Lambda_mat_d * Alpha_corr * D_matrix'); 
				   e22_d  = e22_d ~ ( Lambda_mat_d * Alpha_corr * Lambda_mat' + Lambda_mat * Alpha_corr * Lambda_mat_d' + Lamda_d);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';     
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];      
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_dm = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_dr = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   
				   
				   p1_dd = (1/p1)*(p1_dm' * (Diff_Mean_d-Diff_Mean_mu_d) + p1_dr' * vech(Error_Y_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   om_low_g1   =   Error_changed[g1,g1];
						   om_low_g2   =   Error_changed[g2,g2];
						   om_up_g1    =   Error_changed[g1,g1];
						   om_up_g2    =   Error_changed[g2,g2];
						   
						   omncd_low_g1   =   Error_changed_d[g1,g1];
						   omncd_low_g2   =   Error_changed_d[g2,g2];
						   omncd_up_g1    =   Error_changed_d[g1,g1];
						   omncd_up_g2    =   Error_changed_d[g2,g2];
						   
						   rho_low_g1md  =  - Mean_changed_d[g1] ;
						   rho_low_g2md  =  - Mean_changed_d[g2] ;
						   rho_up_g1md   =  - Mean_changed_d[g1] ;
						   rho_up_g2md   =  - Mean_changed_d[g2] ;
						   
						   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   
						   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
						   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
						   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
						   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
						   
						   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;
			   
			       if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   var_gu_d     = S*Error_changed_d*S';
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
						   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_final_d      = diagrv(var_final_d ,ones(nc,1));
						   seed20 = seednext;
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						    seednext = ss;
							  						   
						   shi_r_unq = {};
						   for ishi(1,rows(var_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
						   endfor;
						   
						   
						   p3_dd = p3_dd + ( (1/w1) * ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
						   
							
							
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endfor;
				   else;
					       mean_gu    = -Mean_changed;
						   var_gu     = Error_changed;
						   
						   mean_gu_d   = -Mean_changed_d;
						   var_gu_d     = Error_changed_d;
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_gu_final = ( mean_gu)./sqrt(om);
						   
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						  						   
						   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1' ;
							  p3_dd = ( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
						  else;
							  
						    {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							seednext = ss;
							   
							   
							   
							   shi_r_unq = {};
							   for ishi(1,rows(var_gu_final_d)-1,1);
									shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							   endfor;
							   
							   
							   p3_dd = ( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
						   endif;
						   
						   
							
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endif;
					   
					   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 lambda_gradient = lambda_gradient ~ gg_temp;   

         clear d_lambda,LambdaZd,Lambda_mat_d,yd,Utilityd;
	 endif;
	 endfor;
 
 //-----------------------------------------------------------------------------LAMDA-----------------------------------------------------------------------------------
 lamda_gradient = {};
 for ilamda(1,nCholErr,1);
	 
	 if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+nvar_ut+2+nc*nvar_latent+ilamda] eq 0);
		 
		 lamda_gradient = lamda_gradient ~ zeros(nobs,1);
		 
	 else;
		
	      d_chol_lamda = zeros(nCholErr,1);    d_chol_lamda[ilamda]=1;                         lamdadd = upmat(xpnd(d_chol_lamda));
		  lamdad1 = lamdadd'*Chol_Lamda_mat + Chol_Lamda_mat'*lamdadd;
          Lamdad      = zeros(nc,nc);                Lamdad[2:nc,2:nc] = lamdad1; 
			
		  yd = zeros(nobs,nvar_mear);
		  Utilityd = zeros(nobs,nc); 
		  
		  seednext = seed10;
          gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]'; 
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix * Alpha_corr_d * D_matrix' + Psi_matrix_d );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_corr_d * Lambda_mat');
				   e21_d  = e21_d ~ ( Lambda_mat * Alpha_corr_d * D_matrix'); 
				   e22_d  = e22_d ~ ( Lambda_mat * Alpha_corr_d * Lambda_mat' + Lamdad);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];     
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   p1 = pdfmvn1(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   
				   p1_dd = (1/p1)*(p1_d' * vech(Error_Y_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   om_low_g1   =   Error_changed[g1,g1];
						   om_low_g2   =   Error_changed[g2,g2];
						   om_up_g1    =   Error_changed[g1,g1];
						   om_up_g2    =   Error_changed[g2,g2];
						   
						   omncd_low_g1   =   Error_changed_d[g1,g1];
						   omncd_low_g2   =   Error_changed_d[g2,g2];
						   omncd_up_g1    =   Error_changed_d[g1,g1];
						   omncd_up_g2    =   Error_changed_d[g2,g2];
						   
						   rho_low_g1md  =  - Mean_changed_d[g1] ;
						   rho_low_g2md  =  - Mean_changed_d[g2] ;
						   rho_up_g1md   =  - Mean_changed_d[g1] ;
						   rho_up_g2md   =  - Mean_changed_d[g2] ;
						   
						   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   
						   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
						   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
						   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
						   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
						   
						   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;
			   
			       if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   var_gu_d     = S*Error_changed_d*S';
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
						   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_final_d      = diagrv(var_final_d ,ones(nc,1));
						   seed20 = seednext;
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						    seednext = ss;
							   						   
						   shi_r_unq = {};
						   for ishi(1,rows(var_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
						   endfor;
						   
						   
						   p3_dd = p3_dd + ( (1/w1) * ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
						   
						   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endfor;
				   else;
					       mean_gu    = -Mean_changed;
						   var_gu     = Error_changed;
						   
						   mean_gu_d   = -Mean_changed_d;
						   var_gu_d     = Error_changed_d;
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_gu_final = ( mean_gu)./sqrt(om);
						   
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = ( sqrt(om') .* mean_gu_d' - (mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   
						   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1' ;
							  p3_dd =( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
						  else;
							  
						      {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							   seednext = ss;
								
							   
													   
							   shi_r_unq = {};
							   for ishi(1,rows(var_gu_final_d)-1,1);
									shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							   endfor;
							   
							   
							   p3_dd =( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
						   endif;
						   
						   
						   					   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endif;
					   
					   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 lamda_gradient = lamda_gradient ~ gg_temp;   

         clear d_chol_lamda,lamdadd,lamdad1,Lamdad;
	 endif;
	  endfor;

//----------------------------------------------------------------------------LOWER THRESHOLD--------------------------------------------------------------
if(nvar_mear_ordl > 0);

lower_threshold_gradient = {};
for ilower_th(1,nvar_mear_ordl,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+nvar_ut+2+nc*nvar_latent+nCholErr+ilower_th] eq 0);
		
		lower_threshold_gradient = lower_threshold_gradient ~ zeros(nobs,1);
		
	else;
		
		  yd = zeros(nobs,nvar_mear);
		  Utilityd = zeros(nobs,nc); 
		  lower_threshold_d = zeros(nvar_mear_ordl,1);   upper_threshold_d = zeros(nvar_mear_ordl,1);
		  lower_threshold_d[ilower_th] = 1;
		  
		  lower_threshold_matrix_d = zeros(nobs,nvar_mear_ordl);
	      upper_threshold_matrix_d = zeros(nobs,nvar_mear_ordl);
	
			for i(1,nobs,1);
				for j(1,nvar_mear_ordl,1);
					if(dta[i,ivgenyo[j]] == 1);
					  lower_threshold_matrix_d[i,j] = negative_infinity_d;
					  upper_threshold_matrix_d[i,j] = lower_threshold_d[j];
					elseif(dta[i,ivgenyo[j]] == 2) ;
					   lower_threshold_matrix_d[i,j] = lower_threshold_d[j];
					   upper_threshold_matrix_d[i,j] = upper_threshold_d[j];
					elseif(dta[i,ivgenyo[j]] == 3);
					   lower_threshold_matrix_d[i,j] = upper_threshold_d[j];
					   upper_threshold_matrix_d[i,j] = positive_infinity_d;
				   endif;
				   
			   endfor;
		   endfor;
   
   
		  seednext = seed10;
          gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];     
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       // 1
				   Diff_Mean     = (dta[i,ivgenyc])';      // 1
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   rho_low_g1d =  (lower_threshold_matrix_d[i,g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2d =  (lower_threshold_matrix_d[i,g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1d =   (upper_threshold_matrix_d[i,g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2d =   (upper_threshold_matrix_d[i,g2] ) / sqrt(Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;
			   
			       
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   
				   lower_threshold_append_d = {}; upper_threshold_append_d = {}; 
				   lower_threshold_append_d = lower_threshold_append_d | lower_threshold_matrix_d[i,.]';
				   upper_threshold_append_d = upper_threshold_append_d | upper_threshold_matrix_d[i,.]';
				   
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
						
						lower_threshold_append_d = lower_threshold_append_d |  0;
						upper_threshold_append_d = upper_threshold_append_d |  0;
				   endfor;
			       
			   
			       
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   rho_low_g3d = S*lower_threshold_append_d;
						   rho_up_g3d  = S*upper_threshold_append_d;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   
						   om  = sqrt(diag(var_gu));
						   mean_low_final = (rho_low_g3 - mean_gu)./om;
						   mean_up_final  = (rho_up_g3 - mean_gu)./om;
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (rho_low_g3d)./om;
						   mean_up_final_d  = (rho_up_g3d)./om;
						   
						   seed20 = seednext;
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						   seednext = ss;
							   						   
						   
						   
						   p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d)  )  ;
						  
							
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
					   endfor;
				   	   
					   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 lower_threshold_gradient = lower_threshold_gradient ~ gg_temp;   

         clear yd,Utilityd,lower_threshold_matrix_d,upper_threshold_matrix_d;
	 endif;
	 endfor;
 
 //------------------------------------------------------------------------------UPPER THRESHOLD---------------------------------------------------------------------
 upper_threshold_gradient = {};
for iupper_th(1,nvar_mear_ordl,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+nvar_ut+2+nc*nvar_latent+nCholErr+nvar_mear_ordl+iupper_th] eq 0);
		
		upper_threshold_gradient = upper_threshold_gradient ~ zeros(nobs,1);
		
	else;
		
		  yd = zeros(nobs,nvar_mear);
		  Utilityd = zeros(nobs,nc); 
		  lower_threshold_d = zeros(nvar_mear_ordl,1);   upper_threshold_d = zeros(nvar_mear_ordl,1);
		  upper_threshold_d[iupper_th] = 1;
		  
		  lower_threshold_matrix_d = zeros(nobs,nvar_mear_ordl);
	      upper_threshold_matrix_d = zeros(nobs,nvar_mear_ordl);
	
			for i(1,nobs,1);
				for j(1,nvar_mear_ordl,1);
					if(dta[i,ivgenyo[j]] == 1);
					  lower_threshold_matrix_d[i,j] = negative_infinity_d;
					  upper_threshold_matrix_d[i,j] = lower_threshold_d[j];
					elseif(dta[i,ivgenyo[j]] == 2) ;
					   lower_threshold_matrix_d[i,j] = lower_threshold_d[j];
					   upper_threshold_matrix_d[i,j] = upper_threshold_d[j];
					elseif(dta[i,ivgenyo[j]] == 3);
					   lower_threshold_matrix_d[i,j] = upper_threshold_d[j];
					   upper_threshold_matrix_d[i,j] = positive_infinity_d;
				   endif;
				   
			   endfor;
		   endfor;
		   
		  seednext = seed10;
          gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d     = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   rho_low_g1d =  (lower_threshold_matrix_d[i,g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2d =  (lower_threshold_matrix_d[i,g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1d =   (upper_threshold_matrix_d[i,g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2d =   (upper_threshold_matrix_d[i,g2] ) / sqrt(Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;
			   
			   
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   
				   lower_threshold_append_d = {}; upper_threshold_append_d = {}; 
				   lower_threshold_append_d = lower_threshold_append_d | lower_threshold_matrix_d[i,.]';
				   upper_threshold_append_d = upper_threshold_append_d | upper_threshold_matrix_d[i,.]';
				   
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
						
						lower_threshold_append_d = lower_threshold_append_d |  0;
						upper_threshold_append_d = upper_threshold_append_d |  0;
				   endfor;
				
				   p3_dd = 0;	
				   for g3(1,nvar_mear_ordl,1);
					   S = zeros(nc,nvar_mear_ordl+nc-1);
					   S[1,g3] = 1;
					   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
					   
					   rho_low_g3 = S*lower_threshold_append;
					   rho_up_g3  = S*upper_threshold_append;
					   
					   rho_low_g3d = S*lower_threshold_append_d;
					   rho_up_g3d  = S*upper_threshold_append_d;
					   
					   mean_gu    = S*Mean_changed;
					   var_gu     = S*Error_changed*S';
					   
					   mean_gu_d    = S*Mean_changed_d;
					   
					   om  = sqrt(diag(var_gu));
					   mean_low_final = (rho_low_g3 - mean_gu)./om;
					   mean_up_final  = (rho_up_g3 - mean_gu)./om;
					   var_final      = corrvc(var_gu);
					   var_final      = diagrv(var_final,ones(nc,1));
					   
					   mean_low_final_d = (rho_low_g3d)./om;
					   mean_up_final_d  = (rho_up_g3d)./om;
					   
					   seed20 = seednext;
					   
					   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
					    seednext = ss;
						   					   
					   
					   
					   p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d)  )  ;
					   
					   
					   
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   endfor;
				   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 upper_threshold_gradient = upper_threshold_gradient ~ gg_temp;   

         clear yd,Utilityd,lower_threshold_matrix_d,upper_threshold_matrix_d;
	 endif;
	  endfor;
 endif;
 
 gradient = {};
 if(nvar_mear_ordl > 0);
 gradient = gradient ~ alpha_gradient ~ alpha_corr_gradient ~ delta_coeff_gradient ~ d_matrix_gradient ~ Psi_gradient ~ beta_gradient ~ lambda_gradient ~ lamda_gradient ~ lower_threshold_gradient ~ upper_threshold_gradient;
 else;
 gradient = gradient ~ alpha_gradient ~ alpha_corr_gradient ~ delta_coeff_gradient ~ d_matrix_gradient ~ Psi_gradient ~ beta_gradient ~ lambda_gradient ~ lamda_gradient;
 endif;

 Gradient_Store = gradient;
 retp(gradient);
 endp;
 //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------------------------------------------ 
proc lpr1(parm,dta);
	local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Psi_chol,Beta_coeff,Lambda_coeff,Chol_Lamda_mat,lower_threshold,upper_threshold,Alpha_corr,D_matrix,Psi_matrix,Lamda,Lamda_chol,Lambda_mat;
	local AlphaW,z,i,j,y,Xbeta,v1,LambdaZ,Utility,temp,Chol_Alpha_corr_adjusted,iden_matrix,one_negative,seednext,seed20,Likelihood,Full_error,e1,e12,e21,e22,U_Y,M,Alt_Chosen;
	local B_Tild,Error_Tild,Mean_changed,Error_changed,rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,lower_threshold_append,upper_threshold_append;
	local g1,g2,g3,p1,p2,p3,p3_1,p3_2,rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,S,LL,ch,ss,p1_negative,p2_negative,p3_negative;
	local BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,pair_G,check1,lower_threshold_matrix,upper_threshold_matrix,negative_check,Temp_negative,Diff_Mean_mu,Chol_Alpha_corr_adjusted1;
	local mean_gu_final,var_gu_final;
	Alpha_coeff        =  parm[1:nvarml];
	Chol_Alpha_corr    =  upmat(xpnd(parm[nvarml+1:nvarml+nCholOmega]));
	delta_coeff        =  parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear];
	d_matrix_coeff     =  parm[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear];
	Psi_chol           =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]));
	Beta_coeff         =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)];
	Lambda_coeff       =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent];
	Chol_Lamda_mat     =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr]));
	if(nvar_mear_ordl > 0);
	lower_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl];
	upper_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+nvar_mear_ordl];
    endif;

	Alpha_corr = Chol_Alpha_corr'*Chol_Alpha_corr;
	D_matrix   = reshape(d_matrix_coeff,nvar_mear,nvar_latent);  
	Psi_matrix = Psi_chol'*Psi_chol;
	Lamda      = zeros(nc,nc);                Lamda[2:nc,2:nc] = Chol_Lamda_mat'*Chol_Lamda_mat;
	Lamda_chol = zeros(nc,nc);                Lamda_chol[2:nc,2:nc] = Chol_Lamda_mat';
	Lambda_mat = reshape(Lambda_coeff,nc,nvar_latent);
	
	AlphaW = (ones(nvar_latent,1) .*. Alpha_coeff  )*~(dta[.,ivgenvl])';
	z = {}; j = 1;
	
	do until j > nvar_latent;
       z = z~(sumc(AlphaW[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
       j = j+1;
    endo;
  
    
	y = {}; j = 1;
	
	do until j > nobs;
       y = y|( (D_matrix * z[j,.]' ) +  delta_coeff)' ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
    endo;

   if(nvar_mear_ordl > 0);
    lower_threshold_matrix = zeros(nobs,nvar_mear_ordl);
	upper_threshold_matrix = zeros(nobs,nvar_mear_ordl);
	
	for i(1,nobs,1);
		for j(1,nvar_mear_ordl,1);
			if(dta[i,ivgenyo[j]] == 1);
			  lower_threshold_matrix[i,j] = negative_infinity;
			  upper_threshold_matrix[i,j] = lower_threshold[j];
		    elseif(dta[i,ivgenyo[j]] == 2) ;
               lower_threshold_matrix[i,j] = lower_threshold[j];
			   upper_threshold_matrix[i,j] = upper_threshold[j];
		    elseif(dta[i,ivgenyo[j]] == 3);
			   lower_threshold_matrix[i,j] = upper_threshold[j];
			   upper_threshold_matrix[i,j] = positive_infinity;
		   endif;
		   
	   endfor;
   endfor;
  endif;
   

   Xbeta = (ones(nc,1) .*. Beta_coeff )*~(dta[.,ivgenva])';
   v1 = {}; j = 1;
   
   do until j > nc;
       v1 = v1~(sumc(Xbeta[(j-1)*nvarma+1:(j*nvarma),.]));
       j = j+1;
   endo;
   LambdaZ = {}; j = 1;
   
   do until j > nobs;
       LambdaZ = LambdaZ|(Lambda_mat * z[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
   endo;
	
   Utility = v1 + LambdaZ;
   iden_matrix = eye(nc-1);
   one_negative = -1*ones(nc-1,1);
   seednext = seed10;
   Likelihood = {};
   Temp_negative = ones(nobs,1);
   for i(1,nobs,1);
	   negative_check = 0; 
	   U_Y = {}; LL = 0;
	   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
	   
	   U_Y   = U_Y | y[i,.]'| Utility[i,.]';
	   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
	   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
	   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
	   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
	   
	   Full_error = Full_error | (e1~e12);
	   Full_error = Full_error | (e21~e22);
	   
	   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
	   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
	   Alt_chosen = dta[i,altchm];
	   
	   if(Alt_chosen eq 1);
		temp = one_negative ~ iden_matrix;
	   elseif(Alt_chosen eq nc);
		temp = iden_matrix ~ one_negative;
	   else;
		ch = Alt_chosen;
		temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
	   endif;
	   
	   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
	   clear temp;
	   
	   B_Tild = M * U_Y;
	   Error_Tild = M * Full_error * M';
	   
	   
	   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
	   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
	   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
	   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
	   Diff_Mean     = (dta[i,ivgenyc])';      
	   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
	   
	   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
	   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
	   
	  
	   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
	   
	   if(nvar_mear_ordl > 1);
	   p2 = 1; pair_G = 0;
	   for g1(1,nvar_mear_ordl-1,1);
		   for g2(g1+1,nvar_mear_ordl,1);
			   
			   pair_G = pair_G + 1;
			   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
			   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
			   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
			   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
			   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
	           
			   
			   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
			   p2 = p2*p2_temp;
			   
			   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp; 
		   endfor;
	   endfor;
       endif;
	   
       if(nvar_mear_ordl > 0);	   
       lower_threshold_append = {}; upper_threshold_append = {}; 
	   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
	   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
	   for j(1,nc-1,1);
	        lower_threshold_append = lower_threshold_append |  negative_infinity;
			upper_threshold_append = upper_threshold_append |  0;
	   endfor;
       endif;
   
       if(nvar_mear_ordl > 0);
		   p3 = 1;	
		   for g3(1,nvar_mear_ordl,1);
			   S = zeros(nc,nvar_mear_ordl+nc-1);
			   S[1,g3] = 1;
			   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
			   
			   rho_low_g3 = S*lower_threshold_append;
			   rho_up_g3  = S*upper_threshold_append;
			   
			   mean_gu    = S*Mean_changed;
			   var_gu     = S*Error_changed*S';
			   
			   om  = sqrt(diag(var_gu));
			   mean_low_final = (rho_low_g3 - mean_gu)./om;
			   mean_up_final  = (rho_up_g3 - mean_gu)./om;
			   var_final      = corrvc(var_gu);
			   var_final      = diagrv(var_final,ones(nc,1));
			   
			   seed20 = seednext;
			   
			   {p3_1,ss} = cdfmvna(mean_up_final',var_final,seed20);
			   seednext = ss;
				   
			   
			   		  
			   p3 = p3*p3_1;
			   
			   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf;
		   endfor;
		else;
			   
			   mean_gu    = -Mean_changed;
			   var_gu     = Error_changed;
			   
			   om  = diag(var_gu);
			   mean_gu_final = mean_gu'./(sqrt(om))';
			   var_gu_final = corrvc(var_gu);
			   var_gu_final = diagrv(var_gu_final,ones(nc-1,1));
			   
			   seed20 = seednext;
			    if((nc-1) eq 2);
					  p3_1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[1,2],var_gu_final[1,2]);
                else;					  
				   
					{p3_1,ss} = cdfmvna(mean_gu_final,var_gu_final,seed20);
					 seednext = ss;
				   
				endif;
				   
				   
				p3 = p3_1;
				   
				   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_final,var_gu_final;
	     endif;
	   
	   	   
	   if (p1 < 0);
		   p1 = (p1-((p1<=0)*(p1-0.0001)));
		   negative_check = negative_check + 1;
	   endif;
	   
	   if(nvar_mear_ordl > 1);
		   if (p2 < 0);
			   p2 = (p2-((p2<=0)*(p2-0.0001)));
			   negative_check = negative_check + 1;
		   endif;
       endif;
   
       if (p3 < 0);
		   p3 = (p3-((p3<=0)*(p3-0.0001)));
		   negative_check = negative_check + 1;
	   endif;
	   
	   if(negative_check > 0);
	      LL = ln(0.0001); 
	   else;
		 if(nvar_mear_ordl > 1);
		    LL = ln(p1) + ln(p2) + ln(p3);
		 else;
			LL = ln(p1) + ln(p3);
		 endif;
	  endif;
	  
	  Likelihood = Likelihood | LL;
	  
	  	  
	  if(negative_check > 0);
	     Temp_negative[i] = 0;
	  endif;
	 
	 
	   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean;
   endfor;
 Positive_Obs = Temp_negative; 
 retp(Likelihood);
 clear Alphaw,y,Xbeta,v1,LambdaZ,Utility,Temp_negative;
 endp; 
	   
	   
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

proc lgd1(parm,dta);

    local Alpha_coeff,Chol_Alpha_corr,delta_coeff,d_matrix_coeff,Psi_chol,Beta_coeff,Lambda_coeff,Chol_Lamda_mat,lower_threshold,upper_threshold,Alpha_corr,D_matrix,Psi_matrix,Lamda,Lamda_chol,Lambda_mat;
	local AlphaW1,z1,i,j,y1,Xbeta1,v11,LambdaZ1,Utility1,temp,Chol_Alpha_corr_adjusted,iden_matrix,one_negative,seednext,seed20,Full_error,e1,e12,e21,e22,U_Y,M,Alt_Chosen;
	local B_Tild,Error_Tild,Mean_changed,Error_changed,rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,lower_threshold_append,upper_threshold_append;
	local g3,p1,p2,p3,p3_1,p3_2,rho_low_g3,rho_up_g3,mean_gu,mean_low_final,mean_up_final,var_final,diff_cdf,S,LL,ch,ss,p1_negative,p2_negative,p3_negative;
	local BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,pair_G;
	local alpha_gradient,ialpha,alphad,AlphaWd,zd,yd,Utilityd,gg_temp,U_Yd,gg,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2;
    local p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44,mean_gu_d,mean_low_final_d,mean_up_final_d,p1_dd,p2_dd,p3_dd,w1,g1,w2,g2;
	local alpha_corr_gradient,ia_corr,d_chol_alpha_corr,Alpha_corrdd,Alpha_corrd,Full_error_d,e1_d,e12_d,e21_d,e22_d,B_Tild_d,Error_Tild_d,BU_Tild_d,Error_YU_Tild_d,Error_U_Tild_d;
    local Error_Y_d,Diff_Mean_d,Mean_changed_d,Error_changed_d,om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md;
    local rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d,omncd,var_gu_d,var_final_d,shi_r_unq,var_gu,om,delta_coeff_gradient,idelta,delta_coeff_d;
    local d_matrix_gradient,idmat,d_matrix_coeff_d,D_matrix_d,p1_dm,p1_dr,Psi_gradient,ipsi,d_chol_psi,Psidd,Psid,beta_gradient,ibeta,betad,Xbetad,v1d,lambda_gradient,ilambda,d_lambda;
    local Lambda_mat_d,LambdaZd,lamda_gradient,ilamda,d_chol_lamda,lamdadd,lamdad1,Lamdad,lower_threshold_gradient,ilower_th,lower_threshold_d,upper_threshold_d,lower_threshold_append_d,upper_threshold_append_d; 
    local upper_threshold_gradient,iupper_th,gradient,Alpha_corr_d,Psi_matrix_d,Lamda_d,p1_d,rho_low_g3d,rho_up_g3d,check,Diff_Mean_mu,Diff_Mean_mu_d;
	local lower_threshold_matrix,upper_threshold_matrix,lower_threshold_matrix_d,upper_threshold_matrix_d,d_chol_alpha_corr1,icheck,jcheck,Chol_Alpha_corr_adjusted1;
	local mean_gu_final,var_gu_final,mean_gu_final_d,var_gu_final_d;
	Alpha_coeff        =  parm[1:nvarml];
	Chol_Alpha_corr    =  upmat(xpnd(parm[nvarml+1:nvarml+nCholOmega]));
	delta_coeff        =  parm[nvarml+nCholOmega+1:nvarml+nCholOmega+nvar_mear];
	d_matrix_coeff     =  parm[nvarml+nCholOmega+nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear];
	Psi_chol           =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1]));
	Beta_coeff         =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)];
	Lambda_coeff       =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent];
	Chol_Lamda_mat     =  upmat(xpnd(parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr]));
	if(nvar_mear_ordl > 0);
	lower_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl];
	upper_threshold    =  parm[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+1:nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+rows(beta)+nc*nvar_latent+nCholErr+nvar_mear_ordl+nvar_mear_ordl];
    endif;
	
	Alpha_corr = Chol_Alpha_corr'*Chol_Alpha_corr;
	D_matrix   = reshape(d_matrix_coeff,nvar_mear,nvar_latent);  
	Psi_matrix = Psi_chol'*Psi_chol;
	Lamda      = zeros(nc,nc);                Lamda[2:nc,2:nc] = Chol_Lamda_mat'*Chol_Lamda_mat;
	Lamda_chol = zeros(nc,nc);                Lamda_chol[2:nc,2:nc] = Chol_Lamda_mat';
	Lambda_mat = reshape(Lambda_coeff,nc,nvar_latent);
	
	Alpha_corr_d = zeros(nvar_latent,nvar_latent);
	Psi_matrix_d = zeros(nvar_mear,nvar_mear);
	Lamda_d      = zeros(nc,nc); 

    AlphaW1 = (ones(nvar_latent,1) .*. Alpha_coeff  )*~(dta[.,ivgenvl])';
	z1 = {}; j = 1;
	
	do until j > nvar_latent;
       z1 = z1~(sumc(AlphaW1[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
       j = j+1;
    endo;
     y1 = {}; j = 1;
	
	do until j > nobs;
       y1 = y1|( (D_matrix * z1[j,.]' ) +  delta_coeff)' ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
    endo;

   Xbeta1 = (ones(nc,1) .*. Beta_coeff )*~(dta[.,ivgenva])';
   v11 = {}; j = 1;
   
   do until j > nc;
       v11 = v11~(sumc(Xbeta1[(j-1)*nvarma+1:(j*nvarma),.]));
       j = j+1;
   endo;
   LambdaZ1 = {}; j = 1;
   
   do until j > nobs;
       LambdaZ1 = LambdaZ1|(Lambda_mat * z1[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
       j = j+1;
   endo;
	
   Utility1 = v11 + LambdaZ1;
   iden_matrix = eye(nc-1);
   one_negative = -1*ones(nc-1,1);
   
   if(nvar_mear_ordl > 0);
    lower_threshold_matrix = zeros(nobs,nvar_mear_ordl);
	upper_threshold_matrix = zeros(nobs,nvar_mear_ordl);
	
	for i(1,nobs,1);
		for j(1,nvar_mear_ordl,1);
			if(dta[i,ivgenyo[j]] == 1);
			  lower_threshold_matrix[i,j] = negative_infinity;
			  upper_threshold_matrix[i,j] = lower_threshold[j];
		    elseif(dta[i,ivgenyo[j]] == 2) ;
               lower_threshold_matrix[i,j] = lower_threshold[j];
			   upper_threshold_matrix[i,j] = upper_threshold[j];
		    elseif(dta[i,ivgenyo[j]] == 3);
			   lower_threshold_matrix[i,j] = upper_threshold[j];
			   upper_threshold_matrix[i,j] = positive_infinity;
		   endif;
		   
	   endfor;
   endfor;
   endif;
   
   //-----------------------------------------------------------ALPHA GRADIENT--------------------------------------------------------------------------
   alpha_gradient = {};
   
   for ialpha(1,nvarml,1);
	   
	   if(_max_active[ialpha] eq 0);
		   alpha_gradient = alpha_gradient ~ zeros(nobs,1);
	   else;
		   
		   alphad = zeros(nvarml,1); alphad[ialpha] = 1;
           AlphaWd = (ones(nvar_latent,1) .*. alphad  )*~(dta[.,ivgenvl])';
		   zd = {}; j = 1;
			
			do until j > nvar_latent;
			   zd = zd~(sumc(AlphaWd[(j-1)*nvarml+1:(j*nvarml),.]));                // Z stores the latent variables value for each observation. nobs X nvar_latent. 1st col has z1, 2nd z2 and so on for all observations.
			   j = j+1;
			endo;
		  
		   	
			yd = {}; j = 1;
			
			do until j > nobs;
			   yd = yd| (D_matrix * zd[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
			   j = j+1;
			endo;

			LambdaZd = {}; j = 1;
   
		    do until j > nobs;
			   LambdaZd = LambdaZd|(Lambda_mat * zd[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
			   j = j+1;
		    endo;
			
		    Utilityd = LambdaZd;
            
			seednext = seed10;
            gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                              
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];     
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';     
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);			   			   
					   p2_dd = 0; pair_G = 0;
					   for g1(1,nvar_mear_ordl-1,1);
						   for g2(g1+1,nvar_mear_ordl,1);
							   
							   pair_G = pair_G + 1;
							   
							   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
							   
							   rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
					   
							   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
							   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
							   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
							   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
							   
							   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
										   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   endfor;
					   endfor;
				   else;
					  p2_dd = 0; 
			      endif;
			   
                   if(nvar_mear_ordl > 0);	
					   lower_threshold_append = {}; upper_threshold_append = {}; 
					   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
					   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
					   for j(1,nc-1,1);
							lower_threshold_append = lower_threshold_append |  negative_infinity;
							upper_threshold_append = upper_threshold_append |  0;
						endfor;
						
				   endif;	
				   
				if(nvar_mear_ordl > 0); 
				   p3_dd = 0;	
				   for g3(1,nvar_mear_ordl,1);
					   S = zeros(nc,nvar_mear_ordl+nc-1);
					   S[1,g3] = 1;
					   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
					   
					   rho_low_g3 = S*lower_threshold_append;
					   rho_up_g3  = S*upper_threshold_append;
					   
					   mean_gu    = S*Mean_changed;
					   var_gu     = S*Error_changed*S';
					   
					   mean_gu_d    = S*Mean_changed_d;
					   
					   om  = sqrt(diag(var_gu));
					   mean_low_final = (rho_low_g3 - mean_gu)./om;
					   mean_up_final  = (rho_up_g3 - mean_gu)./om;
					   var_final      = corrvc(var_gu);
					   var_final      = diagrv(var_final,ones(nc,1));
					   
					   mean_low_final_d = (- mean_gu_d)./om;
					   mean_up_final_d  = (- mean_gu_d)./om;
					   
					   seed20 = seednext;
					   
					   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
					   seednext = ss;
						   
					   
					   p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d)  )  ;
				       
					   
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   endfor;
			   else;
				   mean_gu    = -Mean_changed;
				   var_gu     = Error_changed;
				   
				   om  = sqrt(diag(var_gu));
				   mean_gu_final = mean_gu./om;
				   var_gu_final = corrvc(var_gu);
				   var_gu_final = diagrv(var_gu_final,ones(nc-1,1));
				   
				   mean_gu_d   = -Mean_changed_d;
				   mean_gu_final_d  = (mean_gu_d)./om;
				   
				   seed20 = seednext;
					
		           if((nc-1) eq 2);
					  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
					  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
					  g1 = g1'; 
				   else;
					  
					  {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
					   seednext = ss;
					   
				   endif;	
				   
					   p3_dd = ( (1/w1) *  (g1[1,1:nc-1] * mean_gu_final_d)  )  ;
					   
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_final,var_gu_final,mean_gu_d,mean_gu_final_d;
				endif;
				   
				   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 alpha_gradient = alpha_gradient ~ gg_temp;   

         clear Alphawd,zd,yd,LambdaZd,Utilityd;
	 endif;
	 endfor;
 
 
  //--------------------------------------------------------------------ALPHA_CORRELATION--------------------------------------------------
alpha_corr_gradient = {};
for ia_corr(1,nCholOmega,1);
	
	if(_max_active[nvarml+ia_corr] eq 0);
		
		alpha_corr_gradient = alpha_corr_gradient ~ zeros(nobs,1);
		
	else;
		
		   d_chol_alpha_corr1 = zeros(nCholOmega,1);  d_chol_alpha_corr1[ia_corr] = 1; 
		   d_chol_alpha_corr = upmat(xpnd(d_chol_alpha_corr1));
		   Alpha_corrd = d_chol_alpha_corr'*Chol_Alpha_corr + Chol_Alpha_corr'*d_chol_alpha_corr;
           
		   			   
		   yd = zeros(nobs,nvar_mear);
		   Utilityd = zeros(nobs,nc); 
		  
			seednext = seed10;
            gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]'; 
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix * Alpha_corrd * D_matrix' + Psi_matrix_d );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_corrd * Lambda_mat');
				   e21_d  = e21_d ~ ( Lambda_mat * Alpha_corrd * D_matrix'); 
				   e22_d  = e22_d ~ ( Lambda_mat * Alpha_corrd * Lambda_mat' + Lamda_d);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];      
				   Diff_Mean     = (dta[i,ivgenyc])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];      
				   Diff_Mean_d     = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   
				   p1_dd = (1/p1)*(p1_d' * vech(Error_Y_d));
				   
				   if(nvar_mear_ordl > 1);
					   p2_dd = 0; pair_G = 0;
					   for g1(1,nvar_mear_ordl-1,1);
						   for g2(g1+1,nvar_mear_ordl,1);
							   
							   pair_G = pair_G + 1;
							   
							   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
							   
							   om_low_g1   =   Error_changed[g1,g1];
							   om_low_g2   =   Error_changed[g2,g2];
							   om_up_g1    =   Error_changed[g1,g1];
							   om_up_g2    =   Error_changed[g2,g2];
							   
							   omncd_low_g1   =   Error_changed_d[g1,g1];
							   omncd_low_g2   =   Error_changed_d[g2,g2];
							   omncd_up_g1    =   Error_changed_d[g1,g1];
							   omncd_up_g2    =   Error_changed_d[g2,g2];
							   
							   rho_low_g1md  =  - Mean_changed_d[g1] ;
							   rho_low_g2md  =  - Mean_changed_d[g2] ;
							   rho_up_g1md   =  - Mean_changed_d[g1] ;
							   rho_up_g2md   =  - Mean_changed_d[g2] ;
							   
							   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
							   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
							   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
							   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
							   
							   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
							   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
							   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
							   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
							   
							   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
					   
							   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
							   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
							   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
							   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
							   
							   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
										   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
						   endfor;
					   endfor;
				   else;
					   p2_dd = 0;
				   endif;
				   
				   if(nvar_mear_ordl > 0);
					   lower_threshold_append = {}; upper_threshold_append = {}; 
					   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
					   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
					   for j(1,nc-1,1);
							lower_threshold_append = lower_threshold_append |  negative_infinity;
							upper_threshold_append = upper_threshold_append |  0;
						endfor;
						
					endif;
					
                 if(nvar_mear_ordl > 0);
                   p3_dd = 0;	
				   for g3(1,nvar_mear_ordl,1);
					   S = zeros(nc,nvar_mear_ordl+nc-1);
					   S[1,g3] = 1;
					   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
					   
					   rho_low_g3 = S*lower_threshold_append;
					   rho_up_g3  = S*upper_threshold_append;
					   
					   mean_gu    = S*Mean_changed;
					   var_gu     = S*Error_changed*S';
					   
					   mean_gu_d    = S*Mean_changed_d;
					   var_gu_d     = S*Error_changed_d*S';
					   
					   om  = (diag(var_gu));
					   omncd  = (diag(var_gu_d));
					   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
					   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
					   var_final      = corrvc(var_gu);
					   var_final      = diagrv(var_final,ones(nc,1));
					   
					   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   
					   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
					   var_final_d      = diagrv(var_final_d ,ones(nc,1));
					   seed20 = seednext;
					   
					   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						seednext = ss;
						   
					   
					   shi_r_unq = {};
					   for ishi(1,rows(var_final_d)-1,1);
							shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
					   endfor;
					   
					   p3_dd = p3_dd + ( (1/w1) * ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
					   						
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
					   clear omncd,var_gu_d,var_final_d,shi_r_unq;
				   endfor;
			   else;
				       mean_gu    = -Mean_changed;
					   var_gu     = Error_changed;
					   
					   mean_gu_d   = -Mean_changed_d;
					   var_gu_d     = Error_changed_d;
					   
					   om     = (diag(var_gu));
					   omncd  = (diag(var_gu_d));
					   mean_gu_final  =   mean_gu./sqrt(om);
					   
					   var_gu_final      = corrvc(var_gu);
					   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
					   
					   mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
					   
					   
					   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
					   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
					   seed20 = seednext;
					   
					   if((nc-1) eq 2);
						  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
						  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
						  g1 = g1'; 
						  
						  p3_dd =  ( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
				       else;
					  
						   {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
						   seednext = ss;
						  
							shi_r_unq = {};
						    for ishi(1,rows(var_gu_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
						    endfor;
					   
					   
					        p3_dd = p3_dd + ( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
					   					   
					   endif;
					   
					   					   
					   
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_gu_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
					   clear omncd,var_gu_d,var_gu_final_d,shi_r_unq;
				   
			   endif;
			   
			   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 alpha_corr_gradient = alpha_corr_gradient ~ gg_temp;   

         clear d_chol_alpha_corr,Alpha_corrdd,Alpha_corrd,d_chol_alpha_corr1;
	 endif;
	 endfor;


//------------------------------------------------------------------------------DELTA COEFFICEINT----------------------------------------------------------------
delta_coeff_gradient = {};
for idelta(1,nvar_mear,1);
	
	if(_max_active[nvarml+nCholOmega+idelta] eq 0);
		
		delta_coeff_gradient = delta_coeff_gradient ~ zeros(nobs,1);
		
	else;
		
		delta_coeff_d = zeros(nvar_mear,1);  delta_coeff_d[idelta] = 1; 
        yd = {}; j = 1;
			
		do until j > nobs;
		  yd = yd| (delta_coeff_d' )  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
		  j = j+1;
		endo;

	    Utilityd = zeros(nobs,nc);

        seednext = seed10;
        gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d ) - ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);
					   p2_dd = 0; pair_G = 0;
					   for g1(1,nvar_mear_ordl-1,1);
						   for g2(g1+1,nvar_mear_ordl,1);
							   
							   pair_G = pair_G + 1;
							   
							   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
							   
							   rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
					   
							   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
							   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
							   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
							   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
							   
							   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
										   
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   endfor;
					   endfor;
				   else;
				       p2_dd = 0;
				   endif;
				   
				   if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			    if(nvar_mear_ordl > 0);
			       p3_dd = 0;	
				   for g3(1,nvar_mear_ordl,1);
					   S = zeros(nc,nvar_mear_ordl+nc-1);
					   S[1,g3] = 1;
					   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
					   
					   rho_low_g3 = S*lower_threshold_append;
					   rho_up_g3  = S*upper_threshold_append;
					   
					   mean_gu    = S*Mean_changed;
					   var_gu     = S*Error_changed*S';
					   
					   mean_gu_d    = S*Mean_changed_d;
					   
					   om  = sqrt(diag(var_gu));
					   mean_low_final = (rho_low_g3 - mean_gu)./om;
					   mean_up_final  = (rho_up_g3 - mean_gu)./om;
					   var_final      = corrvc(var_gu);
					   var_final      = diagrv(var_final,ones(nc,1));
					   
					   mean_low_final_d = (- mean_gu_d)./om;
					   mean_up_final_d  = (- mean_gu_d)./om;
					   
					   seed20 = seednext;
					   
					   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
					   seednext = ss;
						   					   
					   
					   p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d)  )  ;
					   				  
							  
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   endfor;
			   else;
				       mean_gu    = -Mean_changed;
					   var_gu     = Error_changed;
					   
					   mean_gu_d   = -Mean_changed_d;
					   					   
					   om  = sqrt(diag(var_gu));
					   mean_gu_final = ( mean_gu)./om;
					  
					   var_gu_final      = corrvc(var_gu);
					   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
					   
					   mean_gu_final_d = ( mean_gu_d)./om;
					   					   
					   seed20 = seednext;
					   
					   
					   if((nc-1) eq 2);
						  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
						  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
						  g1 = g1'; 
					  else;
						  
						  {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
						seednext = ss;
						   
					  endif;
					   
					   	p3_dd =  ( (1/w1) *  (g1[1,1:nc-1] * mean_gu_final_d)  )  ;
					   						  
							  
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   
			   endif;
			   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 delta_coeff_gradient = delta_coeff_gradient ~ gg_temp;   

         clear yd,Utilityd,delta_coeff_d;
	 endif;
	 endfor;

//---------------------------------------------------------------------------D_MATRIX-----------------------------------------------------------------------------
d_matrix_gradient = {};
for idmat(1,nvar_latent*nvar_mear,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+idmat] eq 0);
		
		d_matrix_gradient = d_matrix_gradient ~ zeros(nobs,1);
		
	else;
         
		d_matrix_coeff_d = zeros(nvar_latent*nvar_mear,1);  d_matrix_coeff_d[idmat] = 1; 
		D_matrix_d   = reshape(d_matrix_coeff_d,nvar_mear,nvar_latent);
        yd = {}; j = 1;
			
		do until j > nobs;
		  yd = yd| (D_matrix_d * z1[j,.]' )'  ;             // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
		  j = j+1;
		endo;

	    Utilityd = zeros(nobs,nc);
		
		seednext = seed10;
         gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix_d * Alpha_corr * D_matrix' + D_matrix * Alpha_corr * D_matrix_d' + Psi_matrix_d );
				   e12_d  = e12_d ~ ( D_matrix_d * Alpha_corr * Lambda_mat');
				   e21_d  = e21_d ~ ( Lambda_mat * Alpha_corr * D_matrix_d'); 
				   e22_d  = e22_d ~ ( Lambda_mat * Alpha_corr_d * Lambda_mat' + Lamda_d);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];     
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';    
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];     
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];      
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];     
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_dm = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_dr = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   			   
				   
				   p1_dd = (1/p1)*(p1_dm' * (Diff_Mean_d-Diff_Mean_mu_d) + p1_dr' * vech(Error_Y_d));
				   
				   				   			   
				   if(nvar_mear_ordl > 1);
					   p2_dd = 0; pair_G = 0;
					   for g1(1,nvar_mear_ordl-1,1);
						   for g2(g1+1,nvar_mear_ordl,1);
							   
							   pair_G = pair_G + 1;
							   
							   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
							   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
							   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
							   
							   om_low_g1   =   Error_changed[g1,g1];
							   om_low_g2   =   Error_changed[g2,g2];
							   om_up_g1    =   Error_changed[g1,g1];
							   om_up_g2    =   Error_changed[g2,g2];
							   
							   omncd_low_g1   =   Error_changed_d[g1,g1];
							   omncd_low_g2   =   Error_changed_d[g2,g2];
							   omncd_up_g1    =   Error_changed_d[g1,g1];
							   omncd_up_g2    =   Error_changed_d[g2,g2];
							   
							   rho_low_g1md  =  - Mean_changed_d[g1] ;
							   rho_low_g2md  =  - Mean_changed_d[g2] ;
							   rho_up_g1md   =  - Mean_changed_d[g1] ;
							   rho_up_g2md   =  - Mean_changed_d[g2] ;
							   
							   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
							   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
							   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
							   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
							   
							   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
							   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
							   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
							   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
							   
							   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
					   
										   
							   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
							   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
							   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
							   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
							   
							   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
							   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
							   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
							   
							   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
								
							   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
							   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
						   endfor;
					   endfor;
				   else;
					   p2_dd = 0;
				   endif;
				   
				   
				   if(nvar_mear_ordl > 0);				   
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
				
			       endif;
			
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   var_gu_d     = S*Error_changed_d*S';
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
						   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_final_d      = diagrv(var_final_d ,ones(nc,1));
						   seed20 = seednext;
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						    seednext = ss;
							   
						  
						   shi_r_unq = {};
						   for ishi(1,rows(var_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
						   endfor;
						   
						  
						   p3_dd = p3_dd + ( (1/w1) *  ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
						   							
						   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endfor;
				   else;
					       mean_gu    = -Mean_changed;
						   var_gu     = Error_changed;
						   
						   mean_gu_d   = -Mean_changed_d;
						   var_gu_d     = Error_changed_d;
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_gu_final = (mean_gu)./sqrt(om);
						  
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   
						   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1'; 
							  p3_dd = ( (1/w1) *  ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
						  else;
							  
						     {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							 seednext = ss;
							   
							   
													  
							   shi_r_unq = {};
							   for ishi(1,rows(var_gu_final_d)-1,1);
									shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							   endfor;
							   
							   p3_dd = ( (1/w1) *  ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
					     endif;
					   
					   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endif;
					   
					   
	               				   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 d_matrix_gradient = d_matrix_gradient ~ gg_temp;   

         clear d_matrix_coeff_d,D_matrix_d,yd,Utilityd;
	 endif;
	  endfor;

//-------------------------------------------------------------------------------PSI GRADIENT--------------------------------------------------------------
Psi_gradient = {};
for ipsi(1,nCholOmega1,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+ipsi] eq 0);
		
		Psi_gradient = Psi_gradient ~ zeros(nobs,1);
		
	else;
		
		   d_chol_psi = zeros(nCholOmega1,1);    d_chol_psi[ipsi]=1;                         Psidd = upmat(xpnd(d_chol_psi));
		   Psid       = Psidd'*Psi_chol + Psi_chol'*Psidd;
            
		   yd = zeros(nobs,nvar_mear);
		   Utilityd = zeros(nobs,nc); 

			seednext = seed10;
            gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]'; 
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix * Alpha_corr_d * D_matrix' + Psid );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_corr_d * Lambda_mat');
				   e21_d  = e21_d ~ ( Lambda_mat * Alpha_corr_d * D_matrix'); 
				   e22_d  = e22_d ~ ( Lambda_mat * Alpha_corr_d * Lambda_mat' + Lamda_d);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];      
				   Diff_Mean     = (dta[i,ivgenyc])';     
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont]; 
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   
				   p1_dd = (1/p1)*(p1_d' * vech(Error_Y_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   om_low_g1   =   Error_changed[g1,g1];
						   om_low_g2   =   Error_changed[g2,g2];
						   om_up_g1    =   Error_changed[g1,g1];
						   om_up_g2    =   Error_changed[g2,g2];
						   
						   omncd_low_g1   =   Error_changed_d[g1,g1];
						   omncd_low_g2   =   Error_changed_d[g2,g2];
						   omncd_up_g1    =   Error_changed_d[g1,g1];
						   omncd_up_g2    =   Error_changed_d[g2,g2];
						   
						   rho_low_g1md  =  - Mean_changed_d[g1] ;
						   rho_low_g2md  =  - Mean_changed_d[g2] ;
						   rho_up_g1md   =  - Mean_changed_d[g1] ;
						   rho_up_g2md   =  - Mean_changed_d[g2] ;
						   
						   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   
						   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
						   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
						   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
						   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
						   
						   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;
			   
			       if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   var_gu_d     = S*Error_changed_d*S';
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
						   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_final_d      = diagrv(var_final_d ,ones(nc,1));
						   seed20 = seednext;
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						   seednext = ss;
							   
						   
						   shi_r_unq = {};
						   for ishi(1,rows(var_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
						   endfor;
						   
						   p3_dd = p3_dd + ( (1/w1) *  ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
						   						
							
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endfor;
				   else;
					       mean_gu    = -Mean_changed;
						   var_gu     = Error_changed;
						   
						   mean_gu_d   = -Mean_changed_d;
						   var_gu_d     = Error_changed_d;
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_gu_final = (mean_gu)./sqrt(om);
						   
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - (mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   
						   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1'; 
							  p3_dd =  ( (1/w1) *  ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
						  else;
							  
							  {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							   seednext = ss;
							   					   
						   						   
							   shi_r_unq = {};
							   for ishi(1,rows(var_gu_final_d)-1,1);
									shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							   endfor;
							   
							   
							   p3_dd =  ( (1/w1) *  ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
						  endif;
						   
						   
							
							
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endif;
					   
					   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 Psi_gradient = Psi_gradient ~ gg_temp;   

         clear d_chol_psi,Psidd,Psid;
	 endif;
	  endfor;

//--------------------------------------------------------------------BETA----------------------------------------------------------------------
beta_gradient = {};
for ibeta(1,nvar_ut+2,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+ibeta] eq 0);
		
		beta_gradient = beta_gradient ~ zeros(nobs,1);
		
	else;
		
		betad = zeros(nvar_ut+2,1);  betad[ibeta] = 1;
		
		Xbetad = (ones(nc,1) .*. betad )*~(dta[.,ivgenva])';
        v1d = {}; j = 1;
   
		do until j > nc;
		    v1d = v1d~(sumc(Xbetad[(j-1)*nvarma+1:(j*nvarma),.]));
			j = j+1;
		endo;
		
		yd = zeros(nobs,nvar_mear);
		Utilityd = v1d;
		
		seednext = seed10;
            gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   rho_low_g1d =  (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2d =  (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1d =   (- Mean_changed_d[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2d =   (- Mean_changed_d[g2] ) / sqrt(Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
					   endfor;
				   endfor;
			   else;
				  p2_dd = 0; 
			  endif;
			  
                   if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   
						   om  = sqrt(diag(var_gu));
						   mean_low_final = (rho_low_g3 - mean_gu)./om;
						   mean_up_final  = (rho_up_g3 - mean_gu)./om;
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (- mean_gu_d)./om;
						   mean_up_final_d  = (- mean_gu_d)./om;
						   
						   seed20 = seednext;
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						   seednext = ss;
							   						   
						   
						   p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d) )  ;
						   				   
						   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
					   endfor;
				   else;
					       
							 mean_gu    = -Mean_changed;
						     var_gu     = Error_changed;
						   
						    mean_gu_d   = -Mean_changed_d;
						  					   
						   om  = sqrt(diag(var_gu));
						   mean_gu_final = (mean_gu)./om;
						  
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = (mean_gu_d)./om;
						   
						   
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1';
						   else;
							  
							   {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							   seednext = ss;
								   
						   endif;
							   
						   
						   p3_dd = ( (1/w1) *  (g1[1,1:nc-1] * mean_gu_final_d) )  ;
						   
						   
						   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   endif;
					   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 beta_gradient = beta_gradient ~ gg_temp;   

         clear Xbetad,betad,yd,v1d,Utilityd;
	 endif;
	 endfor;
 
 //------------------------------------------------------------------------------------------LAMBDA--------------------------------------------
 lambda_gradient = {};
 for ilambda(1,nc*nvar_latent,1);
	
     if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+nvar_ut+2+ilambda] eq 0);
		
	    lambda_gradient = lambda_gradient ~ zeros(nobs,1);

     else;
	
	      d_lambda = zeros(rows(Lambda),1);   d_lambda[ilambda] = 1;
		  Lambda_mat_d = reshape(d_lambda,nc,nvar_latent);
		  
		  LambdaZd = {}; j = 1;
   
		  do until j > nobs;
			  LambdaZd = LambdaZd|(Lambda_mat_d * z1[j,.]' )';              // Y stores the Y variables value for each observation. nobs X nvar_mear. 1st col has Y1, 2nd Y2 and so on for all observations.
			  j = j+1;
		  endo;
		  
		  yd = zeros(nobs,nvar_mear);
		  Utilityd = LambdaZd;
		  
		  seednext = seed10;
          gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix * Alpha_corr_d * D_matrix' + Psi_matrix_d );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_corr * Lambda_mat_d');
				   e21_d  = e21_d ~ ( Lambda_mat_d * Alpha_corr * D_matrix'); 
				   e22_d  = e22_d ~ ( Lambda_mat_d * Alpha_corr * Lambda_mat' + Lambda_mat * Alpha_corr * Lambda_mat_d' + Lamda_d);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';      
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_dm = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_dr = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   
				   
				   p1_dd = (1/p1)*(p1_dm' * (Diff_Mean_d-Diff_Mean_mu_d) + p1_dr' * vech(Error_Y_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   om_low_g1   =   Error_changed[g1,g1];
						   om_low_g2   =   Error_changed[g2,g2];
						   om_up_g1    =   Error_changed[g1,g1];
						   om_up_g2    =   Error_changed[g2,g2];
						   
						   omncd_low_g1   =   Error_changed_d[g1,g1];
						   omncd_low_g2   =   Error_changed_d[g2,g2];
						   omncd_up_g1    =   Error_changed_d[g1,g1];
						   omncd_up_g2    =   Error_changed_d[g2,g2];
						   
						   rho_low_g1md  =  - Mean_changed_d[g1] ;
						   rho_low_g2md  =  - Mean_changed_d[g2] ;
						   rho_up_g1md   =  - Mean_changed_d[g1] ;
						   rho_up_g2md   =  - Mean_changed_d[g2] ;
						   
						   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   
						   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
						   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
						   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
						   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
						   
						   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;
			   
			       if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   var_gu_d     = S*Error_changed_d*S';
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
						   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_final_d      = diagrv(var_final_d ,ones(nc,1));
						   seed20 = seednext;
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
							seednext = ss;
							   						   
						   shi_r_unq = {};
						   for ishi(1,rows(var_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
						   endfor;
						   
						   p3_dd = p3_dd + ( (1/w1) * ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
						   					
							
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endfor;
				   else;
					       mean_gu    = -Mean_changed;
						   var_gu     = Error_changed;
						   
						   mean_gu_d   = -Mean_changed_d;
						   var_gu_d     = Error_changed_d;
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_gu_final = ( mean_gu)./sqrt(om);
						   
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = (  sqrt(om') .* mean_gu_d' - ( mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						  						   
						   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1' ;
							  p3_dd = ( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
						  else;
							  
						      {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							   seednext = ss;
							   						   
							   
							   shi_r_unq = {};
							   for ishi(1,rows(var_gu_final_d)-1,1);
									shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							   endfor;
							   
							   
							   p3_dd = ( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
						   endif;
						   
						   
							
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endif;
					   
					   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 lambda_gradient = lambda_gradient ~ gg_temp;   

         clear d_lambda,LambdaZd,Lambda_mat_d,yd,Utilityd;
	 endif;
	  endfor;
 //-----------------------------------------------------------------------------LAMDA-----------------------------------------------------------------------------------
 lamda_gradient = {};
 for ilamda(1,nCholErr,1);
	 
	 if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+nvar_ut+2+nc*nvar_latent+ilamda] eq 0);
		 
		 lamda_gradient = lamda_gradient ~ zeros(nobs,1);
		 
	 else;
		
	      d_chol_lamda = zeros(nCholErr,1);    d_chol_lamda[ilamda]=1;                         lamdadd = upmat(xpnd(d_chol_lamda));
		  lamdad1 = lamdadd'*Chol_Lamda_mat + Chol_Lamda_mat'*lamdadd;
          Lamdad      = zeros(nc,nc);                Lamdad[2:nc,2:nc] = lamdad1; 
			
		  yd = zeros(nobs,nvar_mear);
		  Utilityd = zeros(nobs,nc); 
		  
		  seednext = seed10;
          gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   Full_error_d = {}; e1_d = {}; e12_d = {}; e21_d = {}; e22_d = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]'; 
				   
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   e1_d   = e1_d ~  ( D_matrix * Alpha_corr_d * D_matrix' + Psi_matrix_d );
				   e12_d  = e12_d ~ ( D_matrix * Alpha_corr_d * Lambda_mat');
				   e21_d  = e21_d ~ ( Lambda_mat * Alpha_corr_d * D_matrix'); 
				   e22_d  = e22_d ~ ( Lambda_mat * Alpha_corr_d * Lambda_mat' + Lamdad);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   Full_error_d = Full_error_d | (e1_d~e12_d);
				   Full_error_d = Full_error_d | (e21_d~e22_d);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  
				   Error_Tild = M * Full_error * M';
				   
				   B_Tild_d = M * U_Yd;
				   Error_Tild_d = M * Full_error_d * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                               
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';     
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d       = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Error_YU_Tild_d = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild_d  = Error_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y_d       = Error_Tild_d[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];     
				   
				   Mean_changed    =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed   = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d  =  BU_Tild_d + ( Error_YU_Tild_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) )  - ( Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) ) + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d  )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   Error_changed_d = Error_U_Tild_d - ( Error_YU_Tild_d * inv(Error_Y) *  Error_YU_Tild') + (Error_YU_Tild * inv(Error_Y) * Error_Y_d * inv(Error_Y) *  Error_YU_Tild') - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild_d');
				   
				   p1 = pdfmvn1(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgcov(Diff_Mean,Diff_Mean_mu,vech(Error_Y));
				   
				   p1_dd = (1/p1)*(p1_d' * vech(Error_Y_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2    =   Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   om_low_g1   =   Error_changed[g1,g1];
						   om_low_g2   =   Error_changed[g2,g2];
						   om_up_g1    =   Error_changed[g1,g1];
						   om_up_g2    =   Error_changed[g2,g2];
						   
						   omncd_low_g1   =   Error_changed_d[g1,g1];
						   omncd_low_g2   =   Error_changed_d[g2,g2];
						   omncd_up_g1    =   Error_changed_d[g1,g1];
						   omncd_up_g2    =   Error_changed_d[g2,g2];
						   
						   rho_low_g1md  =  - Mean_changed_d[g1] ;
						   rho_low_g2md  =  - Mean_changed_d[g2] ;
						   rho_up_g1md   =  - Mean_changed_d[g1] ;
						   rho_up_g2md   =  - Mean_changed_d[g2] ;
						   
						   rho_low_g1m  =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_low_g2m  =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   rho_up_g1m   =  (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) ;
						   rho_up_g2m   =  (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) ;
						   
						   rho_low_g1d =  ( sqrt(om_low_g1)*  rho_low_g1md -  rho_low_g1m * omncd_low_g1 ./ sqrt(om_low_g1) ./2   ) ./ (om_low_g1);
						   rho_low_g2d =  ( sqrt(om_low_g2)*  rho_low_g2md -  rho_low_g2m * omncd_low_g2 ./ sqrt(om_low_g2) ./2   ) ./ (om_low_g2);
						   rho_up_g1d =   ( sqrt(om_up_g1)*   rho_up_g1md -   rho_up_g1m *  omncd_up_g1 ./ sqrt(om_up_g1)   ./2   ) ./ (om_up_g1);
						   rho_up_g2d =   ( sqrt(om_up_g2)*   rho_up_g2md -   rho_up_g2m *  omncd_up_g2 ./ sqrt(om_up_g2)   ./2   ) ./ (om_up_g2);
						   
						   var_g1g2_d    =   ( ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) ) * Error_changed_d[g1,g2] + (Error_changed[g1,g2]/2) * ( ( sqrt(Error_changed[g1,g1])/sqrt(Error_changed[g2,g2]) )*Error_changed_d[g2,g2] + ( sqrt(Error_changed[g2,g2])/sqrt(Error_changed[g1,g1]) )*Error_changed_d[g1,g1] ) ) / ( Error_changed[g1,g1] * Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | var_g1g2_d;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | var_g1g2_d;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | var_g1g2_d; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
						   clear om_low_g1,om_low_g2,om_up_g1,om_up_g2,omncd_low_g1,omncd_low_g2,omncd_up_g1,omncd_up_g2,rho_low_g1md,rho_low_g2md,rho_up_g1md,rho_up_g2md,rho_low_g1m,rho_low_g2m,rho_up_g1m,rho_up_g2m,var_g1g2_d ;
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;
			   
			       if(nvar_mear_ordl > 0);
				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
				   endfor;
			       endif;
			   
			       if(nvar_mear_ordl > 0);
					   p3_dd = 0;	
					   for g3(1,nvar_mear_ordl,1);
						   S = zeros(nc,nvar_mear_ordl+nc-1);
						   S[1,g3] = 1;
						   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
						   
						   rho_low_g3 = S*lower_threshold_append;
						   rho_up_g3  = S*upper_threshold_append;
						   
						   mean_gu    = S*Mean_changed;
						   var_gu     = S*Error_changed*S';
						   
						   mean_gu_d    = S*Mean_changed_d;
						   var_gu_d     = S*Error_changed_d*S';
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_low_final = (rho_low_g3 - mean_gu)./sqrt(om);
						   mean_up_final  = (rho_up_g3 - mean_gu)./sqrt(om);
						   var_final      = corrvc(var_gu);
						   var_final      = diagrv(var_final,ones(nc,1));
						   
						   mean_low_final_d = (  - sqrt(om') .* mean_gu_d' - (rho_low_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   mean_up_final_d  = (  - sqrt(om') .* mean_gu_d' - (rho_up_g3 - mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   var_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_final_d      = diagrv(var_final_d ,ones(nc,1));
						   seed20 = seednext;
						   
						   
						   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
						    seednext = ss;
							   
						   shi_r_unq = {};
						   for ishi(1,rows(var_final_d)-1,1);
								shi_r_unq = shi_r_unq ~ var_final_d[ishi,ishi+1:cols(var_final_d )];
						   endfor;
						   
						  
						   p3_dd = p3_dd + ( (1/w1) * ( g1[1,1:nc] * mean_up_final_d' + g1[1,nc+1:cols(g1)] * shi_r_unq' )  )  ;
						   
						   
						   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endfor;
				   else;
					       mean_gu    = -Mean_changed;
						   var_gu     = Error_changed;
						   
						   mean_gu_d   = -Mean_changed_d;
						   var_gu_d     = Error_changed_d;
						   
						   om  = (diag(var_gu));
						   omncd  = (diag(var_gu_d));
						   mean_gu_final = ( mean_gu)./sqrt(om);
						   
						   var_gu_final      = corrvc(var_gu);
						   var_gu_final      = diagrv(var_gu_final,ones(nc-1,1));
						   
						   mean_gu_final_d = ( sqrt(om') .* mean_gu_d' - (mean_gu)' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
						   
						   
						   var_gu_final_d      = ( (var_gu_d./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (var_gu ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((var_gu ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
						   var_gu_final_d      = diagrv(var_gu_final_d ,ones(nc-1,1));
						   seed20 = seednext;
						   
						   if((nc-1) eq 2);
							  w1 = cdfbvn(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]);
							  g1 = cdfbvn_grad(mean_gu_final[1,1],mean_gu_final[2,1],var_gu_final[1,2]); 
							  g1 = g1' ;
							  p3_dd =( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * var_gu_final_d[1,2] )  )  ;
						  else;
							  
						      {w1,g1,ss} = pdfmvna(mean_gu_final',var_gu_final,seed20);
							   seednext = ss;
														   
													   
							   shi_r_unq = {};
							   for ishi(1,rows(var_gu_final_d)-1,1);
									shi_r_unq = shi_r_unq ~ var_gu_final_d[ishi,ishi+1:cols(var_gu_final_d )];
							   endfor;
							   
							   
							   p3_dd =( (1/w1) * ( g1[1,1:nc-1] * mean_gu_final_d' + g1[1,nc:cols(g1)] * shi_r_unq' )  )  ;
						   endif;
						   
						   
						   					   
						   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
						   clear omncd,var_gu_d,var_final_d,shi_r_unq;
					   endif;
					   
					   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
				   clear Full_error_d,e1_d,e12_d,e21_d,e22_d,Error_YU_Tild_d,Error_U_Tild_d,Error_Y_d,Error_changed_d,Error_Tild_d;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 lamda_gradient = lamda_gradient ~ gg_temp;   

         clear d_chol_lamda,lamdadd,lamdad1,Lamdad;
	 endif;
	  endfor;
//----------------------------------------------------------------------------LOWER THRESHOLD--------------------------------------------------------------

if(nvar_mear_ordl > 0);
lower_threshold_gradient = {};
for ilower_th(1,nvar_mear_ordl,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+nvar_ut+2+nc*nvar_latent+nCholErr+ilower_th] eq 0);
		
		lower_threshold_gradient = lower_threshold_gradient ~ zeros(nobs,1);
		
	else;
		
		  yd = zeros(nobs,nvar_mear);
		  Utilityd = zeros(nobs,nc); 
		  lower_threshold_d = zeros(nvar_mear_ordl,1);   upper_threshold_d = zeros(nvar_mear_ordl,1);
		  lower_threshold_d[ilower_th] = 1;
		  
		  lower_threshold_matrix_d = zeros(nobs,nvar_mear_ordl);
	      upper_threshold_matrix_d = zeros(nobs,nvar_mear_ordl);
	
			for i(1,nobs,1);
				for j(1,nvar_mear_ordl,1);
					if(dta[i,ivgenyo[j]] == 1);
					  lower_threshold_matrix_d[i,j] = negative_infinity_d;
					  upper_threshold_matrix_d[i,j] = lower_threshold_d[j];
					elseif(dta[i,ivgenyo[j]] == 2) ;
					   lower_threshold_matrix_d[i,j] = lower_threshold_d[j];
					   upper_threshold_matrix_d[i,j] = upper_threshold_d[j];
					elseif(dta[i,ivgenyo[j]] == 3);
					   lower_threshold_matrix_d[i,j] = upper_threshold_d[j];
					   upper_threshold_matrix_d[i,j] = positive_infinity_d;
				   endif;
				   
			   endfor;
		   endfor;
   
   
		  seednext = seed10;
          gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                              
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];     
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];       
				   Diff_Mean     = (dta[i,ivgenyc])';     
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d        = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];      
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   rho_low_g1d =  (lower_threshold_matrix_d[i,g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2d =  (lower_threshold_matrix_d[i,g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1d =   (upper_threshold_matrix_d[i,g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2d =   (upper_threshold_matrix_d[i,g2] ) / sqrt(Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;
			   

				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   
				   lower_threshold_append_d = {}; upper_threshold_append_d = {}; 
				   lower_threshold_append_d = lower_threshold_append_d | lower_threshold_matrix_d[i,.]';
				   upper_threshold_append_d = upper_threshold_append_d | upper_threshold_matrix_d[i,.]';
				   
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
						
						lower_threshold_append_d = lower_threshold_append_d |  0;
						upper_threshold_append_d = upper_threshold_append_d |  0;
				   endfor;
				
				   p3_dd = 0;	
				   for g3(1,nvar_mear_ordl,1);
					   S = zeros(nc,nvar_mear_ordl+nc-1);
					   S[1,g3] = 1;
					   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
					   
					   rho_low_g3 = S*lower_threshold_append;
					   rho_up_g3  = S*upper_threshold_append;
					   
					   rho_low_g3d = S*lower_threshold_append_d;
					   rho_up_g3d  = S*upper_threshold_append_d;
					   
					   mean_gu    = S*Mean_changed;
					   var_gu     = S*Error_changed*S';
					   
					   mean_gu_d    = S*Mean_changed_d;
					   
					   om  = sqrt(diag(var_gu));
					   mean_low_final = (rho_low_g3 - mean_gu)./om;
					   mean_up_final  = (rho_up_g3 - mean_gu)./om;
					   var_final      = corrvc(var_gu);
					   var_final      = diagrv(var_final,ones(nc,1));
					   
					   mean_low_final_d = (rho_low_g3d)./om;
					   mean_up_final_d  = (rho_up_g3d)./om;
					   
					   seed20 = seednext;
					   
					   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
					   seednext = ss;
						   
					   
					   p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d)  )  ;
					   					
						
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   endfor;
				   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 lower_threshold_gradient = lower_threshold_gradient ~ gg_temp;   

         clear yd,Utilityd,lower_threshold_matrix_d,upper_threshold_matrix_d;
	 endif;
	  endfor;
 
 //------------------------------------------------------------------------------UPPER THRESHOLD---------------------------------------------------------------------
 upper_threshold_gradient = {};
for iupper_th(1,nvar_mear_ordl,1);
	
	if(_max_active[nvarml+nCholOmega+nvar_mear+nvar_latent*nvar_mear+nCholOmega1+nvar_ut+2+nc*nvar_latent+nCholErr+nvar_mear_ordl+iupper_th] eq 0);
		
		upper_threshold_gradient = upper_threshold_gradient ~ zeros(nobs,1);
		
	else;
		
		  yd = zeros(nobs,nvar_mear);
		  Utilityd = zeros(nobs,nc); 
		  lower_threshold_d = zeros(nvar_mear_ordl,1);   upper_threshold_d = zeros(nvar_mear_ordl,1);
		  upper_threshold_d[iupper_th] = 1;
		  
		  lower_threshold_matrix_d = zeros(nobs,nvar_mear_ordl);
	      upper_threshold_matrix_d = zeros(nobs,nvar_mear_ordl);
	
			for i(1,nobs,1);
				for j(1,nvar_mear_ordl,1);
					if(dta[i,ivgenyo[j]] == 1);
					  lower_threshold_matrix_d[i,j] = negative_infinity_d;
					  upper_threshold_matrix_d[i,j] = lower_threshold_d[j];
					elseif(dta[i,ivgenyo[j]] == 2) ;
					   lower_threshold_matrix_d[i,j] = lower_threshold_d[j];
					   upper_threshold_matrix_d[i,j] = upper_threshold_d[j];
					elseif(dta[i,ivgenyo[j]] == 3);
					   lower_threshold_matrix_d[i,j] = upper_threshold_d[j];
					   upper_threshold_matrix_d[i,j] = positive_infinity_d;
				   endif;
				   
			   endfor;
		   endfor;
		   
		  seednext = seed10;
          gg_temp = {};
   
			   for i(1,nobs,1);
				   U_Y = {}; U_Yd = {}; gg = 0;
				   Full_error = {}; e1 = {}; e12 = {}; e21 = {}; e22 = {}; 
				   
				   U_Y   = U_Y | y1[i,.]'| Utility1[i,.]';  
				   U_Yd   = U_Yd | yd[i,.]'| Utilityd[i,.]';
				   e1   = e1 ~  ( D_matrix * Alpha_corr * D_matrix' + Psi_matrix );
				   e12  = e12 ~ ( D_matrix * Alpha_corr * Lambda_mat');
				   e21  = e21 ~ ( Lambda_mat * Alpha_corr * D_matrix'); 
				   e22  = e22 ~ ( Lambda_mat * Alpha_corr * Lambda_mat' + Lamda);
				   
				   Full_error = Full_error | (e1~e12);
				   Full_error = Full_error | (e21~e22);
				   
				   M = zeros(nvar_mear+nc-1,nvar_mear+nc);
				   M[1:nvar_mear,1:nvar_mear] = eye(nvar_mear);
				   Alt_chosen = dta[i,altchm];
				   
				   if(Alt_chosen eq 1);
					temp = one_negative ~ iden_matrix;
				   elseif(Alt_chosen eq nc);
					temp = iden_matrix ~ one_negative;
				   else;
					ch = Alt_chosen;
					temp = iden_matrix[.,1:ch-1] ~ one_negative ~ iden_matrix[.,ch:nc-1];
				   endif;
				   
				   M[nvar_mear+1:nvar_mear+nc-1,nvar_mear+1:nvar_mear+nc] = temp;
				   clear temp;
				   
				   B_Tild = M * U_Y;  B_Tild_d = M * U_Yd;
				   Error_Tild = M * Full_error * M';
				   
				   BU_Tild       = B_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];                              
				   Error_YU_Tild = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,1:nvar_mear_cont];      
				   Error_U_Tild  = Error_Tild[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1,nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1];  
				   Error_Y       = Error_Tild[1:nvar_mear_cont,1:nvar_mear_cont];      
				   Diff_Mean     = (dta[i,ivgenyc])';     
				   Diff_Mean_mu  = B_Tild[1:nvar_mear_cont];
				   
				   BU_Tild_d     = B_Tild_d[nvar_mear_cont+1:nvar_mear_cont+nvar_mear_ordl+nc-1]; 
				   Diff_Mean_d      = zeros(nvar_mear_cont,1);
				   Diff_Mean_mu_d   = B_Tild_d[1:nvar_mear_cont];     
				   
				   Mean_changed =  BU_Tild + ( Error_YU_Tild * inv(Error_Y) * (Diff_Mean-Diff_Mean_mu) );
				   Error_changed = Error_U_Tild - ( Error_YU_Tild * inv(Error_Y) *  Error_YU_Tild');
				   
				   Mean_changed_d =  BU_Tild_d + ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_d )- ( Error_YU_Tild * inv(Error_Y) * Diff_Mean_mu_d );
				   
				   p1 = pdfmvn(Diff_Mean,Diff_Mean_mu,Error_Y);
				   p1_d = pdfgmean(Diff_Mean,Diff_Mean_mu,Error_Y);
				   
				   p1_dd = (1/p1)*(p1_d' * (Diff_Mean_d-Diff_Mean_mu_d));
				   
				   if(nvar_mear_ordl > 1);
				   p2_dd = 0; pair_G = 0;
				   for g1(1,nvar_mear_ordl-1,1);
					   for g2(g1+1,nvar_mear_ordl,1);
						   
						   pair_G = pair_G + 1;
						   
						   rho_low_g1 =  (lower_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2 =  (lower_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1 =   (upper_threshold_matrix[i,g1] - Mean_changed[g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2 =   (upper_threshold_matrix[i,g2] - Mean_changed[g2] ) / sqrt(Error_changed[g2,g2]);
						   var_g1g2   =  Error_changed[g1,g2] / ( sqrt(Error_changed[g1,g1]) * sqrt(Error_changed[g2,g2]) );
						   
						   rho_low_g1d =  (lower_threshold_matrix_d[i,g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_low_g2d =  (lower_threshold_matrix_d[i,g2] ) / sqrt(Error_changed[g2,g2]);
						   rho_up_g1d =   (upper_threshold_matrix_d[i,g1] ) / sqrt(Error_changed[g1,g1]);
						   rho_up_g2d =   (upper_threshold_matrix_d[i,g2] ) / sqrt(Error_changed[g2,g2]);
				   
						   p2_temp = cdfbvn(rho_up_g1,rho_up_g2,var_g1g2) - cdfbvn(rho_up_g1,rho_low_g2,var_g1g2) - cdfbvn(rho_low_g1,rho_up_g2,var_g1g2) + cdfbvn(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp1 = cdfbvn_grad(rho_up_g1,rho_up_g2,var_g1g2);
						   p2_temp2 = cdfbvn_grad(rho_up_g1,rho_low_g2,var_g1g2);
						   p2_temp3 = cdfbvn_grad(rho_low_g1,rho_up_g2,var_g1g2);
						   p2_temp4 = cdfbvn_grad(rho_low_g1,rho_low_g2,var_g1g2);
						   
						   p2_temp11 = rho_up_g1d | rho_up_g2d | 0;
						   p2_temp22 = rho_up_g1d | rho_low_g2d | 0;
						   p2_temp33 = rho_low_g1d | rho_up_g2d | 0;
						   p2_temp44 = rho_low_g1d | rho_low_g2d | 0; 
						   
						   p2_dd = p2_dd + ( (1/p2_temp)*( sumc(p2_temp1 .* p2_temp11) - sumc(p2_temp2 .* p2_temp22) - sumc(p2_temp3 .* p2_temp33) + sumc(p2_temp4 .* p2_temp44) ) );
						   			   
						   clear rho_low_g1,rho_low_g2,rho_up_g1,rho_up_g2,var_g1g2,p2_temp,rho_low_g1d,rho_low_g2d,rho_up_g1d,rho_up_g2d,p2_temp1,p2_temp2,p2_temp3,p2_temp4,p2_temp11,p2_temp22,p2_temp33,p2_temp44; 
					   endfor;
				   endfor;
			   else;
				   p2_dd = 0;
			   endif;

				   lower_threshold_append = {}; upper_threshold_append = {}; 
				   lower_threshold_append = lower_threshold_append | lower_threshold_matrix[i,.]';
				   upper_threshold_append = upper_threshold_append | upper_threshold_matrix[i,.]';
				   
				   lower_threshold_append_d = {}; upper_threshold_append_d = {}; 
				   lower_threshold_append_d = lower_threshold_append_d | lower_threshold_matrix_d[i,.]';
				   upper_threshold_append_d = upper_threshold_append_d | upper_threshold_matrix_d[i,.]';
				   
				   for j(1,nc-1,1);
						lower_threshold_append = lower_threshold_append |  negative_infinity;
						upper_threshold_append = upper_threshold_append |  0;
						
						lower_threshold_append_d = lower_threshold_append_d |  0;
						upper_threshold_append_d = upper_threshold_append_d |  0;
				   endfor;
				
				   p3_dd = 0;	
				   for g3(1,nvar_mear_ordl,1);
					   S = zeros(nc,nvar_mear_ordl+nc-1);
					   S[1,g3] = 1;
					   S[2:nc,nvar_mear_ordl+1:nvar_mear_ordl+nc-1] = eye(nc-1);
					   
					   rho_low_g3 = S*lower_threshold_append;
					   rho_up_g3  = S*upper_threshold_append;
					   
					   rho_low_g3d = S*lower_threshold_append_d;
					   rho_up_g3d  = S*upper_threshold_append_d;
					   
					   mean_gu    = S*Mean_changed;
					   var_gu     = S*Error_changed*S';
					   
					   mean_gu_d    = S*Mean_changed_d;
					   
					   om  = sqrt(diag(var_gu));
					   mean_low_final = (rho_low_g3 - mean_gu)./om;
					   mean_up_final  = (rho_up_g3 - mean_gu)./om;
					   var_final      = corrvc(var_gu);
					   var_final      = diagrv(var_final,ones(nc,1));
					   
					   mean_low_final_d = (rho_low_g3d)./om;
					   mean_up_final_d  = (rho_up_g3d)./om;
					   
					   seed20 = seednext;
					   
					   {w1,g1,ss} = pdfmvna(mean_up_final',var_final,seed20);
					   seednext = ss;
						   					   
					   p3_dd = p3_dd + ( (1/w1) *  (g1[1,1:nc] * mean_up_final_d)  )  ;
					   					   
					   
					   clear rho_low_g3,rho_up_g3,mean_gu,var_gu,om,mean_low_final,mean_up_final,var_final,diff_cdf,mean_gu_d,mean_low_final_d,mean_up_final_d,w1,g1,w2,g2;
				   endfor;
				   
				   gg = p1_dd + p2_dd + p3_dd;
				   gg_temp = gg_temp | gg;
				   
				   clear M,B_Tild,Error_Tild,Mean_changed,Error_changed,BU_Tild,Error_YU_Tild,Error_U_Tild,Error_Y,Diff_Mean,BU_Tild_d,Diff_Mean_d,Mean_changed_d,B_Tild_d,gg;
			 endfor;
         gg_temp = gg_temp .* Positive_Obs;
		 upper_threshold_gradient = upper_threshold_gradient ~ gg_temp;   

         clear yd,Utilityd,lower_threshold_matrix_d,upper_threshold_matrix_d;
	 endif;
	  endfor;
 
 endif;
 gradient = {};
 if(nvar_mear_ordl > 0);
 gradient = gradient ~ alpha_gradient ~ alpha_corr_gradient ~ delta_coeff_gradient ~ d_matrix_gradient ~ Psi_gradient ~ beta_gradient ~ lambda_gradient ~ lamda_gradient ~ lower_threshold_gradient ~ upper_threshold_gradient;
 else;
 gradient = gradient ~ alpha_gradient ~ alpha_corr_gradient ~ delta_coeff_gradient ~ d_matrix_gradient ~ Psi_gradient ~ beta_gradient ~ lambda_gradient ~ lamda_gradient;
 endif;
 Gradient_Store1 = gradient;
 retp(gradient);
 endp;
 //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

proc(1)= pdfmvn(x,mu,s);
	 local d,p,p1,p2;
	 d = rows(x);
	 p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
	 p2 = ((2*pi)^(d/2))*sqrt(det(s));
	 p = p1/p2;
	 retp(p);
 endp;
 
proc(1) = pdfmvn1(xxx,mu,capSig);
    local retDens,dim;
    
    dim = rows(capSig);

    retDens = ((2*pi)^(-dim/2)) * (1/sqrt(det(capSig))) * exp(-0.5*(xxx-mu)'*inv(capSig)*(xxx-mu));
    retp(retDens);
endp;

proc(1)=pdfgmean(x,mu,s);
    local d,p,p1,p2,p3,grad1,grad,store,ie;
	 d = rows(x);
	 p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
	 p2 = ((2*pi)^(d/2))*sqrt(det(s));
	 p3 = inv(s);
	 p = p1/p2;
	 store = zeros(d,1);
	 for ie(1,d,1);
		  grad = -1*((x-mu).*p3[.,ie]);
		  grad1 = sumc(grad);
		  grad1 = p*grad1;
		  store[ie] = grad1;
	 endfor;
	 retp(store);
endp;

proc(1)=pdfgcov(x,mu,r);
	local d,p1,p2,p,p4,out,i,j,diff_matrix,part11,part12,part13,part1,s,ncholerr,diff_matrix1;
    local part21,part22,part23,part24,part2,gradient;
    d = rows(x);
    s = xpnd(r);
	ncholerr = rows(r);
    p1 = exp(-0.5*((x-mu)'*inv(s)*(x-mu)));
    p2 = ((2*pi)^(d/2));
    p = p1/p2;
    p4 = inv(s);
    out = {};
    for i(1,ncholerr,1);
        
            diff_matrix1 = zeros(ncholerr,1);
			diff_matrix1[i,1]= 1;
			diff_matrix = xpnd(diff_matrix1);
            
            part11 = p4*diff_matrix;
            part12 = diag(part11);
            part13 = sumc(part12);
            part1 = -0.5*part13;
            part1 = part1/sqrt(det(s));
            
            part21 = (((p4*(x-mu))*(x-mu)')*p4);
            part22 = part21*diff_matrix;
            part23 = diag(part22);
            part24 = sumc(part23);
            part2 = 0.5*part24;
            part2 = part2/sqrt(det(s));
            
            gradient = p*(part1 + part2);
            out = out | gradient;
        
    endfor;
    retp(out);
endp;


proc(1)= pdfmvn_grad(xxx,mu,capSig);
    local retDens,dim,gg_mu,d_mu,gg_capSig,ncovpar,d_capSig,d_comp1,d_comp2;
    
    dim = rows(capSig);ncovpar=dim*(dim+1)/2;

    retDens = ((2*pi)^(-dim/2)) * (1/sqrt(det(capSig))) * exp(-0.5*(xxx-mu)'*inv(capSig)*(xxx-mu));
    gg_mu = {};
    for idim (1,dim,1);
        d_mu = mu*0;d_mu[idim]=1;
        gg_mu = gg_mu~(retDens*(-0.5*(  ((-d_mu)'*inv(capSig)*(xxx-mu))   +  ((xxx-mu)'*inv(capSig)*(-d_mu))    )));
    endfor;

    gg_capSig = {};
    for irow (1,dim,1);
        for jcol(1,irow,1);
            d_capSig = capSig*0;d_capSig[irow,jcol]=1;d_capSig[jcol,irow]=1;    
            d_comp1  =  (-1/2)*(det(capSig))^(-3/2)  * det(capSig) * sumc(diag(inv(capSig)*d_capSig));
            d_comp2  = exp(-0.5*(xxx-mu)'*inv(capSig)*(xxx-mu)) * (-0.5*(xxx-mu)'*(-inv(capSig)*d_capSig*inv(capSig))*(xxx-mu));

            gg_capSig = gg_capSig~( ((2*pi)^(-dim/2)) * (    d_comp1 * exp(-0.5*(xxx-mu)'*inv(capSig)*(xxx-mu))  +  (1/sqrt(det(capSig))) * d_comp2  )   );
      
        endfor;
    endfor;

    retp(gg_mu~gg_capSig);
endp;


proc(1)=cdfbvn_grad(a,b,corr);
    local d_a,d_b,d_corr;
    d_a     = pdfn(a) .* cdfn((b- corr .* a) ./ sqrt(1-corr .* corr) );
    d_b     = pdfn(b) .* cdfn((a- corr .* b) ./ sqrt(1-corr .* corr) );
    d_corr  = (exp(-0.5*((a^2 + b^2 - 2*corr .* a .* b   ) ./ (1-corr .* corr) ))) ./ ((2*pi) * sqrt(1-corr .* corr));
    retp(d_a|d_b|d_corr);
endp;

proc(1) = gettime();
	local y,timesec;
	y = time;
	timesec = y[1,1]*3600 + y[2,1]*60 + y[3,1];
	retp(timesec);
endp;


proc (2) = cdfmvna(a,r,s);
local nn,ss1,om,m,aa,ab,w,cm,s1,n1,p,j,x,rho,y,z,z1,z3,z2,cond,k,omega21,omega11,condk,pcomb,newper,rnum,ss;

  m = cols(a);
  w = {};
  { rnum, ss } = rndn(1,m,s);
  aa = seqa(1,1,m)~(rnum)';
  aa = sortc(aa,2);
  w  = w|((aa[.,1])');
  s  = ss;	
  w  = w';  
  
n1 = cols(w);
p = 0;
j = 1;

a = a.*(a .<5.7)+5.7*(a.>=5.7);      
a = a.*(a .>-5.7)-5.7*(a.<=-5.7);  

ab = a';
do until j > n1;
  x = ab[w[.,j]];
  rho = submat(r,w[.,j],w[.,j]);
  y = reshape(((ones(m,1).*.x)'),m,m);
  z = cdfbvn(x,y,rho);
  z = diagrv(z,cdfn(x));
  z1 = cdfn(x).*cdfn(y);
  z3 = cdfn(x);
  z2 = 1-z3;
  cond = 1;
  k = 3;
  do until k > m;
    omega21 = z[k,1:k-1]-z1[k,1:k-1];
    omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
    trap 1;
    cm = invpd(omega11);
    if scalerr(cm);
      cm=inv(omega11);
    endif;
    trap 0;
    condk = z3[k]+omega21*(cm)*z2[1:k-1];   
    cond=cond*condk;
    k = k+1;
  endo;
  pcomb = z[1,2]*cond;
  p = p+pcomb;    
  j=j+1;
endo;
if ((p/n1) >0 and (p/n1) <=1);
  retp(p/n1,s);
else;
  { nn,ss1 } = cdfmvna(a,r,s);
  retp(nn,ss1);
endif;  
endp;


proc (3) = pdfmvna(a,r,s);
local m,w,s1,n1,p,j,x,rho,y,z,z1,z3,z2,cond,k,omega21,omega11,omega55,condk,pcomb,cm,int_count;
local rhovec,c,rho1,rho2,g3,g5,g10,g11,g12,g13,g14,g15,g20,g25,g30,g53,g31,g35,g36,g40,g45,g46,g47,g50,g51;
local grff,gw,condpass,sk,l,ab,ir,jr,res2,g80,g81,g59,kk,g49,g65,g55,mm,res,res1,aaa1,g56,g57,g58,g60,g61,g62,gr,gr1,gw1;
local gw2,gr2,gr3,aaa,gwf,grf,gwfinal,grfinal,invomg11,nnnn,gggg,ssss1,aa,t,newper,rnum,ss,r_1;

	  m = cols(a);
	  w = {};
	  { rnum, ss } = rndn(1,m,s);
	  aa = seqa(1,1,m)~(rnum)';
	  aa = sortc(aa,2);
	  w  = w|((aa[.,1])');
	  s  = ss;	
	  w  = w';

	n1 = cols(w);
	p = 0;
	j = 1;

	a = a.*(a .<5.7)+5.7*(a.>=5.7);     
	a = a.*(a .>-5.7)-5.7*(a.<=-5.7);  

	ab = a';
	condpass={};
	do until j > n1;
	  x = ab[w[.,j]];
	  rho = submat(r,w[.,j],w[.,j]);
	  y = reshape(((ones(m,1).*.x)'),m,m);
	  z = cdfbvn(x,y,rho);
	  z = diagrv(z,cdfn(x));
	  z1 = cdfn(x).*cdfn(y);
	  z3 = cdfn(x);
	  z2 = 1-z3;
	  cond = 1;
	  k = 3;
	  do until k > m;
		omega21 = z[k,1:k-1]-z1[k,1:k-1];
		omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
		trap 1;
		cm = invpd(omega11);
		if scalerr(cm);
		  cm=inv(omega11);
		endif;
		trap 0;
		condk = z3[k]+omega21*(cm)*z2[1:k-1];  
		cond=cond*condk;
		k = k+1;
	  endo;
	  pcomb = z[1,2]*cond;
	  condpass = condpass~cond;
	  p = p+pcomb;    
	  j=j+1;
	endo;

	gwfinal = zeros(1,m);
	grfinal = zeros(1,((m-1)*(m)/2));
	j=1;
	do until j > n1;
	  x = ab[w[.,j]];
	  rho = submat(r,w[.,j],w[.,j]);
	  rhovec = {};
	  c=1;
	  do until c==cols(rho);
		 rhovec = rhovec~rho[c,c+1:cols(rho)];
		 c=c+1;
	  endo;
	  y = reshape(((ones(m,1).*.x)'),m,m);
	  z = cdfbvn(x,y,rho);
	  z = diagrv(z,cdfn(x));
	  z1 = cdfn(x).*cdfn(y);
	  z3 = cdfn(x);
	  z2 = 1-z3;
	  rho1 = diagrv(rho,zeros(m,1));
	  rho2 = sqrt(1-rho1^2);
	  g3 = pdfn(x);
	  g5 = (y-rho1.*x)./rho2;
	  g10 = g3.*cdfn(g5);
	  g11 = g3.*cdfn(y);
	  g12 = g10-g11;
	  g13 = g12;
	  g14 = g3.*(1-2*cdfn(x));
	  g15 = diagrv(g13,g14);
	  g20 = -g3;

	  g25 = (1/rho2).*g3.*pdfn(g5);
	  g25 = diagrv(g25,zeros(m,1));
	  

	  g30 = g10[1,2]~g10[2,1]~zeros(1,m-2);
	  g53 = g25[1,2]~zeros(1,cols(rhovec)-1);


	  k = 3;
	  gw1 = zeros(1,m);
	  gr1 = zeros(1,cols(rhovec));
	  do until k > m;
		omega21 = z[k,1:k-1]-z1[k,1:k-1];
		omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
		trap 1;
		invomg11 = invpd(omega11); 
		if scalerr(invomg11);
		  invomg11=inv(omega11);
		endif;
		trap 0;  
		condk = z3[k]+omega21*invomg11*z2[1:k-1];
		g31 = zeros(1,m);
		g31[k] = g3[k];
		l = 1;
		g40={};
		g46={};
		g51={};
		g81 = z2[1:k-1];    
		do until l == k;
		  g35 = zeros(k-1,k-1);
		  g35[l,1:k-1] = g15[l,1:k-1];
		  g35=g35+g35';
		  g35 = diagrv(g35,(diag(g35)/2));
		  g36 = -invomg11*g35*invomg11;
		  g36 = omega21*g36*g81;
		  g40=g40~g36;

		  g45 = zeros(1,k-1);
		  g45[l] = g15[l,k];
		  g46 = g46~(g45*invomg11*g81);

		  g50 = zeros(k-1,1);
		  g50[l]=g20[l];
		  g51 = g51~(omega21*invomg11*g50);
		  l=l+1;
		endo;

		g40 = g40~zeros(1,m-(k-1));
		
		g49 = g15[k,1:k-1];
		g46 = g46~(g49*invomg11*g81);

		g47 = zeros(1,m);
		g47[1:cols(g46)] = g46;

		g51 =g51~zeros(1,m-(k-1));

		gw = (g31+g40+g47+g51)*((condpass[j])/condk).*z[1,2];
	 
		/* Start here for gradients with respect to rho parameters */


		l=1;
		kk = cols(rhovec);
		g60={};
		g65={};
		do until l>kk;
		  g55 = zeros(1,kk);
		  g55[l]=1; 
		  mm = 1;
		  sk=0;
		  g56 = zeros(m,m);
		  do until mm>m-1;
			g56[mm,mm+1:m] = (g55[sk+1:sk+m-mm]);
			sk=sk+m-mm;
			mm=mm+1;
		  endo; 
		  g57=g56+g56';
		  g59 = g57.*g25;
		  g59 = g59[1:k-1,1:k-1];
		  g58 = -invomg11*g59*invomg11;
		  g58 = omega21*g58*z2[1:k-1];
		  g60 = g60~g58;

		  g61 = g57[k,1:k-1].*g25[k,1:k-1];
		  g62 = g61*invomg11*z2[1:k-1];
		  g65 = g65~g62;      
		  l=l+1;
		endo;
	  
		gr = (g60+g65)*((condpass[j])/condk).*z[1,2];
		gw1 = gw+gw1;
		gr1 = gr+gr1;
		k=k+1;
	  endo;
	  gw2 = (g30.*condpass[j])+gw1;
	  gr2 = (g53.*condpass[j])+gr1;

	  mm=1;
	  sk=0;
	  gr3 = zeros(m,m);
	  do until mm>m-1;
		gr3[mm,mm+1:m] = (gr2[sk+1:sk+m-mm]);
		sk=sk+m-mm;
		mm=mm+1;
	  endo; 

	  /* commands below to resequence gradients based on permutation */
	  
	  aaa = indnv(seqa(1,1,m),w[.,j]);
	  gwf = gw2[aaa];
	  grf = submat(gr3,aaa,aaa); 

	  res = {};
	  ir = 1;
	  do until ir == m;
		jr = ir+1;
		res = res|((ones(m-ir,1).*.w[ir,j])~w[jr:m,j]);
		ir=ir+1;
	  endo;

	  res=res';
	  res2={};
	  t=1;
	  do until t>cols(res);
		res2 = res2~sortc(res[.,t],1);
		t=t+1;
	  endo;

	  res2=res2';
	  res1 = combinate(m,2);
	  res1 = res1[.,1] .*(10^(trunc (ln(res1[.,2])./ln(10))+1)) + res1[.,2];
	  res2 = res2[.,1] .*(10^(trunc (ln(res2[.,2])./ln(10))+1)) + res2[.,2];
	 
	  aaa1 = indnv(res1,res2);
	  grf = gr2[aaa1];
	  gwfinal = gwfinal+gwf;
	  grfinal = grfinal+grf;
	  j=j+1;
	endo;
	if ((p/n1) >0 and (p/n1) <=1);
	  retp(p/n1,(gwfinal~grfinal)/n1,s);
	else;
	 { nnnn,gggg,ssss1 } = pdfmvna(a,r,s);
	  retp(nnnn,gggg,ssss1);
	endif;
endp;


