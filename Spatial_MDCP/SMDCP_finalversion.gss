/* Written by Subodh K Dubey */

library maxlik;
maxset;
cls;
format /m1/rzt 1,6;

/*****************************************************************************
                  Global Variable Definitions
*****************************************************************************/
clearg __row,nobs,_price,_randc,_rande, _randper, _randd, nc,datatset,nvarm,nvardel,nvargam,xTildec,nind,X_subtracted,_counterc,_counterp,B_mat,sigma_mat,Jacobian,Chosen_alternative;
clearg nobs1,seed10,seed30,S_matrix,pure_error,Tot_paring,weightM1,distance,J_mat,maxiter,_delc,Pairing,Grad_S,_sep,consumption_limit,mine,Likelihood_S,Mean_Negative,_onedel,_cont,_allactive;
clearg _tdel;

Own_data = 0;                              /* Make this 1, if you want to specify your own dataset */

Simulation_data = 1;                       /* Make this 1, if you wish to perform a simulation run */

runpath = "K:/subodh/SMDCP/";    /* The program generates the data for simulation internally in case simulation option is chosen and outputs the file to the location provided by the variable runpath */           
                                           /* The program also generate a duplicate data file when the own_data option is chosen to verify that correct columns were read during label generation and outputs the file to the location provided by the variable runpath */
outpath = "K:/subodh/SMDCP/";    /* Path for estimation result file */

nind = 2000;                               /* Number of individuals in data set */
nobs = nind;

nc   = 4;                                  /* Number of alternatives including outside alternative */
_row = nobs;                               /* Number of rows to be read at a time by log-likelihood function */
_randper = 1;                              /* Random permutations of all digits */
_randd   = 0;                                /* All permutations or random permutations */
nvar     = 3;                              /* Number of exogenous variables per alternative */
nran     = 2;                             /* Number of random coefficent variables. The program assumes that all the random coefficients are stacked before fixed parameters 
                                              in the final parameter vector */
upper_limit = 1e-50;                       /* Any value of CDF below upper_limit will be assumed zero. It adds stability to the program */ 

cutoff_distance = 1.1;                     /* Distance band for pairing of observations in the likelihood expression */
consumption_limit = 625;                   /* Total area of the grid. Also called as budget. */

/*****************************************************************************
                  How to specify your own dataset
*****************************************************************************/
/* If you have your own dataset, specify your daatset in the following way. The dataset should be a csv file without header. */
/* The number of rows in the dataset should be equal to nobs and columns should be equal to (nvar*nc+2+nc). */
if(Own_data eq 1);
 load dataset_name[nobs,(nvar*nc+2+nc)] = K:/subodh/SMDCP/SMDCP_data.csv;  
elseif(Simulation_data eq 1);
 Run_No = 0;                          /* Simulation run number */

seed1 = 23569;                       /* Seed for exogeneous variables */
seed  = 32656 + Run_No;              /* Seed for the error term */
seed2 = 62636 + Run_No;              /* Seed for the random parameter covariance matrix */
endif;

seed30 = 300000;                     /* Seed for MACML approach */

Mean_Negative = 0;

/*****************************************************************************
                  Weight Matrix Generation
*****************************************************************************/
clearg width, length,xCoord,yCoord,weight1,weight2,weight3,weight4,weightM1,distance;
width = 100;length = nind/width;
xCoord = seqa(1,1,length) .*. ones(width,1);
yCoord = ones(length,1).*.seqa(1,1,width);

weight1 = zeros(nind,nind);  /* inverse of distance square */
weight2 = zeros(nind,nind);  /* inverse of distance root */
weight3 = zeros(nind,nind);  /* inverse of distance */
weight4 = zeros(nind,nind);  /* inverse of exponential distance */

distance = zeros(nind,nind);


for iobs (1,nind,1);
    for jobs (1,nind,1);
        temp = sqrt(( xCoord[iobs]-xCoord[jobs] )^2 + ( yCoord[iobs]-yCoord[jobs] )^2); 
        if(temp ne 0); weight1[iobs,jobs] = 1/(temp^2); weight2[iobs,jobs] = 1/sqrt(temp); weight3[iobs,jobs] = 1/temp; weight4[iobs,jobs] = 1/exp(temp); distance[iobs,jobs] = temp;
        else; weight1[iobs,jobs] = 0; weight2[iobs,jobs] = 0; weight3[iobs,jobs] =0 ; weight4[iobs,jobs] =0 ; distance[iobs,jobs] = 0; endif;            
    endfor;
endfor;

weightM1 = weight3;          /* Specify the weight matrix configuration to be used in the estimation */
a = sumr(weightM1);
weightM1 = weightM1./a;

/* If you have your own distance and weight matrix, specify them in the following way 
  load distance[nind,nind] = C:/subodh/spatial_drift/mydistance_mat.csv;
  load weightM1[nind,nind] = C:/subodh/spatial_drift/myweight_mat.csv;               
  Please make sure that the weight matrix is row normalized                         */

grid_pair = zeros(nind,15);
for i(1,nind,1);
	counter = 0;
	for j(1,nind,1);
		if(distance[i,j] < cutoff_distance);
			counter = counter + 1;
			grid_pair[i,counter] = j;
		endif;
		
	endfor;
endfor;

/*********************************************************************************************************************************************
                 Exogeneous Variable Generation 
If you choose the option Simulation_data, this section generates the simulation data, Otherwise, it creates 
labels for columns specified in the external dataset.
**********************************************************************************************************************************************/
meanvar1 = 1.17*ones(nvar,1)|1.1*ones(nvar,1)|1*ones(nvar,1);      
sigvar1 =  0.6*ones(nvar,1)| 0.5*ones(nvar,1)|0.5*ones(nvar,1);    

meanvar2 = 1.7*ones(nvar,1);
sigvar2 = 0.2*ones(nvar,1);


dataset= runpath $+ "syndata.dat";
dataset_out = runpath $+ "myfile_mod.txt";

/* Defining the labels for the variables */
vnames = { x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 };

ntot = nvar*nc;
fin = 0;
create fin = ^dataset with ^vnames,ntot,8,8;
obs = 0; nr = 1;
do while obs < nobs;
   dat = {};
   
   if(Own_data eq 1);
	   dat = dat ~ dataset_name[obs+1,1:cols(vnames)];             
   elseif(Simulation_data eq 1);   
       dat1 = (meanvar1'+(sigvar1'.*(rndns(nr,nvar*(nc-1),seed1))));
       dat2 = (meanvar2'+(sigvar2'.*(rndns(nr,nvar,seed1))));
       dat = dat ~ dat1 ~ dat2;
   endif;
   
   if writer(fin,dat) /= nr;
    print "Disk Full"; end;
   endif;
   obs= obs+nr;
endo;
closeall fin;

invar = getname(dataset)|"uno"|"sero";
outvar = invar;

call initalize(dataset);

proc(0)= initalize(dataset);
     local add_data,fout,y,fpin,nin,outdata;
	 clear fin;
     open fin = ^dataset;
     fpin = typef(fin);
     nin = rowsf(fin);
     do until eof(fin);
       add_data = readr(fin,nobs);
     endo;
    if fin > 0; fin = close(fin); endif;
     outdata = add_data~ones(nobs,1)~zeros(nobs,1);
     create fout = ^dataset with ^outvar,0,8;
     y = writer(fout,outdata);   
     if fout > 0;fout = close(fout);endif; 
 endp;
 
open f1 = ^dataset;          
assign = readr(f1,nobs);
outwidth 200;
output file = ^dataset_out;     
output reset;
screen off;
print assign;
output off;
screen on;
 
 load Main_data2[nobs,(nc*nvar)+2] = ^dataset_out;
 
 logfile= outpath $+ "Output" $+ ftocv(Run_No,2,0) $+ ".txt";
 OUTPUT FILE= ^logfile ON;outwidth 250;format /m1 /rzt 1,15; OUTPUT reset;
 //---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Position of UNO variable (i.e., the column of ones) in data set. 
   The dataset should consist of a column of ones.*/
   
{ unov,ivuno } = indices(dataset,"uno");

/* Position of SERO variable (i.e., the column of zeros) in data set. 
   The dataset should consist of a column of zeros.*/
   
{ serov,ivsero } = indices(dataset,"sero");

/* Position of WEIGHT variable (i.e., the column of weights).
   If the data has weights, then the dataset should consist of a column of weights.
   Modify the label (in double-quotes) with the label of the weight variable, if your data has weights  */

{ weight,wtind } = indices(dataset,"uno");

flagavm = ivuno~ivuno~ivuno~ivuno;      /* Append as many "ivuno" as the number of alternatives. 
                                         All alternatives are considered to be available; if an alternative is not available, use ivsero for that alternative. */

/* Positions of PRICE variables
   Provide labels of price variables (one label in each double-quote). Number of labels = number of alternatives.
   Provide all UNO variables if there is no price variation */

{ cprice,fp } = indices(dataset,"uno"|"uno"|"uno"|"uno");
flagprcm = fp';

/* Utility specification for the alternatives */
let if1 = { x1 x2 x3 };
let if2 = { x4 x5 x6 }; 
let if3 = { x7 x8 x9 }; 
let if4 = { x10 x11 x12 };


{ v1,itf1 } = indices(dataset,if1');
{ v2,itf2 } = indices(dataset,if2');
{ v3,itf3 } = indices(dataset,if3');
{ v4,itf4 } = indices(dataset,if4');


ivgenv = itf1'~itf2'~itf3'~itf4';        

/* In the following specification, ivd1, ivd2, ivd3 contain input data specifications (on right hand side) for satiation parameters (Alphas) for alternatives 1, 2 and 3
   Add a row below for ivd4 if there is a 4th alternative, another additional row for ivd5 if there is a 5th alternative,.... (number of rows = number of alternatives)
   Number of columns = Number of alternatives.
   Note that you can also add individual-specific variables below, so that satiation varies across individuals; However, you will then have to translate outputs to compute actual alpha parameters.
   This code is written to provide you with the alpha parameters directly for the case when there is no variation in alpha across individuals */

let ivd1 = { uno sero sero sero };
let ivd2 = { sero uno sero sero };
let ivd3 = { sero sero uno sero };
let ivd4 = { sero sero sero uno };


{ c1,itvd1 } = indices(dataset,"uno"|"sero"|"sero"|"sero");
{ c2,itvd2 } = indices(dataset,"sero"|"uno"|"sero"|"sero");
{ c3,itvd3 } = indices(dataset,"sero"|"sero"|"uno"|"sero");
{ c4,itvd4 } = indices(dataset,"sero"|"sero"|"sero"|"uno");

ivd = itvd1'~itvd2'~itvd3'~itvd4'; 

/* In the following specification, ivg1, ivg2, ivg3 contain input data specifications (on the right hand side) for translation parameters (Gammas) for alternatives 1, 2 and 3
   Add a row for ivg4 if there is a 4th alternative another additional row for ivd5 if there is a 5th alternative,.... (number of rows = number of alternatives)
   Number of columns = Number of alternatives; Note that you can also add individual-specific variables below, so that gamma varies across individuals
   However, you will then have to translate outputs to compute actual gamma parameters
   This code is written to provide you with the gamma parameters directly for the case when there is no variation in gamma across individuals */
let ivg1 = { uno sero sero sero };
let ivg2 = { sero uno sero sero };
let ivg3 = { sero sero uno sero };
let ivg4 = { sero sero sero uno };


{ d1,itvg1 } = indices(dataset,"uno"|"sero"|"sero"|"sero");
{ d2,itvg2 } = indices(dataset,"sero"|"uno"|"sero"|"sero");
{ d3,itvg3 } = indices(dataset,"sero"|"sero"|"uno"|"sero");
{ d4,itvg4 } = indices(dataset,"sero"|"sero"|"sero"|"uno");



ivg = itvg1'~itvg2'~itvg3'~itvg4'; 

nvar = cols(if1);       /* number of variables in baseline utility   = number of columns in ivm1, do not modify this */
nvardel = cols(ivd1);   /* number of variables in satiation          = number of columns in ivd1, do not modify this */
nvargam = cols(ivg1);   /* number of variables in translation        = number of columns in ivg1, do not modify this */

/*****************************************************************************
                 True Value of Parameters
*****************************************************************************/

dgp_b = 0.5|-1|1;                               /* Exogeneous variables coefficients */

dgp_OmTild =  { 0.81 0.54,  
                0.54 1.00};                    /* Covariance matrix for random parameters (exogeneous variables) */

dgp_Psi = {1.0 0.7 0.9,
            0.7 1.3 0.81,
		    0.9 0.81 1.49};                    /* Covariance matrix for the differenced error term vector */

/* Make sure that all the spatial paramters have a value greater than zero and less than or equal to one */	
dgp_del = 0.7|0.8|0.9;                          /* Spatial lag parameter */
g_gamma = 0|0|0|-1000;                          /* Translation parameter value. Please provide the unparametrize value of gamma. */

nCholOmega = (rows(dgp_OmTild))*(rows(dgp_OmTild)+1)/2;
nCholErr = (nc-1)*(nc)/2;
nvarm = rows(dgp_b);

/****************************************************************************************************************************************************************************************
                 Packing of all parameters in a single vector ( Do not change anything below this line) 
*****************************************************************************************************************************************************************************************/
dgp_b1 = dgp_b;

dgp_OmTild1 =  dgp_OmTild;


dgp_Psi1 = dgp_Psi;

dgp_del1 = ln((1-dgp_del)./dgp_del);

g_gamma1 = g_gamma;

   eqmatdel = ones(1,nc);
   eqmatgam = eye(nvargam);
    dgp_X = (dgp_b|vech(dgp_OmTild)|-1000*ones(rows(eqmatdel),1)|g_gamma|vech(dgp_Psi)|dgp_del);
	dgp_X1 = (dgp_b1|vech(dgp_OmTild1)|-1000*ones(rows(eqmatdel),1)|g_gamma|vech(dgp_Psi1)|dgp_del1);
  
   bb1 = (dgp_X1[1:nvar]
   |vech(chol(xpnd(dgp_X1[nvar+1:nvar+nCholOmega]))')
   |dgp_X1[nvar+nCholOmega+rows(eqmatdel)]
   |dgp_X1[nvar+nCholOmega+rows(eqmatdel)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)]
   |vech(chol(xpnd(dgp_X1[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr]))')
   |dgp_X1[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+rows(dgp_del)]);
     
   
   _max_active = 1|1|1|
                 1|
				 1|1|
				 zeros(rows(eqmatdel),1)|
				 ones(nc-1,1)|0|
				 0|
				 1|1|
				 1|1|1|
				 1|
				 1|
				 1;	
     
/****************************************************************************************************************************************************************************************
                 Consumption Value Calculation
Under the simulation scenario, one needs to predict the consumption value of different alternatives. TO predict the consumption values, we use the 
algorithm developed by Pinjari and Bhat (2011). On the other hand, if user has specified his/her own dataset, the program simply reads the values 
from the dataset.
*****************************************************************************************************************************************************************************************/
if(Own_data eq 1);
	st_col = nc*nvar + 2 + 1;
	end_col = nc*nvar + 2 + nc;
    Alt_Consumption = dataset_name[.,st_col:end_col];
elseif(Simulation_data eq 1);
	 Alt_Consumption = dloop(Main_data2,dgp_X);
endif;

if(Own_data eq 1);
    Main_data = dataset_name;
elseif(Simulation_data eq 1);
    Main_data = (Main_data2 ~ Alt_Consumption[.,2:nc]~Alt_Consumption[.,1]);
endif;

f = seqa(nc*nvar + 2 + 1,1,nc - 1);
f1 = nc*nvar + 2 + nc ;

flagchm = f';
flagchmo = f1;
clear Alt_Consumption; 

/****************************************************************************************************************************************************************************************
                 Estimation Settings
*****************************************************************************************************************************************************************************************/
X_subtracted = (Main_data[.,ivgenv[.,1:(nc-1)*nvar]]) - (ones(1,nc-1).*.Main_data[.,ivgenv[.,(nc-1)*nvar+1:(nc-1)*nvar+nvar]]);
xTildec = zeros(nind*(nc-1),nind*nvarm);
	for iind1 (1,nind,1);
			dta_required = X_subtracted[iind1,.];
			dta_required = reshape(dta_required,(nc-1),nvarm);
			xTildec[(nc-1)*(iind1-1)+1:(nc-1)*(iind1-1)+(nc-1),(iind1-1)*nvarm+1:(iind1-1)*nvarm+nvarm]= dta_required;
	endfor;
clear dta_required,iind1;

/* Defining variable labels for printing */
varnam = 0 $+ "X" $+ ftocv(seqa(1,1,nvar),2,0);
OmTild_nam =  0 $+ "OmTild" $+ ftocv(seqa(1,1,nCholOmega),2,0);
alpha_nam = 0 $+ "Alpha" $+ ftocv(seqa(1,1,1),2,0);
gamma_nam = 0 $+ "Gamma" $+ ftocv(seqa(1,1,nc),2,0);
Psi_nam =  0 $+ "Psi" $+ ftocv(seqa(1,1,nCholErr),2,0);
del_nam = 0 $+ "Del" $+ ftocv(seqa(1,1,nc-1),2,0);


_max_ParNames = varnam|OmTild_nam|alpha_nam|gamma_nam|Psi_nam|del_nam;
_max_GradTol = 1e-4; 
_max_Options = { bfgs stepbt };
_max_CovPar = 2;
//_max_GradCheckTol = 1e-8; 
_max_GradProc = &lgd1;
{ x,f,g,cov,retcode } = maxprt(maxlik(Main_data,0,&lpr1,bb1));

clear _max_GradProc;
clear sigma_mat,Jacobian,S_matrix,Pure_error,Chosen_Alternative;
clearg Hessian_scaled,Hessian_unscaled;

dgp_b2 = x[1:nvar];

dgp_OmTild2 =  (upmat(xpnd(x[nvar+1:nvar+nCholOmega])))';
dgp_OmTild2 = dgp_OmTild2 * dgp_OmTild2';

Alpha_2 = 1/(1+exp(-x[nvar+nCholOmega+1:nvar+nCholOmega+rows(eqmatdel)]));

g_gamma2 = exp(x[nvar+nCholOmega+rows(eqmatdel)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)]);

dgp_Psi2 = (upmat(xpnd(x[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr])))';
dgp_Psi2 = dgp_Psi2 * dgp_Psi2';

dgp_del2 = 1/(1+exp(x[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+nc-1]));

dgp_X2 = (dgp_b2|vech(dgp_OmTild2)|Alpha_2|g_gamma2|vech(dgp_Psi2)|dgp_del2);

bb2 = (dgp_X2[1:nvar]
   |vech(chol(xpnd(dgp_X2[nvar+1:nvar+nCholOmega]))')
   |dgp_X2[nvar+nCholOmega+rows(eqmatdel)]
   |dgp_X2[nvar+nCholOmega+rows(eqmatdel)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)]
   |vech(chol(xpnd(dgp_X2[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr]))')
   |dgp_X2[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+rows(dgp_del)]);

_max_Options = { bfgs stepbt };
_max_MaxIters = 0;
_max_CovPar = 1;
_max_GradProc = &lgd2;
{ x,f,g,cov,retcode } = maxprt(maxlik(Main_data,0,&lpr2,bb2));

clearg Cov_unscaled,Cov_scaled,Cov_IM,st_error_unscaled,st_error_scaled,st_error_IM,Hessian_gauss,Hessian_org,Cov_BHHH,st_error_BHHH;
JMat = JMatrix(bb2,Main_data,grid_pair);
JMat = Tot_paring*JMat;

if( _max_CovPar eq 1);
   Hessian_org = _max_FinalHess*nobs;
   if(det(Hessian_org) > 0);
      Cov_BHHH = inv(Hessian_org)*JMat*inv(Hessian_org);
   
   Var_BHHH = diag(Cov_BHHH);
   Negative_variance = 0;
   for i(1,rows(Var_BHHH),1);
       if(Var_BHHH[i] < 0);
	      Negative_variance = Negative_variance + 1;
       endif;
    endfor;

   if( Negative_variance eq 0);	
       st_error_BHHH = sqrt(diag(Cov_BHHH));
   endif;
   endif;	
endif;
   
    Hessian_scaled = Tot_paring*Hessian_scaled;
	Cov_unscaled = inv(Hessian_unscaled)*JMat*inv(Hessian_unscaled);
    Cov_scaled   = inv(Hessian_scaled)*JMat*inv(Hessian_scaled);
    Cov_IM       = inv(JMat);
    needx        = selif(x,_max_active);

st_error_unscaled = sqrt(diag(Cov_unscaled));
st_error_scaled   = sqrt(diag(Cov_scaled));
st_error_IM       = sqrt(diag(Cov_IM));
LL_run = f*nobs;

if(det(Hessian_org) > 0 );
	if(Negative_variance eq 0);

"-----------------Final Result---------------------------------------------------------------------------------";
"Log-likelihood value : " ftos(LL_run,"%#*.*lG",10,6);
print "Parameter         Estimate      ST.Error        T-Stat";
omat = (selif(_max_parNames,_max_active) ~ needx ~ st_error_BHHH ~ (needx./st_error_BHHH) );
mask = 0~1~1~1;
let fmt[4,3] = 
            "-*.*s "  8 8   @ format info for variable names column @
            "*.*lf" 15 3   @ format info for mean column           @
			"*.*lf" 15 4   @ format info for mean column           @
            "*.*lf" 15 2   @ format info for mean column           @;
y = printfm(omat,mask,fmt);
  endif;
else;

"-----------------Final Result---------------------------------------------------------------------------------";
"Log-likelihood value : " ftos(LL_run,"%#*.*lG",10,6);
print "Parameter         Estimate      ST.Error        T-Stat";
omat = (selif(_max_parNames,_max_active) ~ needx ~ st_error_IM ~ (needx./st_error_IM) );
mask = 0~1~1~1;
let fmt[4,3] = 
            "-*.*s "  8 8   @ format info for variable names column @
            "*.*lf" 15 3   @ format info for mean column           @
			"*.*lf" 15 4   @ format info for mean column           @
            "*.*lf" 15 2   @ format info for mean column           @;
y = printfm(omat,mask,fmt);
endif;
"----------------------------------------------------------------------------------------------------";

//***********************************************************************************************************
 proc (1) = dloop(dta,parm);
           local smallB,OmTild,Psi,del,rho,chol_OmTild,chol_Lambda,chol_Psi,xdel,xgam,capC; 
		   local v,v1,v2,v3,v4,j,w2,u2,w,u,xTildec,count1,iind,OmTild_c,Psi_c,Psi_expand,capA,capR,Sq1,Sq2,capS,error_sum,inc,ichocc;
		   local nrep,alts,prices,a,f1,uniform_number,st_normal,expenditure,consumption,i,r,fc,vqr,m,k,N,D,lambda;
		   local z,z1,newstate,Psi_cd,OmTild_d,del_matrix,x_subtracted,numout,err_bet,r1,betTild,betTild_final,u_sub;
		   local v_max, v_pos,v_maxe,v_rev,outside_good,err_psi,f11,check;
           
		   smallB      = parm[1:nvar];
		   chol_OmTild = xpnd(parm[nvar+1:nvar+nCholOmega]);
           xdel        = eqmatdel'*parm[nvar+nCholOmega+1:nvar+nCholOmega+rows(eqmatdel)];
           xgam        = eqmatgam'*parm[nvar+nCholOmega+rows(eqmatdel)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)];
           chol_Psi    = xpnd(parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr]);
           del         = parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+rows(dgp_del)];
		   
           
 
    numout = 1;
    outside_good = nc;	
	OmTild = chol_OmTild;
	OmTild_c = zeros(nvar,nvar);
	
	del_matrix = zeros(nc-1,nc-1);
	del_matrix = diagrv(del_matrix,del);
    
	
	OmTild_d = chol(OmTild);
	OmTild_c[1:nran,1:nran] = OmTild_d';
	Psi_cd = (chol(chol_Psi))';
	
	err_bet = (rndns(nind,nvar,seed2));
    err_psi = (rndns(nind,nc-1,seed));	
    err_bet = (OmTild_c * err_bet' )' ;
    err_psi = (Psi_cd * err_psi')';
	
	betTild_final = ones(1,nc).*.err_bet;
	
	v1 = (ones(nc,1) .*. smallB )*~(dta[.,ivgenv])';
	v2 = (betTild_final.*dta[.,ivgenv])';
	v3 = v1+v2;
	
	w2 = (ones(nc,1) .*. xdel)*~(dta[.,ivd])';
    u2 = (ones(nc,1) .*. xgam)*~(dta[.,ivg])';
	
    j=1;
    v4 = {}; w={}; u={}; alts = zeros(1,nc);
    do until j == nc+1;
       w = w~(sumc(w2[(j-1)*nvardel+1:(j*nvardel),.]));
       u = u~(sumc(u2[(j-1)*nvargam+1:(j*nvargam),.]));
	   alts[1,j] = j; //alternative number
       j = j+1;
   endo;
   u[.,outside_good] = -1000*ones(nobs,1);

   j=1;
   do until j == nc+1;
       v4 = v4~(sumc(v3[(j-1)*nvar+1:(j*nvar),.]));
	   j = j+1;
   endo;
	clear v1,v2,v3,w2,u2;
	v4 = v4[.,1:nc-1]-(ones(1,nc-1).*.v4[.,nc]);
	
	Sq1 = (ones(nind,nind).*.del_matrix);
	Sq2 = Sq1 .* (weightM1.*.eye(nc-1));
		
	capS = inv( eye(nind*(nc-1))   -  Sq2 );
	error_sum = v4 + err_psi;
	error_sum = reshape(error_sum,nind*(nc-1),1);
	v = capS*error_sum;
    v = reshape(v,nind,nc-1);
	v = zeros(nind,1)~v;
		
	clear Sq1,Sq2,capS,error_sum,v4;
	//Forecasting Algorithm
	//*********************************************************************************************************
	nrep = 1; prices = dta[.,flagprcm];
	a = 1-(1./(1+exp(w))); // Alphas 
	f11 = exp(u);           // Gammas
	f1 = f11[.,outside_good]~f11[.,1:nc-1];
	clear w,u;
	v = exp(v);
	expenditure = consumption_limit*ones(nobs,1); 
	consumption = {};
	 for i(1,nobs,1);
		   for r(1,nrep,1);
			 fc = zeros(1,nc);
			 vqr = {};
			 vqr = alts|v[i,.]|prices[i,.]|f1[i,.];
			 vqr = vqr[.,1:numout]~(rev(sortr(vqr[.,numout+1:nc],2)')');
			  m = numout;
			  k = -1;
			 N = expenditure[i,1] + sumc((vqr[4,numout+1:nc])');
			 D = (vqr[2,numout])+ sumc((vqr[4,4,numout+1:nc].*vqr[2,numout+1:nc])');
			 lambda = (N/D)^(-1);
			 if (vqr[2,numout+1]<lambda);
			    fc[1,1:numout] = (lambda/vqr[2,numout])^(-1);
			    fc[1,numout+1:nc] = zeros(1,nc-numout);
			 else;
			   do until k==m;
				 m = m+1;
				 if (m==nc);
				   fc[1,1:numout] = (lambda/vqr[2,numout])^(-1);
				   fc[1,numout+1:nc] = (lambda/vqr[2,numout+1:nc])^(-1)-1;
				   k=m;
				 elseif (m < nc);
				    if (vqr[2,m+1]<lambda);
					 fc[1,1:numout] = (lambda/vqr[2,numout])^(-1);
					 fc[1,numout+1:m] = (lambda/vqr[2,numout+1:m])^(-1)-1;
					 fc[1,m+1:nc] = zeros(1,nc-m);
					 k = m;
				    endif;  
				 endif;
			   endo;
			 endif;
			 vqr[2,1:nc] = fc;
			 vqr = sortr(vqr,1);
			 
			 check = sumc((vqr[2,.])');
			 	 
			 if(vqr[2,1]<=0.001);
				 vqr[2,1] = 0.01;
			 endif;
			 
			 consumption = consumption | (vqr[2,.]);
		 endfor;
   endfor;
	clear expenditure, x_subtracted,a,f1;
	clear v;
    retp(consumption);
	clear consumption;
  endp;
  
//***********************************************************************************************************

proc lpr1(parm,dta);
    local smallA,smallB,OmTild,Lambda,Psi,del,rho,chol_OmTild,chol_Lambda,chol_Psi,Sq; 
    local inc,ichocc,iind,capR,capC,capA,capS,e1;  
    local capH,capV,capB;
    local om,xdel,xgam,b,chosen_keep1;
    local time1,time2,time3,time4,time5,time6,time7;
    local i,j,option,p1,p2,p3;
	local u,v,w,u2,v2,w2,a,f,mq,chosen_keep,diff_mat,diff_mat1;
	local Jac,Jad,Jae,chosen_alt,Sq1,Sq2;
	local pair1_chose,pair2_chose,alt_list,R,RNC,RC,Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed, Mean_NC_final,Var_NC_final,counter;
    local Lamda_c,OmTild_c,psi_c,capF,M,iden_mat,one_vect,filler,altcc,sigma,count,dta_required,Total_NC;
	local individual_prob,pair1,pair2,pair1_t,pair2_t,p1v,p2v,p1cv,p2cv,p1_mean,p2_mean,co_var,mean,sss,seednext,chosen_keep2,Total_C,total_pair,del_matrix,outside_good;
    local outside_v,temparory,capV1,capVC,jac1,Tot_par1,pure_error1,sss1,sss2,Var_NC_final_tri,seed20;
	local OmTild_dig,OmTIld_dig_expand,OmTild1,OmTild2,OmTild3,OmTild_c1,vect,itild,x_req,betx,chol_OmTild1,p1_check,p2_check,store_pair;
    
	smallB      = parm[1:nvar];
    chol_OmTild = upmat(xpnd(parm[nvar+1:nvar+nCholOmega]));
    xdel        = eqmatdel'*parm[nvar+nCholOmega+1:nvar+nCholOmega+rows(eqmatdel)];
    xgam        = eqmatgam'*parm[nvar+nCholOmega+rows(eqmatdel)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)];
    chol_Psi    = upmat(xpnd(parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr]));
    del         = parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+rows(dgp_del)];
    
    
    del = 1/(1+exp(del));
	   	
	outside_good = nc;	
	OmTild = zeros(nvar,nvar); OmTild[1:nran,1:nran] = chol_OmTild'*chol_OmTild;
	Psi = chol_Psi'*chol_Psi;
	del_matrix = zeros(nc-1,nc-1);
	del_matrix = diagrv(del_matrix,del);
    	
	v2 = (ones(nc-1,1) .*. smallB )*~(X_subtracted)';
    w2 = (ones(nc,1) .*. xdel)*~(dta[.,ivd])';
    u2 = (ones(nc,1) .*. xgam)*~(dta[.,ivg])';
    
	j=1;
    v = {};
    w = {};
    u = {};
    do until j == nc+1;
       w = w~(sumc(w2[(j-1)*nvardel+1:(j*nvardel),.]));
       u = u~(sumc(u2[(j-1)*nvargam+1:(j*nvargam),.]));
       j = j+1;
    endo;
    u[.,outside_good] = -1000*ones(nobs,1);
    j=1;  
    do until j == nc;
	    v = v~(sumc(v2[(j-1)*nvar+1:(j*nvar),.]));
		j = j+1;
    endo;
	clear v2,w2,u2;
    
	Sq1 = (ones(nind,nind).*.del_matrix);
	Sq2 = Sq1 .* (weightM1.*.eye(nc-1));
		
    capS = inv( eye(nind*(nc-1))   -  Sq2 );
		
	v = reshape(v,nind*(nc-1),1);
	a = 1/(1+exp(w)); 		// a is 1-alpha
	f = exp(u);             // gamma
	
	capV = capS * v ;
	capV = reshape(capV,nind,nc-1);
	capVC = capV - (a[.,1:nc-1].* (ln((dta[.,flagchm]+f[.,1:nc-1])./f[.,1:nc-1])));	// deterministic component V
	outside_v = -1*(a[.,nc].*ln(dta[.,flagchmo]+f[.,nc]));
	capV1 = capVC - (ones(1,nc-1).*.outside_v);
	capB = reshape(capV1,nind*(nc-1),1);
	b = dta[.,flagchm~flagchmo] .> 0;	// 1 if chosen, 0 if not
	
	clear u,v,w;
//*************************************************************************************************
     Jac = (a.*b)./((dta[.,flagchm~flagchmo]+f));
	 Jac = Jac./(dta[.,flagprcm]); 
	 Jac = substute(Jac,b.==0,1);
	 
	 Jae = (1/Jac).*b;  
	 Jad = sumc((Jae'));
	 Jac = (prodc((Jac'))).*Jad;
	 clear a,f,b;
//************************************************************************************************
            
    OmTild_c =  eye(nind).*.OmTild;
	OmTild_c =  xTildec * OmTild_c * xTildec';
	psi_c = eye(nind).*.Psi;
	sigma = capS*(OmTild_c + psi_c)*capS';
    
	
	
//************************************************************************************************************************************************	
	if(Mean_Negative eq 1);
	  B_mat = -(capB); 
    else;
	  B_mat = (capB); 
    endif;
  
	sigma_mat = sigma; Jacobian = Jac; S_matrix = capS; Pure_error = (OmTild_c + psi_c); Chosen_Alternative = dta[.,flagchm] .> 0; 
	clear sigma,capV,OmTild_c,capC,psi_c,Jac1,capS;
	
	
	seednext = seed30; 
	individual_prob = 0;
	p1_check = 0;
	p2_check = 0;
	store_pair = {};
	for pair1(1,nind,1);
					
			p1v = {}; p1_mean = {};
			            p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
						p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
			
				for pair2(pair1+1,nind,1);
										
					      p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {};
					
							if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
									
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1) - Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
																		
									if(Total_NC == 2*(nc-1));
										p1 = 1;
										om = diag(co_var);
										Mean_NC_final = mean'./(sqrt(om'));
										Var_NC_final = corrvc(co_var);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										seed20=seednext;
										{p2,sss2} = cdfmvna(Mean_NC_final,Var_NC_final,seed20);
										 
										 if(p2 lt upper_limit);
											 p2 = 0.01;
											 p2_check = p2_check + 1;
										 else;
											 seednext = sss2;
										 endif;
										 
										 p3 = Jacobian[pair1]*Jacobian[pair2];
										 clear Mean_NC_final,Var_NC_final,om,R,co_var,mean;
								   elseif(Total_C == 2*(nc-1));
									   p1 = pdfmvn(mean,co_var);
									   
									   if(p1 eq upper_limit OR p1 lt upper_limit);
										   p1 = .01;
										   p1_check = p1_check + 1;
									   endif;
									   
									   p2 = 1;
									   p3 = Jacobian[pair1]*Jacobian[pair2];
									   clear co_var,mean,R;
								   else;
									   RNC = R[1:Total_NC,.];
									   RC =  R[Total_NC+1:2*(nc-1),.];
									   Mean_C = RC*mean;
									   Mean_NC = RNC*mean;
									
									   Var_C = RC*co_var*RC';
									   Var_NC = RNC*co_var*RNC';
									   Var_NCC = RNC*co_var*RC';
									
									
									   Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
									   Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
									   
									   om = diag(Var_NC_changed);
									   Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
									   Var_NC_final = corrvc(Var_NC_changed);
									   Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
									   
									   
									   seed20=seednext;
									   
									   p1 = pdfmvn(Mean_C,Var_C);
									   
									   
									   if(p1 eq upper_limit OR p1 lt upper_limit);
										   p1 = .01;
										   p1_check = p1_check + 1;
									   endif;
									   
									   
									   if(Total_NC == 1);
										   p2 = cdfMvn(Mean_NC_final',Var_NC_final);
										   
									   elseif(Total_NC == 2);
										   p2 = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
										   
									   
								       else;
									        {p2,sss2} = cdfmvna(Mean_NC_final,Var_NC_final,seed20);
									        
											seednext = sss2;
										     
									   endif;
									   
									   if( p2 lt upper_limit);
										   p2 = .01;
										   p2_check = p2_check + 1;
									   endif;
									   
									   p3 = Jacobian[pair1]*Jacobian[pair2];	
									   
									   clear RNC,RC,Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed,om,Mean_NC_final,Var_NC_final,co_var,mean,R;
								  endif;
								  
								    individual_prob = individual_prob + ln(p1*p2*p3);
						            								
												
					        endif;
						
				   endfor;
			   endfor;
	 
	 retp(individual_prob);
 endp;
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

proc lgd1(parm,dta);
    local smallA,smallB,Lambda,Psi,del,rho,chol_OmTild,chol_Lambda,chol_Psi,Sq; 
    local inc,ichocc,iind,capR,capC,capA,capS,e1,seed20;  
    local capH,capV,capB;
    local om,omncd,gradient;
    local time1,time2,time3,time4,time5,time6,time7;
    local i,j,option,p1,p2,p3;
	local u,v,w,u2,v1,w2,v2,w1,a,f,mq,chosen_keep,diff_mat,diff_mat1,g,s1;
	local Jac,Jad,Jae,chosen_alt,xdel,xgam;
	local pair1_chose,pair2_chose,alt_list,R,RNC,RC,Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed, Mean_NC_final,Var_NC_final,counter;
    local Lamda_c,OmTild_c,psi_c,capF,M,iden_mat,one_vect,filler,altcc,sigma,count,dta_required,Total_NC;
	local individual_prob,pair1,pair2,pair1_t,pair2_t,p1v,p2v,p1cv,p2cv,p1_mean,p2_mean,co_var,mean,seednext;
	local beta_gradient,OmTild_gradient,smalla_gradient,Lamda_gradient,Psi_gradient,delta_gradient,rho_gradient,alpha_gradient,gamma_gradient;
	local iatr,forgx,forgcapV,Total_g,p1d_mean,p2dmean,meand,phi_a,phi_r,prob_orig1,Mean_NCd,Mean_NCd_changed,Mean_NCd_final,dd_del,dd_rho;
	local shi_a,shi_r,g_part1,g_part2,g_part3,phi_r_unq,phi_rd_unq,iphi,ishi,shi_r_unq;
	local ichol,d_chol_OmTild,d_OmTild,OmTild_expand,OmTild,F_OmTild,Final_Error,p1v_d,p2v_d,p1cv_d,p2cv_d,co_var_d;
	local Var_Cd,Var_NCd,Var_NCCd,Var_NCd_changed,Var_NCd_final,Mean_Cd,d_capA,d_chol_Lamda,d_Lamda,Lamda_expand,F_Lamda;
	local d_chol_Psi,d_Psi,Psi_expand,Psi_intoc,F_Psi,d_Sq,d_capS,Delta_Mean,F_Delta,Delta_error;
	local d_capC1,d_capC2,d_capC,F_rho,Frho_error,ialpha,igamma,alpha,gammanew,alpha_mult,gamma_mult,alpha_sum,gamma_sum;
	local gamma_req,all_alpha1,all_alpha_un,alpha_req1,alpha_req2,b_alpha,Jac1,Jac11,Jad1,Jae1,Diff_Jacobian,diff_utility_gamma;
	local all_gamma1,denom,b_gamma,all_gamma2,gamma_uti,p2d_mean,Total_C,prob_org1,d_chol_Lambda,d_Lambda,all_alpha2,Jac2,Jac22,Jad2,Jae2,g_part11,g_part12;
	local om1,omncd1,om2,kel,Var_Cd1,g_part22,d1_OmTild;
	local del_required,dell,ddelta,d_Sq1,d_Sq2,outside_good,temparory,b_inside,jac101,s2,Var_NC_final_tri_grad,fix_check,chol_OmTild1;
	local OmTild_dig11,OmTild_dig_expand11,OmTild11,x_reqg,betxg,sss2,store_grad;

    outside_good = nc;
	smallB      = parm[1:nvar];
    chol_OmTild = upmat(xpnd(parm[nvar+1:nvar+nCholOmega]));
    xdel        = eqmatdel'*parm[nvar+nCholOmega+1:nvar+nCholOmega+rows(eqmatdel)];
    xgam        = eqmatgam'*parm[nvar+nCholOmega+rows(eqmatdel)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)];
    chol_Psi    = upmat(xpnd(parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr]));
    del         = parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+rows(dgp_del)];

    del = 1/(1+exp(del)); dd_del= del.*(del-1);
    
	
//-----------------------------------------------------------------------------------------------------------------------------------
    beta_gradient = {};
    for iatr(1,nvarm,1);
	     forgx = smallB*0;forgx[iatr]=1;
		 
		if(_max_active[iatr]==0);
			beta_gradient = beta_gradient ~ 0;
			
	    else;
				 v1 = (ones(nc-1,1) .*. forgx )*~(X_subtracted)';
				 j=1;
				 v = {};
				 do until j == nc;
					 v = v~(sumc(v1[(j-1)*nvarm+1:(j*nvarm),.]));
					 j = j+1;
				 endo;
				
				v = reshape(v,nind*(nc-1),1);
				
			   if(Mean_Negative eq 1);
				   diff_mat1 = -(S_matrix*v);
			   else;
				   diff_mat1 = (S_matrix*v);
			   endif;
			   
        
		
				seednext = seed30; 
				Total_g = 0;
				for pair1(1,nind,1);
										
					p1v = {}; p1_mean = {}; p1d_mean = {}; 
								
                                     p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
                                     p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];								
				                     p1d_mean = p1d_mean ~ diff_mat1[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
					
						for pair2(pair1+1,nind,1);
							
							
							        p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2d_mean = {}; meand = {};
							
								if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
									
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                    p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                    p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
                                    p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									p2d_mean = p2d_mean ~ diff_mat1[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									meand = meand | p1d_mean;
									meand = meand | p2d_mean;
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1)-Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
																		
									if(Total_NC == 2*(nc-1));
										om = diag(co_var);
										Mean_NC_final = mean'./(sqrt(om'));
										Var_NC_final = corrvc(co_var);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										
										Mean_NCd = meand;
										Mean_NCd_changed  = Mean_NCd;	
										Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
										
										seed20=seednext;
									    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
										 seednext = s2;
										 shi_a = (g[1,1:Total_NC])';
									     
									    					
										if(w eq upper_limit OR w lt upper_limit);
											g_part2 = 0;
										else;
										   g_part2 = (1/w)*(Mean_NCd_final' * shi_a);
										   clear g,shi_a;
										endif;
												
										g_part1 = 0;
												 
										clear Mean_NC_final,Var_NC_final,Mean_NCd,meand,Mean_NCd_changed,Mean_NCd_final,R,co_var,mean;
									 elseif(Total_C == 2*(nc-1));
										 Mean_C = mean;
										 Var_C = co_var;
										 Mean_Cd = meand;
										 
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										 
										 
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(Mean_Cd' * phi_a);
										 endif;
										
										 g_part2 = 0;
										 clear Mean_C,Var_C,Mean_Cd,meand,R,co_var,mean;
									 else;
										 RNC = R[1:Total_NC,1:2*(nc-1)];
										 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

										 Mean_C = RC*mean;
										 Mean_NC = RNC*mean;
										 
										 Mean_Cd = RC*meand;
										 Mean_NCd = RNC*meand;
									
										 Var_C = RC*co_var*RC';
										 Var_NC = RNC*co_var*RNC';
										 Var_NCC = RNC*co_var*RC';
									
																
										 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
										 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
									
										 om = diag(Var_NC_changed);
										 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
										 Var_NC_final = corrvc(Var_NC_changed);
										 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
									
										//*****************************************************************************	
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
									
																											
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(Mean_Cd' * phi_a);
										 endif;
										
										   
										 //******************************************************************************
										 Mean_NCd_changed  = Mean_NCd - (Var_NCC*(inv(Var_C))*Mean_Cd);	
										 Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
											
																					
											 if(Total_NC == 1);
												 w = cdfMvn(Mean_NC_final,Var_NC_final);
												 shi_a = pdfn(Mean_NC_final);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part2 = 0;
												 else;	
													g_part2 = (1/w)*(Mean_NCd_final' * shi_a);
												 endif;
											 elseif(Total_NC == 2);
												 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part2 = 0;
												 else;	
													g_part2 = (1/w)*(Mean_NCd_final' * shi_a[1:2,1]);
												 endif;										 
											  
											 else;
												 seed20=seednext;
												 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
												 seednext = s2;
												  shi_a = (g[1,1:Total_NC])';
													 
																		
													if(w eq upper_limit OR w lt upper_limit);
														g_part2 = 0;
													else;
													   g_part2 = (1/w)*(Mean_NCd_final' * shi_a);
													   clear g,shi_a;
													endif;	  
																																						
												 
											  endif;
										clear Mean_C,Var_C,Mean_NC,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_Cd,Mean_NCd,meand,Mean_NCd_changed;
										clear Mean_NCd_final,R,RNC,RC,co_var,mean,shi_a;
									 endif;
										   
										   Total_g = Total_g +g_part1 + g_part2; 
											
										//*****************************************************************************
								endif;
								
							endfor;
						endfor;
						
				clear diff_mat1;
				beta_gradient = beta_gradient ~ Total_g;
		endif;
			
  endfor;
  clear forgx,p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1d_mean,p2d_mean,p1_mean,p2_mean;
  
  //--------------------------------------------------------------------------------------------------------------------------------
  
    OmTild_gradient = {};
	for ichol (1,nCholOmega,1);
		
	    if(_max_active[nvarm+ichol]==0);
		   OmTild_gradient = OmTild_gradient ~ 0;
	    else;
				d_chol_OmTild = zeros(nCholOmega,1);            d_chol_OmTild[ichol]=1;                         
		        d_chol_OmTild = upmat(xpnd(d_chol_OmTild));
                d1_OmTild = d_chol_OmTild'*chol_OmTild + chol_OmTild'*d_chol_OmTild;  d_OmTild = zeros(nvar,nvar);  d_OmTild[1:nran,1:nran] = d1_OmTild; 
                
                				
                OmTild_expand =  eye(nind).*.d_OmTild;
	            OmTild =  (xTildec * OmTild_expand * xTildec');
		        Final_Error = (S_matrix * OmTild * S_matrix');
				
				clear d_chol_OmTild,d_OmTild,OmTild_dig11,OmTild_dig_expand11,OmTild11,x_reqg,betxg;
				
				seednext = seed30; 
				Total_g = 0;
				for pair1(1,nind,1);
										
					   p1v = {}; p1_mean = {}; p1v_d = {};
								p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1v_d = p1v_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
					
						for pair2(pair1+1,nind,1);
							
							
							  p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2v_d = {}; p1cv_d = {}; p2cv_d = {}; co_var_d = {};
							
								if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									p2v_d = p2v_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv_d = p1cv_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv_d = p2cv_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									co_var_d = co_var_d ~ (p1v_d ~ p1cv_d);
									co_var_d = co_var_d | (p2cv_d ~ p2v_d);
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1)-Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
									if(Total_NC == 2*(nc-1));
										om = diag(co_var);
										Mean_NC = mean;
										Mean_NC_changed = Mean_NC;
										Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
										Var_NC_changed = co_var ;
										Var_NC_final = corrvc(Var_NC_changed);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										
										Mean_NCd_changed  = zeros(Total_NC,1);
										Var_NCd_changed = co_var_d ;
									
										omncd = diag(Var_NCd_changed);
										Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
										Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
										Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
									
										shi_r_unq = {};
										for ishi(1,rows(Var_NCd_final)-1,1);
										   shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
										endfor;
															
										seed20=seednext;
									    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
										shi_a = (g[1,1:Total_NC])';
										shi_r = (g[1,Total_NC+1:cols(g)])';
										seednext = s2;
											   
									   if(w eq upper_limit OR w lt upper_limit);
										   g_part2 = 0;
									   else;
										  g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
										  clear g,shi_a,shi_r;
									   endif;
									  
										g_part1 = 0;
										
										clear Mean_NC,Mean_NC_final,Var_NC_final,Mean_NCd_changed,Var_NCd_changed,om,omncd,Mean_NCd_final,Var_NCd_final,shi_r_unq,R,co_var,co_var_d,mean,om1,omncd1;
									elseif(Total_C == 2*(nc-1));
										 Mean_C = mean;
										 Var_C = co_var;
										 Var_Cd = co_var_d;
										 phi_r = pdfgcov(Mean_C,vech(Var_C));
										 prob_org1 = pdfmvn(Mean_C,Var_C);
									
										 phi_rd_unq = (vech(Var_Cd))';
																		 
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
										 endif;
										 g_part2 = 0;
										 clear Mean_C,Var_C,Var_Cd,phi_r,phi_r_unq,phi_rd_unq,R,co_var,co_var_d,mean; 
									 else;
										 RNC = R[1:Total_NC,1:2*(nc-1)];
										 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

										 Mean_C = RC*mean;
										 Mean_NC = RNC*mean;
									
										 Var_C = RC*co_var*RC';
										 Var_NC = RNC*co_var*RNC';
										 Var_NCC = RNC*co_var*RC';
									
										 Var_Cd = RC*co_var_d*RC';
										 Var_NCd = RNC*co_var_d*RNC';
										 Var_NCCd = RNC*co_var_d*RC';
										
										 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
										 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
									
										 om = diag(Var_NC_changed);
										 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
										 Var_NC_final = corrvc(Var_NC_changed);
										 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
									
									  //*****************************************************************************	
										 phi_r = pdfgcov(Mean_C,vech(Var_C));
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										
										 phi_rd_unq = (vech(Var_Cd))';
											
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
										 endif;
										 
									 //******************************************************************************
										 Mean_NCd_changed  =  - (Var_NCCd*(inv(Var_C))*Mean_C) + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Mean_C);	
										 Var_NCd_changed = Var_NCd - (Var_NCCd*(inv(Var_C))*Var_NCC') + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Var_NCC') - (Var_NCC*(inv(Var_C))*Var_NCCd');
										 
										 omncd = diag(Var_NCd_changed);
										 Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
										 Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
										 Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
										 
																		
										if(Total_NC == 1);
											 w = cdfMvn(Mean_NC_final,Var_NC_final);
											 shi_a = pdfn(Mean_NC_final);
											 if(w eq upper_limit OR w lt upper_limit);
												 g_part2 = 0;
											 else;	
											 g_part2 = (1/w)*(Mean_NCd_final * shi_a);
											 endif;
										elseif(Total_NC == 2);
											 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
											 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
											 if(w eq upper_limit OR w lt upper_limit);
												 g_part2 = 0;
											 else;	
												g_part2 = (1/w)*(Mean_NCd_final * shi_a[1:2,1] + Var_NCd_final[1,2]*shi_a[3,1]);
											 endif;	
										else;
											 seed20 = seednext;	
											 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
											 shi_a = (g[1,1:Total_NC])';
											 shi_r = (g[1,Total_NC+1:cols(g)])';
											 seednext = s2;
									          
											 shi_r_unq = {};
											 for ishi(1,rows(Var_NCd_final)-1,1);
												shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
											 endfor;
											
																						   
												
											   if(w eq upper_limit OR w lt upper_limit);
												   g_part2 = 0;
											   else;
												  g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
												  clear shi_a,shi_r;
											   endif;
											 
											   clear shi_r_unq;
										 endif;
										 clear Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Var_Cd,Var_NCd,Var_NCCd,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_NCd_changed;
										 clear Var_NCd_changed,Mean_NCd_final,Var_NCd_final,R,RNC,RC,shi_a;
										 clear om,omncd,co_var,co_var_d,mean,om1,omncd1;
									 endif;
											
											Total_g = Total_g +g_part1 + g_part2;
															
											
								//*****************************************************************************
									
								endif;
								
							endfor;
						endfor;
					
				clear Final_Error;
				OmTild_gradient = OmTild_gradient ~ Total_g;
		endif;
			
  endfor;
  clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1v_d,p2v_d,p1cv_d,p2cv_d;
  
  
  //-------------------------------------------------------------------------------------------------------------------------------------------
	
  alpha_gradient = {}; alpha_gradient = alpha_gradient ~ 0;
  
  //-------------------------------------------------------------------------------------------------------------------------------------------
  
  gamma_gradient = {};
	for igamma(1,nc-1,1);
		if(_max_active[nvarm+nCholOmega+1+igamma]==0);
		   gamma_gradient = gamma_gradient ~ 0;
		else; 
		
		  alpha = xdel; 
		  gammanew = xgam;
		  alpha_mult = (ones(nc,1) .*. alpha)*~(dta[.,ivd])';
		  gamma_mult = (ones(nc,1) .*. gammanew)*~(dta[.,ivg])';
		
        alpha_sum = {}; gamma_sum = {}; j=1;		
		do until j == nc+1;
           alpha_sum = alpha_sum~(sumc(alpha_mult[(j-1)*nvardel+1:(j*nvardel),.]));
		   gamma_sum = gamma_sum~(sumc(gamma_mult[(j-1)*nvargam+1:(j*nvargam),.]));
           j = j+1;
	    endo;
        gamma_sum[.,outside_good] = -1000*ones(nobs,1);	  
	    	
	    clear alpha_mult,gamma_mult;
		all_alpha_un = 	1/(1+exp(alpha_sum));	
        gamma_req = exp(gamma_sum);		
        all_gamma1 = -((gamma_req[.,igamma])./(dta[.,flagchm[.,igamma]] + gamma_req[.,igamma]));
		denom = all_alpha_un./(dta[.,flagchm~flagchmo]+gamma_req);
		denom[.,igamma] = denom[.,igamma].*all_gamma1;
		
		b_gamma = dta[.,flagchm~flagchmo] .> 0;	// 1 if chosen, 0 if not
		all_gamma2 = zeros(nobs,nc-1);
		all_gamma2[.,igamma]= gamma_req[.,igamma]./all_alpha_un[.,igamma];
		b_inside = dta[.,flagchm] .> 0;
				
		//****************************************************Jacobian Part
		  Jac1 = denom.*b_gamma;
	      Jac1 = Jac1./(dta[.,flagprcm]); 
	      Jac101 = substute(Jac1,b_gamma.==0,1);
	      
		  if(igamma==1);
		  jac1 = jac1[.,igamma]~Jac101[.,igamma+1:cols(Jac101)];
	      elseif(igamma==nc-1);
		  jac1 = Jac101[.,1:igamma-1]~jac1[.,igamma:cols(jac1)];
	      else;
		  jac1 = Jac101[.,1:igamma-1]~jac1[.,igamma]~Jac101[.,igamma+1:cols(jac101)];
	      endif;
	  
		  
		  Jac11 = ((dta[.,flagchm~flagchmo]+gamma_req))./(all_alpha_un);
	      Jac11 = Jac11./(dta[.,flagprcm]); 
	      Jac11 = Jac11.*b_gamma;
		  		  
		  Jad1 = sumc((Jac11'));
	      Jac1 = (prodc((Jac1'))).*Jad1;
		  
		//****************************************************
		  Jac2 = (all_alpha_un.*b_gamma)./((dta[.,flagchm~flagchmo]+gamma_req));
	      Jac2 = Jac2./(dta[.,flagprcm]); 
	      Jac2 = substute(Jac2,b_gamma.==0,1);
		  
		  Jac22 = all_gamma2;
	      Jac22 = jac22.*b_inside;
		  
		  Jad2 = sumc((Jac22'));
	      Jac2 = (prodc((Jac2'))).*Jad2;
		//******************************************************
		  Diff_Jacobian = Jac1 + Jac2;
		  clear Jac1,Jac11,Jae1,Jad1,Jac2,Jac22,Jad2;
		//********************************************Utility Part
		gamma_uti = zeros(nobs,nc-1);
		gamma_uti[.,igamma] = -(dta[.,flagchm[igamma]]);
		
		diff_utility_gamma = - (all_alpha_un[.,1:nc-1]./ (dta[.,flagchm]+gamma_req[.,1:nc-1]));
		diff_utility_gamma = (diff_utility_gamma.*gamma_uti);
		
		if(Mean_Negative eq 1);
		    diff_mat1 = -(reshape(diff_utility_gamma,nind*(nc-1),1));
	    else;
		    diff_mat1 = (reshape(diff_utility_gamma,nind*(nc-1),1));
		endif;
		
		clear all_alpha_un,gamma_req,all_gamma1,denom,all_gamma2,alpha_sum,gamma_sum,gamma_uti,b_gamma,diff_utility_gamma;
		
        seednext = seed30; 
		Total_g = 0;
	    
		for pair1(1,nind,1);
		    			
			p1v = {}; p1_mean = {}; p1d_mean = {}; 
			            p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
						p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
						p1d_mean = p1d_mean ~ diff_mat1[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
			
		        for pair2(pair1+1,nind,1);
				    					
					    p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2d_mean = {}; meand = {};
					
							if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									p2d_mean = p2d_mean ~ diff_mat1[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									meand = meand | p1d_mean;
									meand = meand | p2d_mean;
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1)-Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
									if(Total_NC == 2*(nc-1));
										om = diag(co_var);
										Mean_NC_final = mean'./(sqrt(om'));
										Var_NC_final = corrvc(co_var);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										
										Mean_NCd = meand;
										Mean_NCd_changed  = Mean_NCd;	
										Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
										
										seed20=seednext;
									    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
							             shi_a = (g[1,1:Total_NC])';
								         seednext = s2;
										
										 
								  
								        if(w eq upper_limit OR w lt upper_limit);
                                           g_part3 = 0;
							            else;
								          g_part3 = (1/w)*(Mean_NCd_final' * shi_a);
										  clear g,shi_a;
								        endif;

                                         g_part2 = 0;
										 g_part11 = (1/(Jacobian[pair1]*Jacobian[pair2]));
										 g_part12 = (Jacobian[pair1]*Diff_Jacobian[pair2]) + (Diff_Jacobian[pair1]*Jacobian[pair2]);
										 g_part1 = g_part11*g_part12;
										 
										 clear Mean_NC_final,Var_NC_final,Mean_NCd,meand,Mean_NCd_changed,Mean_NCd_final,g,R,co_var,mean;
									 elseif(Total_C == 2*(nc-1));
										 Mean_C = mean;
										 Var_C = co_var;
										 Mean_Cd = meand;
										 
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										 
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part2 = 0;
										 else;	
											g_part2 = (1/prob_org1)*(Mean_Cd' * phi_a);
										endif;
																	 
										 g_part3 = 0;
										 g_part11 = (1/(Jacobian[pair1]*Jacobian[pair2]));
										 g_part12 = (Jacobian[pair1]*Diff_Jacobian[pair2]) + (Diff_Jacobian[pair1]*Jacobian[pair2]);
										 g_part1 = g_part11*g_part12;
										 clear Mean_C,Var_C,Mean_Cd,meand,R,co_var,mean;
									 else;
										 RNC = R[1:Total_NC,1:2*(nc-1)];
										 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

										 Mean_C = RC*mean;
										 Mean_NC = RNC*mean;
											
										 Var_C = RC*co_var*RC';
										 Var_NC = RNC*co_var*RNC';
										 Var_NCC = RNC*co_var*RC';
											
																		
										 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
										 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
											
										 om = diag(Var_NC_changed);
										 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
										 Var_NC_final = corrvc(Var_NC_changed);
										 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
											
										 //*****************************************************************************	
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										
										 Mean_Cd = RC*meand;
																					
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part2 = 0;
										 else;	
											g_part2 = (1/prob_org1)*(Mean_Cd' * phi_a);
										endif;
										//******************************************************************************
										 Mean_NCd = RNC*meand;
										 Mean_NCd_changed  = Mean_NCd - (Var_NCC*(inv(Var_C))*Mean_Cd);	
										 Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
										 
										  if(Total_NC == 1);
												 w = cdfMvn(Mean_NC_final,Var_NC_final);
												 shi_a = pdfn(Mean_NC_final);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part3 = 0;
												 else;	
													g_part3 = (1/w)*(Mean_NCd_final' * shi_a);
												 endif;
										  elseif(Total_NC == 2);
												 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part3 = 0;
												 else;	
													g_part3 = (1/w)*(Mean_NCd_final' * shi_a[1:2,1]);
												 endif;										 
										  else;
										         seed20 = seednext;
												 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
							                      shi_a = (g[1,1:Total_NC])';
												  seednext = s2;
												 												  
										  
									             if(w eq upper_limit OR w lt upper_limit);
                                                    g_part3 = 0;
										         else;
											        g_part3 = (1/w)*(Mean_NCd_final' * shi_a);
													clear g,shi_a;
										         endif;

      							          endif;
										 
											 g_part11 = (1/(Jacobian[pair1]*Jacobian[pair2]));
										     g_part12 = (Jacobian[pair1]*Diff_Jacobian[pair2]) + (Diff_Jacobian[pair1]*Jacobian[pair2]);
											 g_part1 = g_part11*g_part12;
											 clear Mean_C,Var_C,Mean_NC,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_Cd,Mean_NCd,meand,Mean_NCd_changed;
											 clear Mean_NCd_final,shi_a,R,RNC,RC,co_var,mean; 
								    endif;
											 Total_g = Total_g +g_part1 + g_part2+ g_part3;
										 // ************************************************************************
								endif;
						
				           endfor;
			            endfor;
					            
		        clear Diff_Jacobian,diff_mat1;
                gamma_gradient = gamma_gradient ~ Total_g;
				endif;
    endfor;
    gamma_gradient = gamma_gradient ~ 0; 
    clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1d_mean,p2d_mean,g_part11,g_part12;
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

   Psi_gradient = {};
   for ipsi (1,nCholErr,1);
	  if(ipsi==1);
		  Psi_gradient = Psi_gradient ~ 0;
	  else;
		 
	    fix_check =_max_active[nvarm+nCholOmega+1+nc+ipsi];
				 
		 if(fix_check==0);
			 Psi_gradient = Psi_gradient ~ 0;
		 else;
			 
			    d_chol_Psi = zeros(nCholErr,1);d_chol_Psi[ipsi]=1;                         d_chol_Psi = upmat(xpnd(d_chol_Psi));
				d_Psi = d_chol_Psi'*chol_Psi + chol_Psi'*d_chol_Psi;      
				Psi_expand =  eye(nind).*.d_Psi;
				Final_Error = (S_matrix * Psi_expand * S_matrix');
				
				clear d_chol_Psi,d_Psi,Psi_expand;
				seednext = seed30; 
				Total_g = 0;
				
				for pair1(1,nind,1);
										
					p1v = {}; p1_mean = {}; p1v_d = {};
								p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1v_d = p1v_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
					
						for pair2(pair1+1,nind,1);
														
							     p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2v_d = {}; p1cv_d = {}; p2cv_d = {}; co_var_d = {};
							
										if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
											p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                            p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                            p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
                                            p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
											co_var = co_var ~ (p1v ~ p1cv);
											co_var = co_var | (p2cv ~ p2v);
											mean = mean | p1_mean;
											mean = mean | p2_mean;
											
											p2v_d = p2v_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
											p1cv_d = p1cv_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
											p2cv_d = p2cv_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
											co_var_d = co_var_d ~ (p1v_d ~ p1cv_d);
											co_var_d = co_var_d | (p2cv_d ~ p2v_d);
											
											pair1_chose = Chosen_Alternative[pair1,.];
											pair2_chose = Chosen_Alternative[pair2,.];
											alt_list = pair1_chose'|pair2_chose';
											R = zeros(2*(nc-1),2*(nc-1)); 
											Total_NC = 2*(nc-1)-sumc(alt_list);
											Total_C = 2*(nc-1)-Total_NC;
											counter = 0;
											for i(1,2*(nc-1),1);
												if(alt_list[i]==0);
												   counter = counter+1;
												   R[counter,i]=1;
												endif;
											endfor;
											
											for j(1,2*(nc-1),1);
												if(alt_list[j]==1);
												   counter = counter+1;
												   R[counter,j]=1;
												endif;
											endfor;	
											
											if(Total_NC == 2*(nc-1));
												om = diag(co_var);
												Mean_NC = mean;
												Mean_NC_changed = Mean_NC;
												Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
												Var_NC_changed = co_var ;
												Var_NC_final = corrvc(Var_NC_changed);
												Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
												
												Mean_NCd_changed  = zeros(Total_NC,1);
												Var_NCd_changed = co_var_d ;
											
												omncd = diag(Var_NCd_changed);
												Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
												Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
												Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
											
												shi_r_unq = {};
												for ishi(1,rows(Var_NCd_final)-1,1);
												   shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
												endfor;
																	
												seed20=seednext;
											    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
									            shi_a = (g[1,1:Total_NC])';
									            shi_r = (g[1,Total_NC+1:cols(g)])';
											    seednext = s2;
												
												if(w eq upper_limit OR w lt upper_limit);
									               g_part2 = 0;
									            else;
									               g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
												   clear g,shi_a,shi_r;
									            endif;

									            g_part1 = 0;
												clear Mean_NC,Mean_NC_final,Var_NC_final,Mean_NCd_changed,Var_NCd_changed,om,omncd,Mean_NCd_final,Var_NCd_final,shi_r_unq,shi_a,shi_r,g,R,co_var,co_var_d,mean,om1,omncd1;
											elseif(Total_C == 2*(nc-1));
												 Mean_C = mean;
												 Var_C = co_var;
												 Var_Cd = co_var_d;
												 phi_r = pdfgcov(Mean_C,vech(Var_C));
												 prob_org1 = pdfmvn(Mean_C,Var_C);
												
												 phi_rd_unq = (vech(Var_Cd))';
																				 
												 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
													g_part1 = 0;
												 else;	
													g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
												 endif; 
												 
												 g_part2 = 0;
												 clear Mean_C,Var_C,Var_Cd,phi_r,phi_r_unq,phi_rd_unq,R,co_var,co_var_d,mean; 
											 else;
												 RNC = R[1:Total_NC,1:2*(nc-1)];
												 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

												 Mean_C = RC*mean;
												 Mean_NC = RNC*mean;
											
												 Var_C = RC*co_var*RC';
												 Var_NC = RNC*co_var*RNC';
												 Var_NCC = RNC*co_var*RC';
											
												 Var_Cd = RC*co_var_d*RC';
												 Var_NCd = RNC*co_var_d*RNC';
												 Var_NCCd = RNC*co_var_d*RC';
												
											
												 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
												 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
											
												 om = diag(Var_NC_changed);
												 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
												 Var_NC_final = corrvc(Var_NC_changed);
												 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
											
											  //*****************************************************************************	
												 phi_r = pdfgcov(Mean_C,vech(Var_C));
												 prob_org1 = pdfmvn(Mean_C,Var_C);
												
												 phi_rd_unq = (vech(Var_Cd))';
												
												 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
													g_part1 = 0;
												 else;	
													g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
												 endif; 
											 //******************************************************************************
												 Mean_NCd_changed  =  - (Var_NCCd*(inv(Var_C))*Mean_C) + (Var_NCC * (inv(Var_C)) * Var_Cd *(inv(Var_C))*  Mean_C);	
												 Var_NCd_changed = Var_NCd - (Var_NCCd*(inv(Var_C))*Var_NCC') + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))*  Var_NCC') - (Var_NCC*(inv(Var_C))*Var_NCCd');
												 
												 omncd = diag(Var_NCd_changed);
												 Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
												 Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
												 Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
												 
																				
												 if(Total_NC == 1);
													 w = cdfMvn(Mean_NC_final,Var_NC_final);
													 shi_a = pdfn(Mean_NC_final);
													 if(w eq upper_limit OR w lt upper_limit);
														 g_part2 = 0;
													 else;	
													 g_part2 = (1/w)*(Mean_NCd_final * shi_a);
													 endif;
													
												 elseif(Total_NC == 2);
													 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
													 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
													 if(w eq upper_limit OR w lt upper_limit);
														 g_part2 = 0;
													 else;	
														g_part2 = (1/w)*(Mean_NCd_final * shi_a[1:2,1] + Var_NCd_final[1,2]*shi_a[3,1]);
													endif;	
												 else;
													 seed20=seednext;	
													 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
													  shi_a = (g[1,1:Total_NC])';
													  shi_r = (g[1,Total_NC+1:cols(g)])';
													  seednext = s2;
													 									 
													 
													 shi_r_unq = {};
													 for ishi(1,rows(Var_NCd_final)-1,1);
														shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
													 endfor;
													   
													   if(w eq upper_limit OR w lt upper_limit);
														  g_part2 = 0;
													   else;
														 g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
														 clear g,shi_a,shi_r;
													   endif;

													   clear shi_r_unq;
									          endif;
												 clear Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Var_Cd,Var_NCd,Var_NCCd,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_NCd_changed;
												 clear Var_NCd_changed,Mean_NCd_final,Var_NCd_final,R,RNC,RC,shi_a;
												 clear om,omncd,co_var,co_var_d,mean;
											 endif;
												 
													Total_g = Total_g +g_part1 + g_part2;
															
										endif;
										
							   endfor;
						  endfor;
					
					  
				clear Final_error;
				Psi_gradient = Psi_gradient ~ Total_g;
			endif;
		endif;
	endfor;
     clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1v_d,p2v_d,p1cv_d,p2cv_d,fix_check;
  
 //------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
  delta_gradient = {};
			for idel(1,nc-1,1);
				
				fix_check =_max_active[nvarm+nCholOmega+1+nc+nCholErr+idel];
					
				if(fix_check==0);
					delta_gradient = delta_gradient ~ 0;
				else;
					
				
						del_required = zeros(nc-1,1);   del_required[idel] = 1;     dell = del_required .* dd_del;
						ddelta = zeros(nc-1,nc-1); ddelta = diagrv(ddelta,dell);
						
						d_Sq1 = (ones(nind,nind).*.ddelta);
						d_Sq2 = d_Sq1 .* (weightM1.*.eye(nc-1));
						d_capS = S_matrix * d_Sq2 * S_matrix;
						
						v2 = (ones(nc-1,1) .*. smallB )*~(X_subtracted)';
						j=1;
						v = {};
						do until j == nc;
						   v = v~(sumc(v2[(j-1)*nvarm+1:(j*nvarm),.]));
						   j = j+1;
						endo;
					
						clear v2;
					  
						 v = reshape(v,nind*(nc-1),1);
						 capV = d_capS * v;
						 clear v;
					
						 if(Mean_Negative eq 1);
							Delta_Mean = -(capV);
						 else;
							Delta_Mean = (capV);
						 endif;
						 
						 
						 clear capV;
						 
						 Delta_error = (d_capS*Pure_error*S_matrix') + (S_matrix * pure_error* d_capS');
						 
						 						  
						 clear d_capS;	
						 seednext = seed30;
						 Total_g = 0; 
						 				
							for pair1(1,nind,1);
										
										p1v = {}; p1_mean = {}; p1v_d = {}; p1d_mean = {};
											
											p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
											p1v_d = p1v_d ~ Delta_error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
											p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
											p1d_mean = p1d_mean ~ Delta_Mean[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
											
									for pair2(pair1+1,nind,1);
										
										
											 meand = {}; p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2v_d = {}; p1cv_d = {}; p2cv_d = {}; co_var_d = {}; p2d_mean = {};
										
													if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
														
														p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
														p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
														co_var = co_var ~ (p1v ~ p1cv);
														co_var = co_var | (p2cv ~ p2v);
														mean = mean | p1_mean;
														mean = mean | p2_mean;
														
														p2v_d = p2v_d ~ Delta_error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p1cv_d = p1cv_d ~ Delta_error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p2cv_d = p2cv_d ~ Delta_error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
														p2d_mean = p2d_mean ~ Delta_Mean[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
														co_var_d = co_var_d ~ (p1v_d ~ p1cv_d);
														co_var_d = co_var_d | (p2cv_d ~ p2v_d);
														meand = meand | p1d_mean;
														meand = meand | p2d_mean;
														
														pair1_chose = Chosen_Alternative[pair1,.];
														pair2_chose = Chosen_Alternative[pair2,.];
														alt_list = pair1_chose'|pair2_chose';
														R = zeros(2*(nc-1),2*(nc-1)); 
														Total_NC = 2*(nc-1)-sumc(alt_list);
														Total_C = 2*(nc-1)-Total_NC;
														counter = 0;
														for i(1,2*(nc-1),1);
															if(alt_list[i]==0);
															   counter = counter+1;
															   R[counter,i]=1;
															endif;
														endfor;
														
														for j(1,2*(nc-1),1);
															if(alt_list[j]==1);
															   counter = counter+1;
															   R[counter,j]=1;
															endif;
														endfor;	
														
																											
														if(Total_NC == 2*(nc-1));
															om = diag(co_var);
															Mean_NC = mean;
															Mean_NC_changed  =  Mean_NC;
															Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
															Var_NC_changed = co_var ;
															Var_NC_final = corrvc(Var_NC_changed);
															Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
															
															Mean_Cd = meand;
															Mean_NCd = meand;
															Var_NCd = co_var_d;
															Mean_NCd_changed  =  Mean_NCd;
															Var_NCd_changed = Var_NCd;
														
															omncd = diag(Var_NCd_changed);
															Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
															Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(3/2)) .* om  + (Var_NC_changed ./(om^(3/2)) .* om )' ./(om^(3/2)) .* omncd ) ;
															Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
														
															shi_r_unq = {};
															for ishi(1,rows(Var_NCd_final)-1,1);
															   shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
															endfor;
																				
															seed20=seednext;
															{w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
														     shi_a = (g[1,1:Total_NC])';
															 shi_r = (g[1,Total_NC+1:cols(g)])';
															 seednext = s2;
																														  
														
															if(w eq upper_limit OR w lt upper_limit);
																g_part2 = 0;
															else;
																g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
																clear g,shi_a,shi_r;
															endif;
															
															g_part1 = 0;
															clear Mean_NC_changed,Mean_Cd,Mean_NCd,Mean_NC,Mean_NC_final,Var_NC_final,Mean_NCd_changed,Var_NCd_changed,om,omncd,Mean_NCd_final,Var_NCd_final,shi_r_unq,shi_a,shi_r,g,R,co_var,co_var_d,mean,om1,omncd1;
														elseif(Total_C == 2*(nc-1));
															 Mean_C = mean;
															 Mean_cd = meand;
															 Var_C = co_var;
															 Var_Cd = co_var_d;
															 phi_a = pdfgmean(Mean_C,Var_C);
															 phi_r = pdfgcov(Mean_C,vech(Var_C));
															 prob_org1 = pdfmvn(Mean_C,Var_C);
															
															 phi_rd_unq = (vech(Var_Cd))';
															
															 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
																 g_part1 = 0;
															 else;
																 g_part1 = (1/prob_org1)*(Mean_cd'*phi_a + phi_rd_unq*phi_r);
															 endif;
															 
															 g_part2 = 0;
															 clear Mean_C,Var_C,Var_Cd,phi_r,phi_r_unq,phi_rd_unq,R,co_var,co_var_d,mean; 
														 else;
															 RNC = R[1:Total_NC,.];
															 RC =  R[Total_NC+1:2*(nc-1),.];

															 Mean_C = RC*mean;
															 Mean_NC = RNC*mean;
															 
															 Mean_Cd = RC*meand;
															 Mean_NCd = RNC*meand;
														
															 Var_C = RC*co_var*RC';
															 Var_NC = RNC*co_var*RNC';
															 Var_NCC = RNC*co_var*RC';
														
															 Var_Cd = RC*co_var_d*RC';
															 Var_NCd = RNC*co_var_d*RNC';
															 Var_NCCd = RNC*co_var_d*RC';
															
														
															 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
															 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
														
															 om = diag(Var_NC_changed);
															 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
															 Var_NC_final = corrvc(Var_NC_changed);
															 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
														
														  //*****************************************************************************	
															 phi_a = pdfgmean(Mean_C,Var_C);
															 phi_r = pdfgcov(Mean_C,vech(Var_C));
															 prob_org1 = pdfmvn(Mean_C,Var_C);
															
															 phi_rd_unq = (vech(Var_Cd))';
															
															 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
																 g_part1 = 0;
															 else;
																 g_part1 = (1/prob_org1)*(Mean_cd'*phi_a + phi_rd_unq*phi_r);
															 endif;
															 
															 //******************************************************************************
															 Mean_NCd_changed  =  Mean_NCd - (Var_NCC*(inv(Var_C))*Mean_Cd)	- (Var_NCCd*(inv(Var_C))*Mean_C) + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Mean_C);	
															 Var_NCd_changed = Var_NCd - (Var_NCCd*(inv(Var_C))*Var_NCC') + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Var_NCC') - (Var_NCC*(inv(Var_C))*Var_NCCd');
														
															 omncd = diag(Var_NCd_changed);
															 Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
															 Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(3/2)) .* om  + (Var_NC_changed ./(om^(3/2)) .* om )' ./(om^(3/2)) .* omncd ) ;
															 Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
														
																							
															 if(Total_NC == 1);
																 w = cdfMvn(Mean_NC_final,Var_NC_final);
																 shi_a = pdfn(Mean_NC_final);
																 if(w eq upper_limit OR w lt upper_limit);
																	 g_part2 = 0;
																 else;
																 g_part2 = (1/w)*(Mean_NCd_final * shi_a);
																 endif;
															elseif(Total_NC == 2);
																 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
																 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
																 if(w eq upper_limit OR w lt upper_limit);
																	 g_part2 = 0;
																 else;	
																	g_part2 = (1/w)*(Mean_NCd_final * shi_a[1:2,1] + Var_NCd_final[1,2]*shi_a[3,1]);
																 endif;	
														    else;
																seed20=seednext;
																{w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
																shi_a = (g[1,1:Total_NC])';
																shi_r = (g[1,Total_NC+1:cols(g)])';
																seednext = s2;
																 																
																 
																 shi_r_unq = {};
																 for ishi(1,rows(Var_NCd_final)-1,1);
																	shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
																 endfor;
																 
																  if(w eq upper_limit OR w lt upper_limit);
																	g_part2 = 0;
																  else;
																	g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
																	clear g,shi_a,shi_r;
																  endif;
																 
																  clear shi_r_unq;
														   endif;
															 clear Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Var_Cd,Var_NCd,Var_NCCd,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_NCd_changed;
															 clear Var_NCd_changed,Mean_NCd_final,Var_NCd_final,R,RNC,RC,shi_a;
															 clear om,omncd,co_var,co_var_d,mean;
													   endif;
																
																Total_g = Total_g +g_part1 + g_part2;
																
																
												endif;
													
										endfor;
									endfor;
					clear Delta_Mean,Delta_error;
					delta_gradient = delta_gradient ~ Total_g;
					
				endif;
				clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1v_d,p2v_d,p1cv_d,p2cv_d,p1_mean,p2_mean,p1d_mean,p2d_mean;
    endfor;

		

 gradient = zeros(1,rows(parm));
 gradient[1,.] = beta_gradient ~ OmTild_gradient ~ alpha_gradient ~ gamma_gradient ~ Psi_gradient ~ delta_gradient;
 retp(gradient);
 endp;

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
proc lpr2(parm,dta);
    local smallA,smallB,OmTild,Lambda,Psi,del,rho,chol_OmTild,chol_Lambda,chol_Psi,Sq; 
    local inc,ichocc,iind,capR,capC,capA,capS,e1;  
    local capH,capV,capB;
    local om,xdel,xgam,b,chosen_keep1;
    local time1,time2,time3,time4,time5,time6,time7;
    local i,j,option,p1,p2,p3;
	local u,v,w,u2,v2,w2,a,f,mq,chosen_keep,diff_mat,diff_mat1;
	local Jac,Jad,Jae,chosen_alt,Sq1,Sq2;
	local pair1_chose,pair2_chose,alt_list,R,RNC,RC,Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed, Mean_NC_final,Var_NC_final,counter;
    local Lamda_c,OmTild_c,psi_c,capF,M,iden_mat,one_vect,filler,altcc,sigma,count,dta_required,Total_NC;
	local individual_prob,pair1,pair2,pair1_t,pair2_t,p1v,p2v,p1cv,p2cv,p1_mean,p2_mean,co_var,mean,sss,seednext,chosen_keep2,Total_C,total_pair,del_matrix,outside_good;
    local outside_v,temparory,capV1,capVC,jac1,Tot_par1,pure_error1,sss1,sss2,Var_NC_final_tri,seed20;
	local OmTild_dig,OmTIld_dig_expand,OmTild1,OmTild2,OmTild3,OmTild_c1,vect,itild,x_req,betx,chol_OmTild1,p1_check,p2_check,store_pair;
    
	smallB      = parm[1:nvar];
    chol_OmTild = upmat(xpnd(parm[nvar+1:nvar+nCholOmega]));
    xdel        = eqmatdel'*parm[nvar+nCholOmega+1:nvar+nCholOmega+rows(eqmatdel)];
    xgam        = eqmatgam'*parm[nvar+nCholOmega+rows(eqmatdel)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)];
    chol_Psi    = upmat(xpnd(parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr]));
    del         = parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+rows(dgp_del)];
    
    
    outside_good = nc;	
	OmTild = zeros(nvar,nvar); OmTild[1:nran,1:nran] = chol_OmTild'*chol_OmTild;
	Psi = chol_Psi'*chol_Psi;
	del_matrix = zeros(nc-1,nc-1);
	del_matrix = diagrv(del_matrix,del);
    	
	v2 = (ones(nc-1,1) .*. smallB )*~(X_subtracted)';
    w2 = (ones(nc,1) .*. xdel)*~(dta[.,ivd])';
    u2 = (ones(nc,1) .*. xgam)*~(dta[.,ivg])';
    
	j=1;
    v = {};
    w = {};
    u = {};
    do until j == nc+1;
       w = w~(sumc(w2[(j-1)*nvardel+1:(j*nvardel),.]));
       u = u~(sumc(u2[(j-1)*nvargam+1:(j*nvargam),.]));
       j = j+1;
    endo;
    
    j=1;  
    do until j == nc;
	    v = v~(sumc(v2[(j-1)*nvar+1:(j*nvar),.]));
		j = j+1;
    endo;
	clear v2,w2,u2;
    
	Sq1 = (ones(nind,nind).*.del_matrix);
	Sq2 = Sq1 .* (weightM1.*.eye(nc-1));
		
    capS = inv( eye(nind*(nc-1))   -  Sq2 );
		
	v = reshape(v,nind*(nc-1),1);
	a = 1 - w; 		    // a is 1-alpha
	f = u;             // gamma
	
	capV = capS * v ;
	capV = reshape(capV,nind,nc-1);
	capVC = capV - (a[.,1:nc-1].* (ln((dta[.,flagchm]+f[.,1:nc-1])./f[.,1:nc-1])));	// deterministic component V
	outside_v = -1*(a[.,nc].*ln(dta[.,flagchmo]+f[.,nc]));
	capV1 = capVC - (ones(1,nc-1).*.outside_v);
	capB = reshape(capV1,nind*(nc-1),1);
	b = dta[.,flagchm~flagchmo] .> 0;	// 1 if chosen, 0 if not
	
	clear u,v,w;
//*************************************************************************************************
     Jac = (a.*b)./((dta[.,flagchm~flagchmo]+f));
	 Jac = Jac./(dta[.,flagprcm]); 
	 Jac = substute(Jac,b.==0,1);
	 
	 Jae = (1/Jac).*b;  
	 Jad = sumc((Jae'));
	 Jac = (prodc((Jac'))).*Jad;
	 clear a,f,b;
//************************************************************************************************
            
    OmTild_c =  eye(nind).*.OmTild;
	OmTild_c =  xTildec * OmTild_c * xTildec';
	psi_c = eye(nind).*.Psi;
	sigma = capS*(OmTild_c + psi_c)*capS';
    
	
	
//************************************************************************************************************************************************	
	if(Mean_Negative eq 1);
	  B_mat = -(capB); 
    else;
	  B_mat = (capB); 
    endif;
  
	sigma_mat = sigma; Jacobian = Jac; S_matrix = capS; Pure_error = (OmTild_c + psi_c); Chosen_Alternative = dta[.,flagchm] .> 0; 
	clear sigma,capV,OmTild_c,capC,psi_c,Jac1,capS;
	
	
	seednext = seed30; 
	individual_prob = 0;
	Tot_par1 = 0; 
    p1_check = 0;
	p2_check = 0;
	store_pair = {};
	for pair1(1,nind,1);
					
			p1v = {}; p1_mean = {};
			            p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
						p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
			
				for pair2(pair1+1,nind,1);
										
					      p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {};
					
							if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
									
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1) - Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
																		
									if(Total_NC == 2*(nc-1));
										p1 = 1;
										om = diag(co_var);
										Mean_NC_final = mean'./(sqrt(om'));
										Var_NC_final = corrvc(co_var);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										seed20=seednext;
										{p2,sss2} = cdfmvna(Mean_NC_final,Var_NC_final,seed20);
										 
										 if(p2 lt upper_limit);
											 p2 = 0.01;
											 p2_check = p2_check + 1;
										 else;
											 seednext = sss2;
										 endif;
										 
										 p3 = Jacobian[pair1]*Jacobian[pair2];
										 clear Mean_NC_final,Var_NC_final,om,R,co_var,mean;
								   elseif(Total_C == 2*(nc-1));
									   p1 = pdfmvn(mean,co_var);
									   
									   if(p1 eq upper_limit OR p1 lt upper_limit);
										   p1 = .01;
										   p1_check = p1_check + 1;
									   endif;
									   
									   p2 = 1;
									   p3 = Jacobian[pair1]*Jacobian[pair2];
									   clear co_var,mean,R;
								   else;
									   RNC = R[1:Total_NC,.];
									   RC =  R[Total_NC+1:2*(nc-1),.];
									   Mean_C = RC*mean;
									   Mean_NC = RNC*mean;
									
									   Var_C = RC*co_var*RC';
									   Var_NC = RNC*co_var*RNC';
									   Var_NCC = RNC*co_var*RC';
									
									
									   Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
									   Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
									   
									   om = diag(Var_NC_changed);
									   Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
									   Var_NC_final = corrvc(Var_NC_changed);
									   Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
									   
									   
									   seed20=seednext;
									   
									   p1 = pdfmvn(Mean_C,Var_C);
									   
									   
									   if(p1 eq upper_limit OR p1 lt upper_limit);
										   p1 = .01;
										   p1_check = p1_check + 1;
									   endif;
									   
									   
									   if(Total_NC == 1);
										   p2 = cdfMvn(Mean_NC_final',Var_NC_final);
										   
									   elseif(Total_NC == 2);
										   p2 = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
										   
									   
								       else;
									        {p2,sss2} = cdfmvna(Mean_NC_final,Var_NC_final,seed20);
									        
											seednext = sss2;
										     
									   endif;
									   
									   if( p2 lt upper_limit);
										   p2 = .01;
										   p2_check = p2_check + 1;
									   endif;
									   
									   p3 = Jacobian[pair1]*Jacobian[pair2];	
									   
									   clear RNC,RC,Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed,om,Mean_NC_final,Var_NC_final,co_var,mean,R;
								  endif;
								  
								    individual_prob = individual_prob + ln(p1*p2*p3);
						            Tot_par1 = Tot_par1 + 1;
									
												
					        endif;
						
				   endfor;
			   endfor;
	 
	 Tot_paring = Tot_par1;
	 retp(individual_prob);
 endp;
	
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
proc lgd2(parm,dta);
    local smallA,smallB,Lambda,Psi,del,rho,chol_OmTild,chol_Lambda,chol_Psi,Sq; 
    local inc,ichocc,iind,capR,capC,capA,capS,e1,seed20;  
    local capH,capV,capB;
    local om,omncd,gradient;
    local time1,time2,time3,time4,time5,time6,time7;
    local i,j,option,p1,p2,p3;
	local u,v,w,u2,v1,w2,v2,w1,a,f,mq,chosen_keep,diff_mat,diff_mat1,g,s1;
	local Jac,Jad,Jae,chosen_alt,xdel,xgam;
	local pair1_chose,pair2_chose,alt_list,R,RNC,RC,Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed, Mean_NC_final,Var_NC_final,counter;
    local Lamda_c,OmTild_c,psi_c,capF,M,iden_mat,one_vect,filler,altcc,sigma,count,dta_required,Total_NC;
	local individual_prob,pair1,pair2,pair1_t,pair2_t,p1v,p2v,p1cv,p2cv,p1_mean,p2_mean,co_var,mean,seednext;
	local beta_gradient,OmTild_gradient,smalla_gradient,Lamda_gradient,Psi_gradient,delta_gradient,rho_gradient,alpha_gradient,gamma_gradient;
	local iatr,forgx,forgcapV,Total_g,p1d_mean,p2dmean,meand,phi_a,phi_r,prob_orig1,Mean_NCd,Mean_NCd_changed,Mean_NCd_final,dd_del,dd_rho;
	local shi_a,shi_r,g_part1,g_part2,g_part3,phi_r_unq,phi_rd_unq,iphi,ishi,shi_r_unq;
	local ichol,d_chol_OmTild,d_OmTild,OmTild_expand,OmTild,F_OmTild,Final_Error,p1v_d,p2v_d,p1cv_d,p2cv_d,co_var_d;
	local Var_Cd,Var_NCd,Var_NCCd,Var_NCd_changed,Var_NCd_final,Mean_Cd,d_capA,d_chol_Lamda,d_Lamda,Lamda_expand,F_Lamda;
	local d_chol_Psi,d_Psi,Psi_expand,Psi_intoc,F_Psi,d_Sq,d_capS,Delta_Mean,F_Delta,Delta_error;
	local d_capC1,d_capC2,d_capC,F_rho,Frho_error,ialpha,igamma,alpha,gammanew,alpha_mult,gamma_mult,alpha_sum,gamma_sum;
	local gamma_req,all_alpha1,all_alpha_un,alpha_req1,alpha_req2,b_alpha,Jac1,Jac11,Jad1,Jae1,Diff_Jacobian,diff_utility_gamma;
	local all_gamma1,denom,b_gamma,all_gamma2,gamma_uti,p2d_mean,Total_C,prob_org1,d_chol_Lambda,d_Lambda,all_alpha2,Jac2,Jac22,Jad2,Jae2,g_part11,g_part12;
	local om1,omncd1,om2,kel,Var_Cd1,g_part22,d1_OmTild;
	local del_required,dell,ddelta,d_Sq1,d_Sq2,outside_good,temparory,b_inside,jac101,s2,Var_NC_final_tri_grad,fix_check,chol_OmTild1;
	local OmTild_dig11,OmTild_dig_expand11,OmTild11,x_reqg,betxg,sss2,store_grad;
	local All_G_Store1,All_G_Store2,temp_count,Total_g1,All_G_Store1_active,All_G_Store2_active,pair_count;

    outside_good = nc;
	smallB      = parm[1:nvar];
    chol_OmTild = upmat(xpnd(parm[nvar+1:nvar+nCholOmega]));
    xdel        = eqmatdel'*parm[nvar+nCholOmega+1:nvar+nCholOmega+rows(eqmatdel)];
    xgam        = eqmatgam'*parm[nvar+nCholOmega+rows(eqmatdel)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)];
    chol_Psi    = upmat(xpnd(parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr]));
    del         = parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+rows(dgp_del)];

    dd_del = ones(nc-1,1);
    All_G_Store1 = zeros(nobs,rows(parm));
	All_G_Store2 = zeros(nobs,rows(parm));
//-----------------------------------------------------------------------------------------------------------------------------------
    beta_gradient = {};
    for iatr(1,nvarm,1);
	     forgx = smallB*0;forgx[iatr]=1;
		 
		if(_max_active[iatr]==0);
			beta_gradient = beta_gradient ~ 0;
			
			
	    else;
				 v1 = (ones(nc-1,1) .*. forgx )*~(X_subtracted)';
				 j=1;
				 v = {};
				 do until j == nc;
					 v = v~(sumc(v1[(j-1)*nvarm+1:(j*nvarm),.]));
					 j = j+1;
				 endo;
				
				v = reshape(v,nind*(nc-1),1);
				
			   if(Mean_Negative eq 1);
				   diff_mat1 = -(S_matrix*v);
			   else;
				   diff_mat1 = (S_matrix*v);
			   endif;
			   
        
		
				seednext = seed30; 
				Total_g = 0;
				for pair1(1,nind,1);
					temp_count = 0;	Total_g1 = 0;				
					p1v = {}; p1_mean = {}; p1d_mean = {}; 
								
                                     p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
                                     p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];								
				                     p1d_mean = p1d_mean ~ diff_mat1[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
					
						for pair2(pair1+1,nind,1);
							
							
							        p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2d_mean = {}; meand = {};
							
								if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
									
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                    p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                    p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
                                    p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									p2d_mean = p2d_mean ~ diff_mat1[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									meand = meand | p1d_mean;
									meand = meand | p2d_mean;
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1)-Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
																		
									if(Total_NC == 2*(nc-1));
										om = diag(co_var);
										Mean_NC_final = mean'./(sqrt(om'));
										Var_NC_final = corrvc(co_var);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										
										Mean_NCd = meand;
										Mean_NCd_changed  = Mean_NCd;	
										Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
										
										seed20=seednext;
									    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
										 seednext = s2;
										 shi_a = (g[1,1:Total_NC])';
									     
									    					
										if(w eq upper_limit OR w lt upper_limit);
											g_part2 = 0;
										else;
										   g_part2 = (1/w)*(Mean_NCd_final' * shi_a);
										   clear g,shi_a;
										endif;
												
										g_part1 = 0;
												 
										clear Mean_NC_final,Var_NC_final,Mean_NCd,meand,Mean_NCd_changed,Mean_NCd_final,R,co_var,mean;
									 elseif(Total_C == 2*(nc-1));
										 Mean_C = mean;
										 Var_C = co_var;
										 Mean_Cd = meand;
										 
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										 
										 
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(Mean_Cd' * phi_a);
										 endif;
										
										 g_part2 = 0;
										 clear Mean_C,Var_C,Mean_Cd,meand,R,co_var,mean;
									 else;
										 RNC = R[1:Total_NC,1:2*(nc-1)];
										 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

										 Mean_C = RC*mean;
										 Mean_NC = RNC*mean;
										 
										 Mean_Cd = RC*meand;
										 Mean_NCd = RNC*meand;
									
										 Var_C = RC*co_var*RC';
										 Var_NC = RNC*co_var*RNC';
										 Var_NCC = RNC*co_var*RC';
									
																
										 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
										 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
									
										 om = diag(Var_NC_changed);
										 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
										 Var_NC_final = corrvc(Var_NC_changed);
										 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
									
										//*****************************************************************************	
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
									
																											
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(Mean_Cd' * phi_a);
										 endif;
										
										   
										 //******************************************************************************
										 Mean_NCd_changed  = Mean_NCd - (Var_NCC*(inv(Var_C))*Mean_Cd);	
										 Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
											
																					
											 if(Total_NC == 1);
												 w = cdfMvn(Mean_NC_final,Var_NC_final);
												 shi_a = pdfn(Mean_NC_final);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part2 = 0;
												 else;	
													g_part2 = (1/w)*(Mean_NCd_final' * shi_a);
												 endif;
											 elseif(Total_NC == 2);
												 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part2 = 0;
												 else;	
													g_part2 = (1/w)*(Mean_NCd_final' * shi_a[1:2,1]);
												 endif;										 
											  
											 else;
												 seed20=seednext;
												 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
												 seednext = s2;
												  shi_a = (g[1,1:Total_NC])';
													 
																		
													if(w eq upper_limit OR w lt upper_limit);
														g_part2 = 0;
													else;
													   g_part2 = (1/w)*(Mean_NCd_final' * shi_a);
													   clear g,shi_a;
													endif;	  
																																						
												 
											  endif;
										clear Mean_C,Var_C,Mean_NC,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_Cd,Mean_NCd,meand,Mean_NCd_changed;
										clear Mean_NCd_final,R,RNC,RC,co_var,mean,shi_a;
									 endif;
										   
										   Total_g = Total_g +g_part1 + g_part2; 
										   Total_g1 = Total_g1 +g_part1 + g_part2;
										   temp_count = temp_count + 1;   
										//*****************************************************************************
								endif;
								
							endfor;
							All_G_Store1[pair1,iatr] = Total_g1;
							if(temp_count ne 0);
			                All_G_Store2[pair1,iatr] = (Total_g1/temp_count);
							endif;
						endfor;
						
				clear diff_mat1;
				beta_gradient = beta_gradient ~ Total_g;
		endif;
			
  endfor;
  clear forgx,p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1d_mean,p2d_mean,p1_mean,p2_mean;
  
  //--------------------------------------------------------------------------------------------------------------------------------
  
    OmTild_gradient = {};
	for ichol (1,nCholOmega,1);
		
	    if(_max_active[nvarm+ichol]==0);
		   OmTild_gradient = OmTild_gradient ~ 0;
	    else;
				d_chol_OmTild = zeros(nCholOmega,1);            d_chol_OmTild[ichol]=1;                         
		        d_chol_OmTild = upmat(xpnd(d_chol_OmTild));
                d1_OmTild = d_chol_OmTild'*chol_OmTild + chol_OmTild'*d_chol_OmTild;  d_OmTild = zeros(nvar,nvar);  d_OmTild[1:nran,1:nran] = d1_OmTild; 
                
                				
                OmTild_expand =  eye(nind).*.d_OmTild;
	            OmTild =  (xTildec * OmTild_expand * xTildec');
		        Final_Error = (S_matrix * OmTild * S_matrix');
				
				clear d_chol_OmTild,d_OmTild,OmTild_dig11,OmTild_dig_expand11,OmTild11,x_reqg,betxg;
				
				seednext = seed30; 
				Total_g = 0;
				for pair1(1,nind,1);
					   temp_count = 0; 	Total_g1 = 0;				
					   p1v = {}; p1_mean = {}; p1v_d = {};
								p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1v_d = p1v_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
					
						for pair2(pair1+1,nind,1);
							
							
							  p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2v_d = {}; p1cv_d = {}; p2cv_d = {}; co_var_d = {};
							
								if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									p2v_d = p2v_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv_d = p1cv_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv_d = p2cv_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									co_var_d = co_var_d ~ (p1v_d ~ p1cv_d);
									co_var_d = co_var_d | (p2cv_d ~ p2v_d);
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1)-Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
									if(Total_NC == 2*(nc-1));
										om = diag(co_var);
										Mean_NC = mean;
										Mean_NC_changed = Mean_NC;
										Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
										Var_NC_changed = co_var ;
										Var_NC_final = corrvc(Var_NC_changed);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										
										Mean_NCd_changed  = zeros(Total_NC,1);
										Var_NCd_changed = co_var_d ;
									
										omncd = diag(Var_NCd_changed);
										Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
										Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
										Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
									
										shi_r_unq = {};
										for ishi(1,rows(Var_NCd_final)-1,1);
										   shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
										endfor;
															
										seed20=seednext;
									    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
										shi_a = (g[1,1:Total_NC])';
										shi_r = (g[1,Total_NC+1:cols(g)])';
										seednext = s2;
											   
									   if(w eq upper_limit OR w lt upper_limit);
										   g_part2 = 0;
									   else;
										  g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
										  clear g,shi_a,shi_r;
									   endif;
									  
										g_part1 = 0;
										
										clear Mean_NC,Mean_NC_final,Var_NC_final,Mean_NCd_changed,Var_NCd_changed,om,omncd,Mean_NCd_final,Var_NCd_final,shi_r_unq,R,co_var,co_var_d,mean,om1,omncd1;
									elseif(Total_C == 2*(nc-1));
										 Mean_C = mean;
										 Var_C = co_var;
										 Var_Cd = co_var_d;
										 phi_r = pdfgcov(Mean_C,vech(Var_C));
										 prob_org1 = pdfmvn(Mean_C,Var_C);
									
										 phi_rd_unq = (vech(Var_Cd))';
																		 
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
										 endif;
										 g_part2 = 0;
										 clear Mean_C,Var_C,Var_Cd,phi_r,phi_r_unq,phi_rd_unq,R,co_var,co_var_d,mean; 
									 else;
										 RNC = R[1:Total_NC,1:2*(nc-1)];
										 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

										 Mean_C = RC*mean;
										 Mean_NC = RNC*mean;
									
										 Var_C = RC*co_var*RC';
										 Var_NC = RNC*co_var*RNC';
										 Var_NCC = RNC*co_var*RC';
									
										 Var_Cd = RC*co_var_d*RC';
										 Var_NCd = RNC*co_var_d*RNC';
										 Var_NCCd = RNC*co_var_d*RC';
										
										 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
										 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
									
										 om = diag(Var_NC_changed);
										 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
										 Var_NC_final = corrvc(Var_NC_changed);
										 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
									
									  //*****************************************************************************	
										 phi_r = pdfgcov(Mean_C,vech(Var_C));
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										
										 phi_rd_unq = (vech(Var_Cd))';
											
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
										 endif;
										 
									 //******************************************************************************
										 Mean_NCd_changed  =  - (Var_NCCd*(inv(Var_C))*Mean_C) + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Mean_C);	
										 Var_NCd_changed = Var_NCd - (Var_NCCd*(inv(Var_C))*Var_NCC') + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Var_NCC') - (Var_NCC*(inv(Var_C))*Var_NCCd');
										 
										 omncd = diag(Var_NCd_changed);
										 Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
										 Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
										 Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
										 
																		
										if(Total_NC == 1);
											 w = cdfMvn(Mean_NC_final,Var_NC_final);
											 shi_a = pdfn(Mean_NC_final);
											 if(w eq upper_limit OR w lt upper_limit);
												 g_part2 = 0;
											 else;	
											 g_part2 = (1/w)*(Mean_NCd_final * shi_a);
											 endif;
										elseif(Total_NC == 2);
											 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
											 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
											 if(w eq upper_limit OR w lt upper_limit);
												 g_part2 = 0;
											 else;	
												g_part2 = (1/w)*(Mean_NCd_final * shi_a[1:2,1] + Var_NCd_final[1,2]*shi_a[3,1]);
											 endif;	
										else;
											 seed20 = seednext;	
											 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
											 shi_a = (g[1,1:Total_NC])';
											 shi_r = (g[1,Total_NC+1:cols(g)])';
											 seednext = s2;
									          
											 shi_r_unq = {};
											 for ishi(1,rows(Var_NCd_final)-1,1);
												shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
											 endfor;
											
																						   
												
											   if(w eq upper_limit OR w lt upper_limit);
												   g_part2 = 0;
											   else;
												  g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
												  clear shi_a,shi_r;
											   endif;
											 
											   clear shi_r_unq;
										 endif;
										 clear Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Var_Cd,Var_NCd,Var_NCCd,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_NCd_changed;
										 clear Var_NCd_changed,Mean_NCd_final,Var_NCd_final,R,RNC,RC,shi_a;
										 clear om,omncd,co_var,co_var_d,mean,om1,omncd1;
									 endif;
											
											Total_g = Total_g +g_part1 + g_part2;
											Total_g1 = Total_g1 +g_part1 + g_part2;
										    temp_count = temp_count + 1;				
											
								//*****************************************************************************
									
								endif;
								
							endfor;
							All_G_Store1[pair1,(nvarm+ichol)] = Total_g1;
							if(temp_count ne 0);
			                All_G_Store2[pair1,(nvarm+ichol)] = (Total_g1/temp_count);
							endif;
						endfor;
					
				clear Final_Error;
				OmTild_gradient = OmTild_gradient ~ Total_g;
		endif;
			
  endfor;
  clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1v_d,p2v_d,p1cv_d,p2cv_d;
  
  
  //-------------------------------------------------------------------------------------------------------------------------------------------
	
  alpha_gradient = {}; alpha_gradient = alpha_gradient ~ 0;
  
  //-------------------------------------------------------------------------------------------------------------------------------------------
  
  gamma_gradient = {};
	for igamma(1,nc-1,1);
		if(_max_active[nvarm+nCholOmega+1+igamma]==0);
		   gamma_gradient = gamma_gradient ~ 0;
		else; 
		
		  alpha = xdel; 
		  gammanew = xgam;
		  alpha_mult = (ones(nc,1) .*. alpha)*~(dta[.,ivd])';
		  gamma_mult = (ones(nc,1) .*. gammanew)*~(dta[.,ivg])';
		
        alpha_sum = {}; gamma_sum = {}; j=1;		
		do until j == nc+1;
           alpha_sum = alpha_sum~(sumc(alpha_mult[(j-1)*nvardel+1:(j*nvardel),.]));
		   gamma_sum = gamma_sum~(sumc(gamma_mult[(j-1)*nvargam+1:(j*nvargam),.]));
           j = j+1;
	    endo;
        
	    	
	    clear alpha_mult,gamma_mult;
		all_alpha_un = 	1-alpha_sum;	
        gamma_req = gamma_sum;		
        all_gamma1 = -(1./(dta[.,flagchm[.,igamma]] + gamma_req[.,igamma]));
		denom = all_alpha_un./(dta[.,flagchm~flagchmo]+gamma_req);
		denom[.,igamma] = denom[.,igamma].*all_gamma1;
		
		b_gamma = dta[.,flagchm~flagchmo] .> 0;	// 1 if chosen, 0 if not
		all_gamma2 = zeros(nobs,nc-1);
		all_gamma2[.,igamma]= 1/all_alpha_un[.,igamma];
		b_inside = dta[.,flagchm] .> 0;
				
		//****************************************************Jacobian Part
		  Jac1 = denom.*b_gamma;
	      Jac1 = Jac1./(dta[.,flagprcm]); 
	      Jac101 = substute(Jac1,b_gamma.==0,1);
	      
		  if(igamma==1);
		  jac1 = jac1[.,igamma]~Jac101[.,igamma+1:cols(Jac101)];
	      elseif(igamma==nc-1);
		  jac1 = Jac101[.,1:igamma-1]~jac1[.,igamma:cols(jac1)];
	      else;
		  jac1 = Jac101[.,1:igamma-1]~jac1[.,igamma]~Jac101[.,igamma+1:cols(jac101)];
	      endif;
	  
		  
		  Jac11 = ((dta[.,flagchm~flagchmo]+gamma_req))./(all_alpha_un);
	      Jac11 = Jac11./(dta[.,flagprcm]); 
	      Jac11 = Jac11.*b_gamma;
		  		  
		  Jad1 = sumc((Jac11'));
	      Jac1 = (prodc((Jac1'))).*Jad1;
		  
		//****************************************************
		  Jac2 = (all_alpha_un.*b_gamma)./((dta[.,flagchm~flagchmo]+gamma_req));
	      Jac2 = Jac2./(dta[.,flagprcm]); 
	      Jac2 = substute(Jac2,b_gamma.==0,1);
		  
		  Jac22 = all_gamma2;
	      Jac22 = jac22.*b_inside;
		  
		  Jad2 = sumc((Jac22'));
	      Jac2 = (prodc((Jac2'))).*Jad2;
		//******************************************************
		  Diff_Jacobian = Jac1 + Jac2;
		  clear Jac1,Jac11,Jae1,Jad1,Jac2,Jac22,Jad2;
		//********************************************Utility Part
		gamma_uti = zeros(nobs,nc-1);
		gamma_uti[.,igamma] = -(dta[.,flagchm[igamma]]./gamma_req[.,igamma]);
		
		diff_utility_gamma = (all_alpha_un[.,1:nc-1]./ (dta[.,flagchm]+gamma_req[.,1:nc-1]));
		diff_utility_gamma = -(diff_utility_gamma.*gamma_uti);
		
		if(Mean_Negative eq 1);
		    diff_mat1 = -(reshape(diff_utility_gamma,nind*(nc-1),1));
	    else;
		    diff_mat1 = (reshape(diff_utility_gamma,nind*(nc-1),1));
		endif;
		
		clear all_alpha_un,gamma_req,all_gamma1,denom,all_gamma2,alpha_sum,gamma_sum,gamma_uti,b_gamma,diff_utility_gamma;
		
        seednext = seed30; 
		Total_g = 0;
	    
		for pair1(1,nind,1);
		    temp_count = 0; Total_g1 = 0;			
			p1v = {}; p1_mean = {}; p1d_mean = {}; 
			            p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
						p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
						p1d_mean = p1d_mean ~ diff_mat1[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
			
		        for pair2(pair1+1,nind,1);
				    					
					    p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2d_mean = {}; meand = {};
					
							if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									p2d_mean = p2d_mean ~ diff_mat1[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									meand = meand | p1d_mean;
									meand = meand | p2d_mean;
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1)-Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
									if(Total_NC == 2*(nc-1));
										om = diag(co_var);
										Mean_NC_final = mean'./(sqrt(om'));
										Var_NC_final = corrvc(co_var);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										
										Mean_NCd = meand;
										Mean_NCd_changed  = Mean_NCd;	
										Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
										
										seed20=seednext;
									    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
							             shi_a = (g[1,1:Total_NC])';
								         seednext = s2;
										
										 
								  
								        if(w eq upper_limit OR w lt upper_limit);
                                           g_part3 = 0;
							            else;
								          g_part3 = (1/w)*(Mean_NCd_final' * shi_a);
										  clear g,shi_a;
								        endif;

                                         g_part2 = 0;
										 g_part11 = (1/(Jacobian[pair1]*Jacobian[pair2]));
										 g_part12 = (Jacobian[pair1]*Diff_Jacobian[pair2]) + (Diff_Jacobian[pair1]*Jacobian[pair2]);
										 g_part1 = g_part11*g_part12;
										 
										 clear Mean_NC_final,Var_NC_final,Mean_NCd,meand,Mean_NCd_changed,Mean_NCd_final,g,R,co_var,mean;
									 elseif(Total_C == 2*(nc-1));
										 Mean_C = mean;
										 Var_C = co_var;
										 Mean_Cd = meand;
										 
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										 
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part2 = 0;
										 else;	
											g_part2 = (1/prob_org1)*(Mean_Cd' * phi_a);
										endif;
																	 
										 g_part3 = 0;
										 g_part11 = (1/(Jacobian[pair1]*Jacobian[pair2]));
										 g_part12 = (Jacobian[pair1]*Diff_Jacobian[pair2]) + (Diff_Jacobian[pair1]*Jacobian[pair2]);
										 g_part1 = g_part11*g_part12;
										 clear Mean_C,Var_C,Mean_Cd,meand,R,co_var,mean;
									 else;
										 RNC = R[1:Total_NC,1:2*(nc-1)];
										 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

										 Mean_C = RC*mean;
										 Mean_NC = RNC*mean;
											
										 Var_C = RC*co_var*RC';
										 Var_NC = RNC*co_var*RNC';
										 Var_NCC = RNC*co_var*RC';
											
																		
										 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
										 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
											
										 om = diag(Var_NC_changed);
										 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
										 Var_NC_final = corrvc(Var_NC_changed);
										 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
											
										 //*****************************************************************************	
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										
										 Mean_Cd = RC*meand;
																					
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part2 = 0;
										 else;	
											g_part2 = (1/prob_org1)*(Mean_Cd' * phi_a);
										endif;
										//******************************************************************************
										 Mean_NCd = RNC*meand;
										 Mean_NCd_changed  = Mean_NCd - (Var_NCC*(inv(Var_C))*Mean_Cd);	
										 Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
										 
										  if(Total_NC == 1);
												 w = cdfMvn(Mean_NC_final,Var_NC_final);
												 shi_a = pdfn(Mean_NC_final);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part3 = 0;
												 else;	
													g_part3 = (1/w)*(Mean_NCd_final' * shi_a);
												 endif;
										  elseif(Total_NC == 2);
												 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part3 = 0;
												 else;	
													g_part3 = (1/w)*(Mean_NCd_final' * shi_a[1:2,1]);
												 endif;										 
										  else;
										         seed20 = seednext;
												 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
							                      shi_a = (g[1,1:Total_NC])';
												  seednext = s2;
												 												  
										  
									             if(w eq upper_limit OR w lt upper_limit);
                                                    g_part3 = 0;
										         else;
											        g_part3 = (1/w)*(Mean_NCd_final' * shi_a);
													clear g,shi_a;
										         endif;

      							          endif;
										 
											 g_part11 = (1/(Jacobian[pair1]*Jacobian[pair2]));
										     g_part12 = (Jacobian[pair1]*Diff_Jacobian[pair2]) + (Diff_Jacobian[pair1]*Jacobian[pair2]);
											 g_part1 = g_part11*g_part12;
											 clear Mean_C,Var_C,Mean_NC,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_Cd,Mean_NCd,meand,Mean_NCd_changed;
											 clear Mean_NCd_final,shi_a,R,RNC,RC,co_var,mean; 
								    endif;
											 Total_g = Total_g +g_part1 + g_part2+ g_part3;
											 Total_g1 = Total_g1 +g_part1 + g_part2+ g_part3;
										     temp_count = temp_count + 1;	
										 // ************************************************************************
								endif;
						
					endfor;
					       All_G_Store1[pair1,(nvarm+nCholOmega+rows(eqmatdel)+igamma)] = Total_g1;
						   if(temp_count ne 0);
			               All_G_Store2[pair1,(nvarm+nCholOmega+rows(eqmatdel)+igamma)] = (Total_g1/temp_count);
						   endif;
					endfor;
					            
		        clear Diff_Jacobian,diff_mat1;
                gamma_gradient = gamma_gradient ~ Total_g;
				endif;
    endfor;
    gamma_gradient = gamma_gradient ~ 0; 
    clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1d_mean,p2d_mean,g_part11,g_part12;
	
//-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

   Psi_gradient = {};
   for ipsi (1,nCholErr,1);
	  if(ipsi==1);
		  Psi_gradient = Psi_gradient ~ 0;
	  else;
		 
	    fix_check =_max_active[nvarm+nCholOmega+1+nc+ipsi];
				 
		 if(fix_check==0);
			 Psi_gradient = Psi_gradient ~ 0;
		 else;
			 
			    d_chol_Psi = zeros(nCholErr,1);d_chol_Psi[ipsi]=1;                         d_chol_Psi = upmat(xpnd(d_chol_Psi));
				d_Psi = d_chol_Psi'*chol_Psi + chol_Psi'*d_chol_Psi;      
				Psi_expand =  eye(nind).*.d_Psi;
				Final_Error = (S_matrix * Psi_expand * S_matrix');
				
				clear d_chol_Psi,d_Psi,Psi_expand;
				seednext = seed30; 
				Total_g = 0;
				
				for pair1(1,nind,1);
					temp_count = 0; Total_g1 = 0;					
					p1v = {}; p1_mean = {}; p1v_d = {};
								p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1v_d = p1v_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
					
						for pair2(pair1+1,nind,1);
														
							     p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2v_d = {}; p1cv_d = {}; p2cv_d = {}; co_var_d = {};
							
										if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
											p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                            p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                            p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
                                            p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
											co_var = co_var ~ (p1v ~ p1cv);
											co_var = co_var | (p2cv ~ p2v);
											mean = mean | p1_mean;
											mean = mean | p2_mean;
											
											p2v_d = p2v_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
											p1cv_d = p1cv_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
											p2cv_d = p2cv_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
											co_var_d = co_var_d ~ (p1v_d ~ p1cv_d);
											co_var_d = co_var_d | (p2cv_d ~ p2v_d);
											
											pair1_chose = Chosen_Alternative[pair1,.];
											pair2_chose = Chosen_Alternative[pair2,.];
											alt_list = pair1_chose'|pair2_chose';
											R = zeros(2*(nc-1),2*(nc-1)); 
											Total_NC = 2*(nc-1)-sumc(alt_list);
											Total_C = 2*(nc-1)-Total_NC;
											counter = 0;
											for i(1,2*(nc-1),1);
												if(alt_list[i]==0);
												   counter = counter+1;
												   R[counter,i]=1;
												endif;
											endfor;
											
											for j(1,2*(nc-1),1);
												if(alt_list[j]==1);
												   counter = counter+1;
												   R[counter,j]=1;
												endif;
											endfor;	
											
											if(Total_NC == 2*(nc-1));
												om = diag(co_var);
												Mean_NC = mean;
												Mean_NC_changed = Mean_NC;
												Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
												Var_NC_changed = co_var ;
												Var_NC_final = corrvc(Var_NC_changed);
												Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
												
												Mean_NCd_changed  = zeros(Total_NC,1);
												Var_NCd_changed = co_var_d ;
											
												omncd = diag(Var_NCd_changed);
												Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
												Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
												Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
											
												shi_r_unq = {};
												for ishi(1,rows(Var_NCd_final)-1,1);
												   shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
												endfor;
																	
												seed20=seednext;
											    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
									            shi_a = (g[1,1:Total_NC])';
									            shi_r = (g[1,Total_NC+1:cols(g)])';
											    seednext = s2;
												
												if(w eq upper_limit OR w lt upper_limit);
									               g_part2 = 0;
									            else;
									               g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
												   clear g,shi_a,shi_r;
									            endif;

									            g_part1 = 0;
												clear Mean_NC,Mean_NC_final,Var_NC_final,Mean_NCd_changed,Var_NCd_changed,om,omncd,Mean_NCd_final,Var_NCd_final,shi_r_unq,shi_a,shi_r,g,R,co_var,co_var_d,mean,om1,omncd1;
											elseif(Total_C == 2*(nc-1));
												 Mean_C = mean;
												 Var_C = co_var;
												 Var_Cd = co_var_d;
												 phi_r = pdfgcov(Mean_C,vech(Var_C));
												 prob_org1 = pdfmvn(Mean_C,Var_C);
												
												 phi_rd_unq = (vech(Var_Cd))';
																				 
												 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
													g_part1 = 0;
												 else;	
													g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
												 endif; 
												 
												 g_part2 = 0;
												 clear Mean_C,Var_C,Var_Cd,phi_r,phi_r_unq,phi_rd_unq,R,co_var,co_var_d,mean; 
											 else;
												 RNC = R[1:Total_NC,1:2*(nc-1)];
												 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

												 Mean_C = RC*mean;
												 Mean_NC = RNC*mean;
											
												 Var_C = RC*co_var*RC';
												 Var_NC = RNC*co_var*RNC';
												 Var_NCC = RNC*co_var*RC';
											
												 Var_Cd = RC*co_var_d*RC';
												 Var_NCd = RNC*co_var_d*RNC';
												 Var_NCCd = RNC*co_var_d*RC';
												
											
												 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
												 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
											
												 om = diag(Var_NC_changed);
												 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
												 Var_NC_final = corrvc(Var_NC_changed);
												 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
											
											  //*****************************************************************************	
												 phi_r = pdfgcov(Mean_C,vech(Var_C));
												 prob_org1 = pdfmvn(Mean_C,Var_C);
												
												 phi_rd_unq = (vech(Var_Cd))';
												
												 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
													g_part1 = 0;
												 else;	
													g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
												 endif; 
											 //******************************************************************************
												 Mean_NCd_changed  =  - (Var_NCCd*(inv(Var_C))*Mean_C) + (Var_NCC * (inv(Var_C)) * Var_Cd *(inv(Var_C))*  Mean_C);	
												 Var_NCd_changed = Var_NCd - (Var_NCCd*(inv(Var_C))*Var_NCC') + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))*  Var_NCC') - (Var_NCC*(inv(Var_C))*Var_NCCd');
												 
												 omncd = diag(Var_NCd_changed);
												 Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
												 Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
												 Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
												 
																				
												 if(Total_NC == 1);
													 w = cdfMvn(Mean_NC_final,Var_NC_final);
													 shi_a = pdfn(Mean_NC_final);
													 if(w eq upper_limit OR w lt upper_limit);
														 g_part2 = 0;
													 else;	
													 g_part2 = (1/w)*(Mean_NCd_final * shi_a);
													 endif;
													
												 elseif(Total_NC == 2);
													 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
													 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
													 if(w eq upper_limit OR w lt upper_limit);
														 g_part2 = 0;
													 else;	
														g_part2 = (1/w)*(Mean_NCd_final * shi_a[1:2,1] + Var_NCd_final[1,2]*shi_a[3,1]);
													endif;	
												 else;
													 seed20=seednext;	
													 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
													  shi_a = (g[1,1:Total_NC])';
													  shi_r = (g[1,Total_NC+1:cols(g)])';
													  seednext = s2;
													 									 
													 
													 shi_r_unq = {};
													 for ishi(1,rows(Var_NCd_final)-1,1);
														shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
													 endfor;
													   
													   if(w eq upper_limit OR w lt upper_limit);
														  g_part2 = 0;
													   else;
														 g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
														 clear g,shi_a,shi_r;
													   endif;

													   clear shi_r_unq;
									          endif;
												 clear Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Var_Cd,Var_NCd,Var_NCCd,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_NCd_changed;
												 clear Var_NCd_changed,Mean_NCd_final,Var_NCd_final,R,RNC,RC,shi_a;
												 clear om,omncd,co_var,co_var_d,mean;
											 endif;
												 
													Total_g = Total_g +g_part1 + g_part2;
													Total_g1 = Total_g1 +g_part1 + g_part2;
													temp_count = temp_count + 1;
															
										endif;
										
									endfor;
									      All_G_Store1[pair1,(nvarm+nCholOmega+rows(eqmatdel)+nc+ipsi)] = Total_g1;
										  if(temp_count ne 0);
			                              All_G_Store2[pair1,(nvarm+nCholOmega+rows(eqmatdel)+nc+ipsi)] = (Total_g1/temp_count);
										  endif;
									endfor;
					
					  
				clear Final_error;
				Psi_gradient = Psi_gradient ~ Total_g;
			endif;
		endif;
	endfor;
     clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1v_d,p2v_d,p1cv_d,p2cv_d,fix_check;
  
 //------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
  delta_gradient = {};
  pair_count = zeros(nobs,1);
			for idel(1,nc-1,1);
				
				fix_check =_max_active[nvarm+nCholOmega+1+nc+nCholErr+idel];
					
				if(fix_check==0);
					delta_gradient = delta_gradient ~ 0;
				else;
					
				
						del_required = zeros(nc-1,1);   del_required[idel] = 1;     dell = del_required .* dd_del;
						ddelta = zeros(nc-1,nc-1); ddelta = diagrv(ddelta,dell);
						
						d_Sq1 = (ones(nind,nind).*.ddelta);
						d_Sq2 = d_Sq1 .* (weightM1.*.eye(nc-1));
						d_capS = S_matrix * d_Sq2 * S_matrix;
						
						v2 = (ones(nc-1,1) .*. smallB )*~(X_subtracted)';
						j=1;
						v = {};
						do until j == nc;
						   v = v~(sumc(v2[(j-1)*nvarm+1:(j*nvarm),.]));
						   j = j+1;
						endo;
					
						clear v2;
					  
						 v = reshape(v,nind*(nc-1),1);
						 capV = d_capS * v;
						 clear v;
					
						 if(Mean_Negative eq 1);
							Delta_Mean = -(capV);
						 else;
							Delta_Mean = (capV);
						 endif;
						 
						 
						 clear capV;
						 
						 Delta_error = (d_capS*Pure_error*S_matrix') + (S_matrix * pure_error* d_capS');
						 
						 						  
						 clear d_capS;	
						 seednext = seed30;
						 Total_g = 0; 
						 				
							for pair1(1,nind,1);
										temp_count = 0; Total_g1 = 0; 
										p1v = {}; p1_mean = {}; p1v_d = {}; p1d_mean = {};
											
											p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
											p1v_d = p1v_d ~ Delta_error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
											p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
											p1d_mean = p1d_mean ~ Delta_Mean[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
											
									for pair2(pair1+1,nind,1);
										
										
											 meand = {}; p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2v_d = {}; p1cv_d = {}; p2cv_d = {}; co_var_d = {}; p2d_mean = {};
										
													if(pair1 NE pair2 AND distance[pair1,pair2]<=cutoff_distance);
														
														p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
														p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
														co_var = co_var ~ (p1v ~ p1cv);
														co_var = co_var | (p2cv ~ p2v);
														mean = mean | p1_mean;
														mean = mean | p2_mean;
														
														p2v_d = p2v_d ~ Delta_error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p1cv_d = p1cv_d ~ Delta_error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p2cv_d = p2cv_d ~ Delta_error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
														p2d_mean = p2d_mean ~ Delta_Mean[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
														co_var_d = co_var_d ~ (p1v_d ~ p1cv_d);
														co_var_d = co_var_d | (p2cv_d ~ p2v_d);
														meand = meand | p1d_mean;
														meand = meand | p2d_mean;
														
														pair1_chose = Chosen_Alternative[pair1,.];
														pair2_chose = Chosen_Alternative[pair2,.];
														alt_list = pair1_chose'|pair2_chose';
														R = zeros(2*(nc-1),2*(nc-1)); 
														Total_NC = 2*(nc-1)-sumc(alt_list);
														Total_C = 2*(nc-1)-Total_NC;
														counter = 0;
														for i(1,2*(nc-1),1);
															if(alt_list[i]==0);
															   counter = counter+1;
															   R[counter,i]=1;
															endif;
														endfor;
														
														for j(1,2*(nc-1),1);
															if(alt_list[j]==1);
															   counter = counter+1;
															   R[counter,j]=1;
															endif;
														endfor;	
														
																											
														if(Total_NC == 2*(nc-1));
															om = diag(co_var);
															Mean_NC = mean;
															Mean_NC_changed  =  Mean_NC;
															Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
															Var_NC_changed = co_var ;
															Var_NC_final = corrvc(Var_NC_changed);
															Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
															
															Mean_Cd = meand;
															Mean_NCd = meand;
															Var_NCd = co_var_d;
															Mean_NCd_changed  =  Mean_NCd;
															Var_NCd_changed = Var_NCd;
														
															omncd = diag(Var_NCd_changed);
															Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
															Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(3/2)) .* om  + (Var_NC_changed ./(om^(3/2)) .* om )' ./(om^(3/2)) .* omncd ) ;
															Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
														
															shi_r_unq = {};
															for ishi(1,rows(Var_NCd_final)-1,1);
															   shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
															endfor;
																				
															seed20=seednext;
															{w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
														     shi_a = (g[1,1:Total_NC])';
															 shi_r = (g[1,Total_NC+1:cols(g)])';
															 seednext = s2;
																														  
														
															if(w eq upper_limit OR w lt upper_limit);
																g_part2 = 0;
															else;
																g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
																clear g,shi_a,shi_r;
															endif;
															
															g_part1 = 0;
															clear Mean_NC_changed,Mean_Cd,Mean_NCd,Mean_NC,Mean_NC_final,Var_NC_final,Mean_NCd_changed,Var_NCd_changed,om,omncd,Mean_NCd_final,Var_NCd_final,shi_r_unq,shi_a,shi_r,g,R,co_var,co_var_d,mean,om1,omncd1;
														elseif(Total_C == 2*(nc-1));
															 Mean_C = mean;
															 Mean_cd = meand;
															 Var_C = co_var;
															 Var_Cd = co_var_d;
															 phi_a = pdfgmean(Mean_C,Var_C);
															 phi_r = pdfgcov(Mean_C,vech(Var_C));
															 prob_org1 = pdfmvn(Mean_C,Var_C);
															
															 phi_rd_unq = (vech(Var_Cd))';
															
															 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
																 g_part1 = 0;
															 else;
																 g_part1 = (1/prob_org1)*(Mean_cd'*phi_a + phi_rd_unq*phi_r);
															 endif;
															 
															 g_part2 = 0;
															 clear Mean_C,Var_C,Var_Cd,phi_r,phi_r_unq,phi_rd_unq,R,co_var,co_var_d,mean; 
														 else;
															 RNC = R[1:Total_NC,.];
															 RC =  R[Total_NC+1:2*(nc-1),.];

															 Mean_C = RC*mean;
															 Mean_NC = RNC*mean;
															 
															 Mean_Cd = RC*meand;
															 Mean_NCd = RNC*meand;
														
															 Var_C = RC*co_var*RC';
															 Var_NC = RNC*co_var*RNC';
															 Var_NCC = RNC*co_var*RC';
														
															 Var_Cd = RC*co_var_d*RC';
															 Var_NCd = RNC*co_var_d*RNC';
															 Var_NCCd = RNC*co_var_d*RC';
															
														
															 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
															 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
														
															 om = diag(Var_NC_changed);
															 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
															 Var_NC_final = corrvc(Var_NC_changed);
															 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
														
														  //*****************************************************************************	
															 phi_a = pdfgmean(Mean_C,Var_C);
															 phi_r = pdfgcov(Mean_C,vech(Var_C));
															 prob_org1 = pdfmvn(Mean_C,Var_C);
															
															 phi_rd_unq = (vech(Var_Cd))';
															
															 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
																 g_part1 = 0;
															 else;
																 g_part1 = (1/prob_org1)*(Mean_cd'*phi_a + phi_rd_unq*phi_r);
															 endif;
															 
															 //******************************************************************************
															 Mean_NCd_changed  =  Mean_NCd - (Var_NCC*(inv(Var_C))*Mean_Cd)	- (Var_NCCd*(inv(Var_C))*Mean_C) + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Mean_C);	
															 Var_NCd_changed = Var_NCd - (Var_NCCd*(inv(Var_C))*Var_NCC') + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Var_NCC') - (Var_NCC*(inv(Var_C))*Var_NCCd');
														
															 omncd = diag(Var_NCd_changed);
															 Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
															 Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(3/2)) .* om  + (Var_NC_changed ./(om^(3/2)) .* om )' ./(om^(3/2)) .* omncd ) ;
															 Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
														
																							
															 if(Total_NC == 1);
																 w = cdfMvn(Mean_NC_final,Var_NC_final);
																 shi_a = pdfn(Mean_NC_final);
																 if(w eq upper_limit OR w lt upper_limit);
																	 g_part2 = 0;
																 else;
																 g_part2 = (1/w)*(Mean_NCd_final * shi_a);
																 endif;
															elseif(Total_NC == 2);
																 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
																 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
																 if(w eq upper_limit OR w lt upper_limit);
																	 g_part2 = 0;
																 else;	
																	g_part2 = (1/w)*(Mean_NCd_final * shi_a[1:2,1] + Var_NCd_final[1,2]*shi_a[3,1]);
																 endif;	
														    else;
																seed20=seednext;
																{w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
																shi_a = (g[1,1:Total_NC])';
																shi_r = (g[1,Total_NC+1:cols(g)])';
																seednext = s2;
																 																
																 
																 shi_r_unq = {};
																 for ishi(1,rows(Var_NCd_final)-1,1);
																	shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
																 endfor;
																 
																  if(w eq upper_limit OR w lt upper_limit);
																	g_part2 = 0;
																  else;
																	g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
																	clear g,shi_a,shi_r;
																  endif;
																 
																  clear shi_r_unq;
														   endif;
															 clear Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Var_Cd,Var_NCd,Var_NCCd,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_NCd_changed;
															 clear Var_NCd_changed,Mean_NCd_final,Var_NCd_final,R,RNC,RC,shi_a;
															 clear om,omncd,co_var,co_var_d,mean;
													   endif;
																
																Total_g = Total_g +g_part1 + g_part2;
																Total_g1 = Total_g1 +g_part1 + g_part2;
																temp_count = temp_count + 1;
												endif;
													
												endfor;
										  All_G_Store1[pair1,(nvarm+nCholOmega+rows(eqmatdel)+nc+nCholErr+idel)] = Total_g1;
										  if(temp_count ne 0);
			                              All_G_Store2[pair1,(nvarm+nCholOmega+rows(eqmatdel)+nc+nCholErr+idel)] = (Total_g1/temp_count);
										  endif;
											  
										  if(idel == (nc-1) );
										  pair_count[pair1,1] = temp_count;
									      endif;
									  
									endfor;
					clear Delta_Mean,Delta_error;
					delta_gradient = delta_gradient ~ Total_g;
					
				endif;
				clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1v_d,p2v_d,p1cv_d,p2cv_d,p1_mean,p2_mean,p1d_mean,p2d_mean;
    endfor;

 gradient = {};
 gradient = gradient ~ (beta_gradient ~ OmTild_gradient ~ alpha_gradient ~ gamma_gradient ~ Psi_gradient ~ delta_gradient);
 All_G_Store1_active = selif(All_G_Store1',_max_active);
 All_G_Store2_active = selif(All_G_Store2',_max_active);
 
 Hessian_unscaled = All_G_Store1_active * All_G_Store1_active';
 Hessian_scaled = All_G_Store2_active * All_G_Store2_active';
	  
 
 clear All_G_Store1,All_G_Store2,All_G_Store1_active,All_G_Store2_active;
 
 retp(gradient);
 
 
 endp;

//----------------------------------------------------------------------------------------------------------------------------

proc(1)= JMatrix(parm,dta,grid);
    local smallA,smallB,Lambda,Psi,del,rho,chol_OmTild,chol_Lambda,chol_Psi,Sq; 
    local inc,ichocc,iind,capR,capC,capA,capS,e1,seed20;  
    local capH,capV,capB;
    local om,omncd,gradient;
    local time1,time2,time3,time4,time5,time6,time7;
    local i,j,option,p1,p2,p3;
	local u,v,w,u2,v1,w2,v2,w1,a,f,mq,chosen_keep,diff_mat,diff_mat1,g,s1;
	local Jac,Jad,Jae,chosen_alt,xdel,xgam;
	local pair1_chose,pair2_chose,alt_list,R,RNC,RC,Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed, Mean_NC_final,Var_NC_final,counter;
    local Lamda_c,OmTild_c,psi_c,capF,M,iden_mat,one_vect,filler,altcc,sigma,count,dta_required,Total_NC;
	local individual_prob,pair1,pair2,pair1_t,pair2_t,p1v,p2v,p1cv,p2cv,p1_mean,p2_mean,co_var,mean,seednext;
	local beta_gradient,OmTild_gradient,smalla_gradient,Lamda_gradient,Psi_gradient,delta_gradient,rho_gradient,alpha_gradient,gamma_gradient;
	local iatr,forgx,forgcapV,Total_g,p1d_mean,p2dmean,meand,phi_a,phi_r,prob_orig1,Mean_NCd,Mean_NCd_changed,Mean_NCd_final,dd_del,dd_rho;
	local shi_a,shi_r,g_part1,g_part2,g_part3,phi_r_unq,phi_rd_unq,iphi,ishi,shi_r_unq;
	local ichol,d_chol_OmTild,d_OmTild,OmTild_expand,OmTild,F_OmTild,Final_Error,p1v_d,p2v_d,p1cv_d,p2cv_d,co_var_d;
	local Var_Cd,Var_NCd,Var_NCCd,Var_NCd_changed,Var_NCd_final,Mean_Cd,d_capA,d_chol_Lamda,d_Lamda,Lamda_expand,F_Lamda;
	local d_chol_Psi,d_Psi,Psi_expand,Psi_intoc,F_Psi,d_Sq,d_capS,Delta_Mean,F_Delta,Delta_error;
	local d_capC1,d_capC2,d_capC,F_rho,Frho_error,ialpha,igamma,alpha,gammanew,alpha_mult,gamma_mult,alpha_sum,gamma_sum;
	local gamma_req,all_alpha1,all_alpha_un,alpha_req1,alpha_req2,b_alpha,Jac1,Jac11,Jad1,Jae1,Diff_Jacobian,diff_utility_gamma;
	local all_gamma1,denom,b_gamma,all_gamma2,gamma_uti,p2d_mean,Total_C,prob_org1,d_chol_Lambda,d_Lambda,all_alpha2,Jac2,Jac22,Jad2,Jae2,g_part11,g_part12;
	local om1,omncd1,om2,kel,Var_Cd1,g_part22,d1_OmTild;
	local del_required,dell,ddelta,d_Sq1,d_Sq2,outside_good,temparory,b_inside,jac101,seednext1,seednext2,s2,Var_NC_final_tri_grad,fix_check,chol_OmTild1;
	local OmTild_dig11,OmTild_dig_expand11,OmTild11,x_reqg,betxg,sss2,store_grad;
	local del_matrix,diff_mat12,diff_mat11,current_grid,r11,pair11,pair22,req_grid,Diff_Jacobian1,Grid_pair,inpair,Collect_all,All_gradient;

    smallB      = parm[1:nvar];
    chol_OmTild = upmat(xpnd(parm[nvar+1:nvar+nCholOmega]));
    xdel        = eqmatdel'*parm[nvar+nCholOmega+1:nvar+nCholOmega+rows(eqmatdel)];
    xgam        = eqmatgam'*parm[nvar+nCholOmega+rows(eqmatdel)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)];
    chol_Psi    = upmat(xpnd(parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr]));
    del         = parm[nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+1:nvar+nCholOmega+rows(eqmatdel)+rows(eqmatgam)+nCholErr+rows(dgp_del)];
    
    
    outside_good = nc;	
	OmTild = zeros(nvar,nvar); OmTild[1:nran,1:nran] = chol_OmTild'*chol_OmTild;
	Psi = chol_Psi'*chol_Psi;
	del_matrix = zeros(nc-1,nc-1);
	del_matrix = diagrv(del_matrix,del);
    
	
    diff_mat12 = {};
    for iatr(1,nvarm,1);
	     forgx = smallB*0;  forgx[iatr]=1;
		 
		 v1 = (ones(nc-1,1) .*. forgx )*~(X_subtracted)';
		 j=1;
		 v = {};
		 do until j == nc;
		   v = v~(sumc(v1[(j-1)*nvarm+1:(j*nvarm),.]));
		   j = j+1;
		 endo;
				
		v = reshape(v,nind*(nc-1),1);
				
		if(Mean_Negative eq 1);
		   diff_mat11 = -(S_matrix*v);
		else;
		   diff_mat11 = (S_matrix*v);
		endif;
 
        diff_mat12 = diff_mat12 ~ diff_mat11;
		clear diff_mat11;
	endfor;
   
   beta_gradient = zeros(rows(grid),nvarm);
   for ibeta(1,nvarm,1);
       diff_mat1 = diff_mat12[.,ibeta];
	   seednext = seed30; 
   
   
       for all_grid(1,rows(grid),1);
	     current_grid = grid[all_grid,.];
	     req_grid = {}; r11=1;
	     do until (r11>cols(current_grid));
	          if(current_grid[1,r11] ne 0);
				  req_grid = req_grid | current_grid[1,r11];
			  endif;
			r11 = r11 + 1;
	     endo;
	    		Total_g = 0;
				
				for pair11(1,rows(req_grid),1);
				    pair1 = req_grid[pair11,1];
										
					p1v = {}; p1_mean = {}; p1d_mean = {}; 
								
                                     p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
                                     p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];								
				                     p1d_mean = p1d_mean ~ diff_mat1[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
					
						for pair22(pair11,rows(req_grid),1);
							pair2 = req_grid[pair22,1];
							
							        p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2d_mean = {}; meand = {};
							
								if(pair1 NE pair2);
									
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                    p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                    p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
                                    p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									p2d_mean = p2d_mean ~ diff_mat1[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									meand = meand | p1d_mean;
									meand = meand | p2d_mean;
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1)-Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
																		
									if(Total_NC == 2*(nc-1));
										om = diag(co_var);
										Mean_NC_final = mean'./(sqrt(om'));
										Var_NC_final = corrvc(co_var);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										
										Mean_NCd = meand;
										Mean_NCd_changed  = Mean_NCd;	
										Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
										
										seed20 = seednext;
									    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
										seednext=s2;
										shi_a = (g[1,1:Total_NC])';
									     									    					
										if(w eq upper_limit OR w lt upper_limit);
											g_part2 = 0;
										else;
										   g_part2 = (1/w)*(Mean_NCd_final' * shi_a);
										   clear g,shi_a;
										endif;
												
										g_part1 = 0;
												 
										clear Mean_NC_final,Var_NC_final,Mean_NCd,meand,Mean_NCd_changed,Mean_NCd_final,R,co_var,mean;
									 elseif(Total_C == 2*(nc-1));
										 Mean_C = mean;
										 Var_C = co_var;
										 Mean_Cd = meand;
										 
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										 
										 
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(Mean_Cd' * phi_a);
										 endif;
										
										 g_part2 = 0;
										 clear Mean_C,Var_C,Mean_Cd,meand,R,co_var,mean;
									 else;
										 RNC = R[1:Total_NC,1:2*(nc-1)];
										 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

										 Mean_C = RC*mean;
										 Mean_NC = RNC*mean;
										 
										 Mean_Cd = RC*meand;
										 Mean_NCd = RNC*meand;
									
										 Var_C = RC*co_var*RC';
										 Var_NC = RNC*co_var*RNC';
										 Var_NCC = RNC*co_var*RC';
									
																
										 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
										 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
									
										 om = diag(Var_NC_changed);
										 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
										 Var_NC_final = corrvc(Var_NC_changed);
										 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
									
										//*****************************************************************************	
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
									
																											
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(Mean_Cd' * phi_a);
										 endif;
										
										   
										   //******************************************************************************
										 Mean_NCd_changed  = Mean_NCd - (Var_NCC*(inv(Var_C))*Mean_Cd);	
										 Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
											
																					
											 if(Total_NC == 1);
												 w = cdfMvn(Mean_NC_final,Var_NC_final);
												 shi_a = pdfn(Mean_NC_final);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part2 = 0;
												 else;	
													g_part2 = (1/w)*(Mean_NCd_final' * shi_a);
												 endif;
											 elseif(Total_NC == 2);
												 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part2 = 0;
												 else;	
													g_part2 = (1/w)*(Mean_NCd_final' * shi_a[1:2,1]);
												 endif;										 
											else;
												 seed20=seednext;
												 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
												  seednext=s2;
												  shi_a = (g[1,1:Total_NC])';
													 
																		
													if(w eq upper_limit OR w lt upper_limit);
														g_part2 = 0;
													else;
													   g_part2 = (1/w)*(Mean_NCd_final' * shi_a);
													   clear g,shi_a;
													endif;	  
																																						
												 
											endif;
										clear Mean_C,Var_C,Mean_NC,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_Cd,Mean_NCd,meand,Mean_NCd_changed;
										clear Mean_NCd_final,R,RNC,RC,co_var,mean,shi_a;
									 endif;
										   
										   	Total_g = Total_g +g_part1 + g_part2; 
											
										//*****************************************************************************
								endif;
								
							endfor;
						endfor;
						
				beta_gradient[all_grid,ibeta] = Total_g;
				clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1d_mean,p2d_mean,p1_mean,p2_mean;
			endfor;
			clear diff_mat1;
	endfor;
	clear diff_mat12;
//----------------------------------------------------------------------------------------------------------------------------------------------------------------
  
  OmTild_gradient = zeros(rows(grid),nCholOmega);
  for ichol (1,nCholOmega,1);
      
	  d_chol_OmTild = zeros(nCholOmega,1);            d_chol_OmTild[ichol]=1;                         
	  d_chol_OmTild = upmat(xpnd(d_chol_OmTild));
      d1_OmTild = d_chol_OmTild'*chol_OmTild + chol_OmTild'*d_chol_OmTild;  d_OmTild = zeros(nvar,nvar);  d_OmTild[1:nran,1:nran] = d1_OmTild; 
  
      OmTild_expand =  eye(nind).*.d_OmTild;
	  OmTild =  (xTildec * OmTild_expand * xTildec');
	  Final_Error = (S_matrix * OmTild * S_matrix');
	  seednext = seed30;
				
	  clear d_chol_OmTild,d_OmTild,OmTild_dig11,OmTild_dig_expand11,OmTild11,x_reqg,betxg;
  
      for all_grid(1,rows(grid),1);
	         current_grid = grid[all_grid,.];
	         req_grid = {}; r11=1;
	         do until (r11>cols(current_grid));
	            if(current_grid[1,r11] ne 0);
				   req_grid = req_grid | current_grid[1,r11];
			    endif;
			    r11 = r11 + 1;
	        endo;
			
			    Total_g = 0;
				for pair11(1,rows(req_grid),1);
				    pair1 = req_grid[pair11,1];
										
					   p1v = {}; p1_mean = {}; p1v_d = {};
								p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1v_d = p1v_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
					
						for pair22(pair11,rows(req_grid),1);
							pair2 = req_grid[pair22,1];
							
							
							  p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2v_d = {}; p1cv_d = {}; p2cv_d = {}; co_var_d = {};
							
								if(pair1 NE pair2);
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									p2v_d = p2v_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv_d = p1cv_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv_d = p2cv_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									co_var_d = co_var_d ~ (p1v_d ~ p1cv_d);
									co_var_d = co_var_d | (p2cv_d ~ p2v_d);
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1)-Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
									if(Total_NC == 2*(nc-1));
										om = diag(co_var);
										Mean_NC = mean;
										Mean_NC_changed = Mean_NC;
										Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
										Var_NC_changed = co_var ;
										Var_NC_final = corrvc(Var_NC_changed);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										
										Mean_NCd_changed  = zeros(Total_NC,1);
										Var_NCd_changed = co_var_d ;
									
										omncd = diag(Var_NCd_changed);
										Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
										Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
										Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
									
										shi_r_unq = {};
										for ishi(1,rows(Var_NCd_final)-1,1);
										   shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
										endfor;
															
										seed20=seednext;
									    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
										shi_a = (g[1,1:Total_NC])';
										shi_r = (g[1,Total_NC+1:cols(g)])';
										seednext=s2;
											   
									   if(w eq upper_limit OR w lt upper_limit);
										   g_part2 = 0;
									   else;
										  g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
										  clear g,shi_a,shi_r;
									   endif;
									  
										g_part1 = 0;
										
										clear Mean_NC,Mean_NC_final,Var_NC_final,Mean_NCd_changed,Var_NCd_changed,om,omncd,Mean_NCd_final,Var_NCd_final,shi_r_unq,R,co_var,co_var_d,mean,om1,omncd1;
									elseif(Total_C == 2*(nc-1));
										 Mean_C = mean;
										 Var_C = co_var;
										 Var_Cd = co_var_d;
										 phi_r = pdfgcov(Mean_C,vech(Var_C));
										 prob_org1 = pdfmvn(Mean_C,Var_C);
									
										 phi_rd_unq = (vech(Var_Cd))';
																		 
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
										 endif;
										 g_part2 = 0;
										 clear Mean_C,Var_C,Var_Cd,phi_r,phi_r_unq,phi_rd_unq,R,co_var,co_var_d,mean; 
									 else;
										 RNC = R[1:Total_NC,1:2*(nc-1)];
										 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

										 Mean_C = RC*mean;
										 Mean_NC = RNC*mean;
									
										 Var_C = RC*co_var*RC';
										 Var_NC = RNC*co_var*RNC';
										 Var_NCC = RNC*co_var*RC';
									
										 Var_Cd = RC*co_var_d*RC';
										 Var_NCd = RNC*co_var_d*RNC';
										 Var_NCCd = RNC*co_var_d*RC';
										
										 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
										 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
									
										 om = diag(Var_NC_changed);
										 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
										 Var_NC_final = corrvc(Var_NC_changed);
										 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
									
									  //*****************************************************************************	
										 phi_r = pdfgcov(Mean_C,vech(Var_C));
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										
										 phi_rd_unq = (vech(Var_Cd))';
											
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part1 = 0;
										 else;	
											g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
										 endif;
										 
									 //******************************************************************************
										 Mean_NCd_changed  =  - (Var_NCCd*(inv(Var_C))*Mean_C) + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Mean_C);	
										 Var_NCd_changed = Var_NCd - (Var_NCCd*(inv(Var_C))*Var_NCC') + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Var_NCC') - (Var_NCC*(inv(Var_C))*Var_NCCd');
										 
										 omncd = diag(Var_NCd_changed);
										 Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
										 Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
										 Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
										 
																		
										if(Total_NC == 1);
											 w = cdfMvn(Mean_NC_final,Var_NC_final);
											 shi_a = pdfn(Mean_NC_final);
											 if(w eq upper_limit OR w lt upper_limit);
												 g_part2 = 0;
											 else;	
											 g_part2 = (1/w)*(Mean_NCd_final * shi_a);
											 endif;
										elseif(Total_NC == 2);
											 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
											 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
											 if(w eq upper_limit OR w lt upper_limit);
												 g_part2 = 0;
											 else;	
												g_part2 = (1/w)*(Mean_NCd_final * shi_a[1:2,1] + Var_NCd_final[1,2]*shi_a[3,1]);
											 endif;	
										else;
											 seed20=seednext;	
											 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
											  shi_a = (g[1,1:Total_NC])';
											  shi_r = (g[1,Total_NC+1:cols(g)])';
											  seednext=s2;
									          clear g;
											  
											  shi_r_unq = {};
											  for ishi(1,rows(Var_NCd_final)-1,1);
												shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
											  endfor;
											
																								
											   if(w eq upper_limit OR w lt upper_limit);
												   g_part2 = 0;
											   else;
												  g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
												  clear shi_a,shi_r;
											   endif;
											 
											   clear shi_r_unq;
										 endif;
										 clear Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Var_Cd,Var_NCd,Var_NCCd,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_NCd_changed;
										 clear Var_NCd_changed,Mean_NCd_final,Var_NCd_final,R,RNC,RC,shi_a;
										 clear om,omncd,co_var,co_var_d,mean,om1,omncd1;
									 endif;
											
											Total_g = Total_g +g_part1 + g_part2;
															
											
								//*****************************************************************************
									
								endif;
								
							endfor;
						endfor;
					
				OmTild_gradient[all_grid,ichol] = Total_g;
				clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1v_d,p2v_d,p1cv_d,p2cv_d;
			endfor;
			clear Final_Error;
	endfor;
//------------------------------------------------------------------------------------------------------------------------------------------------------------		
  alpha_gradient = zeros(rows(grid),1);
  
//------------------------------------------------------------------------------------------------------------------------------------------------------------ 
  Diff_Jacobian1 = zeros(nobs,nc-1); diff_mat12 = {};
  for igamma(1,nc-1,1);
		  
		  alpha = xdel; 
		  gammanew = xgam;
		  alpha_mult = (ones(nc,1) .*. alpha)*~(dta[.,ivd])';
		  gamma_mult = (ones(nc,1) .*. gammanew)*~(dta[.,ivg])';
		
        alpha_sum = {}; gamma_sum = {}; j=1;		
		do until j == nc+1;
           alpha_sum = alpha_sum~(sumc(alpha_mult[(j-1)*nvardel+1:(j*nvardel),.]));
		   gamma_sum = gamma_sum~(sumc(gamma_mult[(j-1)*nvargam+1:(j*nvargam),.]));
           j = j+1;
	    endo;
          	
	    clear alpha_mult,gamma_mult;
		all_alpha_un = 	1-alpha_sum;	
        gamma_req = gamma_sum;		
        all_gamma1 = -(1./(dta[.,flagchm[.,igamma]] + gamma_req[.,igamma]));
		denom = all_alpha_un./(dta[.,flagchm~flagchmo]+gamma_req);
		denom[.,igamma] = denom[.,igamma].*all_gamma1;
		
		b_gamma = dta[.,flagchm~flagchmo] .> 0;	// 1 if chosen, 0 if not
		all_gamma2 = zeros(nobs,nc-1);
		all_gamma2[.,igamma]= 1/all_alpha_un[.,igamma];
		b_inside = dta[.,flagchm] .> 0;
				
		//****************************************************Jacobian Part
		  Jac1 = denom.*b_gamma;
	      Jac1 = Jac1./(dta[.,flagprcm]); 
	      Jac101 = substute(Jac1,b_gamma.==0,1);
	      
		  if(igamma==1);
		  jac1 = jac1[.,igamma]~Jac101[.,igamma+1:cols(Jac101)];
	      elseif(igamma==nc-1);
		  jac1 = Jac101[.,1:igamma-1]~jac1[.,igamma:cols(jac1)];
	      else;
		  jac1 = Jac101[.,1:igamma-1]~jac1[.,igamma]~Jac101[.,igamma+1:cols(jac101)];
	      endif;
	  
		  
		  Jac11 = ((dta[.,flagchm~flagchmo]+gamma_req))./(all_alpha_un);
	      Jac11 = Jac11./(dta[.,flagprcm]); 
	      Jac11 = Jac11.*b_gamma;
		  		  
		  Jad1 = sumc((Jac11'));
	      Jac1 = (prodc((Jac1'))).*Jad1;
		  
		//****************************************************
		  Jac2 = (all_alpha_un.*b_gamma)./((dta[.,flagchm~flagchmo]+gamma_req));
	      Jac2 = Jac2./(dta[.,flagprcm]); 
	      Jac2 = substute(Jac2,b_gamma.==0,1);
		  
		  Jac22 = all_gamma2;
	      Jac22 = jac22.*b_inside;
		  
		  Jad2 = sumc((Jac22'));
	      Jac2 = (prodc((Jac2'))).*Jad2;
		//******************************************************
		  Diff_Jacobian1[.,igamma] = Jac1 + Jac2;
		  clear Jac1,Jac11,Jae1,Jad1,Jac2,Jac22,Jad2;
		//********************************************Utility Part
		gamma_uti = zeros(nobs,nc-1);
		gamma_uti[.,igamma] = -(dta[.,flagchm[igamma]]./gamma_req[.,igamma]);
		
		diff_utility_gamma = - (all_alpha_un[.,1:nc-1]./ (dta[.,flagchm]+gamma_req[.,1:nc-1]));
		diff_utility_gamma = -(diff_utility_gamma.*gamma_uti);
				
		if(Mean_Negative eq 1);
		    diff_mat11 = -(reshape(diff_utility_gamma,nind*(nc-1),1));
	    else;
		    diff_mat11 = (reshape(diff_utility_gamma,nind*(nc-1),1));
		endif;
       
	    diff_mat12 = diff_mat12 ~ diff_mat11;
		clear diff_mat11;
		clear all_alpha_un,gamma_req,all_gamma1,denom,all_gamma2,alpha_sum,gamma_sum,gamma_uti,b_gamma,diff_utility_gamma;
	endfor;
//-----------------------------------------------------------------------------------------------------------------------------------------------------	
	gamma_gradient = zeros(rows(grid),nc-1);
	
	for igamma(1,nc-1,1);
		diff_mat1 = diff_mat12[.,igamma];
		Diff_Jacobian = Diff_Jacobian1[.,igamma];
	    seednext = seed30;
		
		
	    for all_grid(1,rows(grid),1);
	       current_grid = grid[all_grid,.];
	       req_grid = {}; r11=1;
	       do until (r11>cols(current_grid));
	          if(current_grid[1,r11] ne 0);
				  req_grid = req_grid | current_grid[1,r11];
			  endif;
			r11 = r11 + 1;
		   endo;
		
		 
		Total_g = 0;
	    
		for pair11(1,rows(req_grid),1);
				    pair1 = req_grid[pair11,1];
		    			
			            p1v = {}; p1_mean = {}; p1d_mean = {}; 
			            p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
						p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
						p1d_mean = p1d_mean ~ diff_mat1[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
			
		        for pair22(pair11,rows(req_grid),1);
							pair2 = req_grid[pair22,1];
				    					
					    p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2d_mean = {}; meand = {};
					
							if(pair1 NE pair2);
									p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
									p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
									p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									co_var = co_var ~ (p1v ~ p1cv);
									co_var = co_var | (p2cv ~ p2v);
									mean = mean | p1_mean;
									mean = mean | p2_mean;
									
									p2d_mean = p2d_mean ~ diff_mat1[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
									meand = meand | p1d_mean;
									meand = meand | p2d_mean;
									
									pair1_chose = Chosen_Alternative[pair1,.];
									pair2_chose = Chosen_Alternative[pair2,.];
									alt_list = pair1_chose'|pair2_chose';
									R = zeros(2*(nc-1),2*(nc-1)); 
									Total_NC = 2*(nc-1)-sumc(alt_list);
									Total_C = 2*(nc-1)-Total_NC;
									counter = 0;
									for i(1,2*(nc-1),1);
										if(alt_list[i]==0);
										   counter = counter+1;
										   R[counter,i]=1;
										endif;
									endfor;
									
									for j(1,2*(nc-1),1);
										if(alt_list[j]==1);
										   counter = counter+1;
										   R[counter,j]=1;
										endif;
									endfor;	
									
									if(Total_NC == 2*(nc-1));
										om = diag(co_var);
										Mean_NC_final = mean'./(sqrt(om'));
										Var_NC_final = corrvc(co_var);
										Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
										
										Mean_NCd = meand;
										Mean_NCd_changed  = Mean_NCd;	
										Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
										
										seed20=seednext;
									    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
							            shi_a = (g[1,1:Total_NC])';
								        seednext=s2;
										
										 
								  
								        if(w eq upper_limit OR w lt upper_limit);
                                           g_part3 = 0;
							            else;
								          g_part3 = (1/w)*(Mean_NCd_final' * shi_a);
										  clear g,shi_a;
								        endif;

                                         g_part2 = 0;
										 g_part11 = (1/(Jacobian[pair1]*Jacobian[pair2]));
										 g_part12 = (Jacobian[pair1]*Diff_Jacobian[pair2]) + (Diff_Jacobian[pair1]*Jacobian[pair2]);
										 g_part1 = g_part11*g_part12;
										 
										 clear Mean_NC_final,Var_NC_final,Mean_NCd,meand,Mean_NCd_changed,Mean_NCd_final,g,R,co_var,mean;
									 elseif(Total_C == 2*(nc-1));
										 Mean_C = mean;
										 Var_C = co_var;
										 Mean_Cd = meand;
										 
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										 
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part2 = 0;
										 else;	
											g_part2 = (1/prob_org1)*(Mean_Cd' * phi_a);
										endif;
																	 
										 g_part3 = 0;
										 g_part11 = (1/(Jacobian[pair1]*Jacobian[pair2]));
										 g_part12 = (Jacobian[pair1]*Diff_Jacobian[pair2]) + (Diff_Jacobian[pair1]*Jacobian[pair2]);
										 g_part1 = g_part11*g_part12;
										 clear Mean_C,Var_C,Mean_Cd,meand,R,co_var,mean;
									 else;
										 RNC = R[1:Total_NC,1:2*(nc-1)];
										 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

										 Mean_C = RC*mean;
										 Mean_NC = RNC*mean;
											
										 Var_C = RC*co_var*RC';
										 Var_NC = RNC*co_var*RNC';
										 Var_NCC = RNC*co_var*RC';
											
																		
										 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
										 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
											
										 om = diag(Var_NC_changed);
										 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
										 Var_NC_final = corrvc(Var_NC_changed);
										 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
											
										 //*****************************************************************************	
										 phi_a = pdfgmean(Mean_C,Var_C);
										 prob_org1 = pdfmvn(Mean_C,Var_C);
										
										 Mean_Cd = RC*meand;
																					
										 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
											g_part2 = 0;
										 else;	
											g_part2 = (1/prob_org1)*(Mean_Cd' * phi_a);
										endif;
										//******************************************************************************
										 Mean_NCd = RNC*meand;
										 Mean_NCd_changed  = Mean_NCd - (Var_NCC*(inv(Var_C))*Mean_Cd);	
										 Mean_NCd_final = Mean_NCd_changed./(sqrt(om));
										 
										  if(Total_NC == 1);
												 w = cdfMvn(Mean_NC_final,Var_NC_final);
												 shi_a = pdfn(Mean_NC_final);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part3 = 0;
												 else;	
													g_part3 = (1/w)*(Mean_NCd_final' * shi_a);
												 endif;
										  elseif(Total_NC == 2);
												 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
												 if(w eq upper_limit OR w lt upper_limit);
													 g_part3 = 0;
												 else;	
													g_part3 = (1/w)*(Mean_NCd_final' * shi_a[1:2,1]);
												 endif;										 
										  else;
										         seed20=seednext;
												 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
							                      shi_a = (g[1,1:Total_NC])';
											      seednext=s2;
												 												  
										  
									             if(w eq upper_limit OR w lt upper_limit);
                                                    g_part3 = 0;
										         else;
											        g_part3 = (1/w)*(Mean_NCd_final' * shi_a);
													clear g,shi_a;
										         endif;

      							          endif;
										 
											 g_part11 = (1/(Jacobian[pair1]*Jacobian[pair2]));
										     g_part12 = (Jacobian[pair1]*Diff_Jacobian[pair2]) + (Diff_Jacobian[pair1]*Jacobian[pair2]);
											 g_part1 = g_part11*g_part12;
											 clear Mean_C,Var_C,Mean_NC,Var_NC,Var_NCC,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_Cd,Mean_NCd,meand,Mean_NCd_changed;
											 clear Mean_NCd_final,shi_a,R,RNC,RC,co_var,mean; 
								    endif;
											 Total_g = Total_g +g_part1 + g_part2+ g_part3;
										 // ************************************************************************
								endif;
						
				           endfor;
			            endfor;
				gamma_gradient[all_grid,igamma] = Total_g;
				clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1d_mean,p2d_mean,g_part11,g_part12;
			endfor;
			clear Diff_Jacobian,diff_mat1;
	endfor;
		
//----------------------------------------------------------------------------------------------------------------------------------------------		
    Psi_gradient = zeros(rows(grid),nCholErr);
	
	for ipsi (1,nCholErr,1);     
        
		if(ipsi eq 1);
			Psi_gradient[.,ipsi] = zeros(rows(grid),1);
		else;
			
			d_chol_Psi = zeros(nCholErr,1);d_chol_Psi[ipsi]=1;                         d_chol_Psi = upmat(xpnd(d_chol_Psi));
			d_Psi = d_chol_Psi'*chol_Psi + chol_Psi'*d_chol_Psi;      
			Psi_expand =  eye(nind).*.d_Psi;
			Final_Error = (S_matrix * Psi_expand * S_matrix');
					
			clear d_chol_Psi,d_Psi,Psi_expand;
			seednext = seed30; 
	 
			for all_grid(1,rows(grid),1);
				 current_grid = grid[all_grid,.];
				 req_grid = {}; r11=1;
				 do until (r11>cols(current_grid));
					if(current_grid[1,r11] ne 0);
					   req_grid = req_grid | current_grid[1,r11];
					endif;
					r11 = r11 + 1;
				endo;
			
			    Total_g = 0;
				for pair11(1,rows(req_grid),1);
				    pair1 = req_grid[pair11,1];
										
					p1v = {}; p1_mean = {}; p1v_d = {};
								p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1v_d = p1v_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
								p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
					
						for pair22(pair11,rows(req_grid),1);
							pair2 = req_grid[pair22,1];
														
							     p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2v_d = {}; p1cv_d = {}; p2cv_d = {}; co_var_d = {};
							
										if(pair1 NE pair2);
											p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                            p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
                                            p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
                                            p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
											co_var = co_var ~ (p1v ~ p1cv);
											co_var = co_var | (p2cv ~ p2v);
											mean = mean | p1_mean;
											mean = mean | p2_mean;
											
											p2v_d = p2v_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
											p1cv_d = p1cv_d ~ Final_Error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
											p2cv_d = p2cv_d ~ Final_Error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
											co_var_d = co_var_d ~ (p1v_d ~ p1cv_d);
											co_var_d = co_var_d | (p2cv_d ~ p2v_d);
											
											pair1_chose = Chosen_Alternative[pair1,.];
											pair2_chose = Chosen_Alternative[pair2,.];
											alt_list = pair1_chose'|pair2_chose';
											R = zeros(2*(nc-1),2*(nc-1)); 
											Total_NC = 2*(nc-1)-sumc(alt_list);
											Total_C = 2*(nc-1)-Total_NC;
											counter = 0;
											for i(1,2*(nc-1),1);
												if(alt_list[i]==0);
												   counter = counter+1;
												   R[counter,i]=1;
												endif;
											endfor;
											
											for j(1,2*(nc-1),1);
												if(alt_list[j]==1);
												   counter = counter+1;
												   R[counter,j]=1;
												endif;
											endfor;	
											
											if(Total_NC == 2*(nc-1));
												om = diag(co_var);
												Mean_NC = mean;
												Mean_NC_changed = Mean_NC;
												Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
												Var_NC_changed = co_var ;
												Var_NC_final = corrvc(Var_NC_changed);
												Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
												
												Mean_NCd_changed  = zeros(Total_NC,1);
												Var_NCd_changed = co_var_d ;
											
												omncd = diag(Var_NCd_changed);
												Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
												Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
												Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
											
												shi_r_unq = {};
												for ishi(1,rows(Var_NCd_final)-1,1);
												   shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
												endfor;
																	
												seed20=seednext;
											    {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
									             shi_a = (g[1,1:Total_NC])';
									             shi_r = (g[1,Total_NC+1:cols(g)])';
												 seednext=s2;
												
												 
									
									            if(w eq upper_limit OR w lt upper_limit);
									               g_part2 = 0;
									            else;
									               g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
												   clear g,shi_a,shi_r;
									            endif;

									            g_part1 = 0;
												clear Mean_NC,Mean_NC_final,Var_NC_final,Mean_NCd_changed,Var_NCd_changed,om,omncd,Mean_NCd_final,Var_NCd_final,shi_r_unq,shi_a,shi_r,g,R,co_var,co_var_d,mean,om1,omncd1;
											elseif(Total_C == 2*(nc-1));
												 Mean_C = mean;
												 Var_C = co_var;
												 Var_Cd = co_var_d;
												 phi_r = pdfgcov(Mean_C,vech(Var_C));
												 prob_org1 = pdfmvn(Mean_C,Var_C);
												
												 phi_rd_unq = (vech(Var_Cd))';
																				 
												 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
													g_part1 = 0;
												 else;	
													g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
												 endif; 
												 
												 g_part2 = 0;
												 clear Mean_C,Var_C,Var_Cd,phi_r,phi_r_unq,phi_rd_unq,R,co_var,co_var_d,mean; 
											 else;
												 RNC = R[1:Total_NC,1:2*(nc-1)];
												 RC =  R[Total_NC+1:2*(nc-1),1:2*(nc-1)];

												 Mean_C = RC*mean;
												 Mean_NC = RNC*mean;
											
												 Var_C = RC*co_var*RC';
												 Var_NC = RNC*co_var*RNC';
												 Var_NCC = RNC*co_var*RC';
											
												 Var_Cd = RC*co_var_d*RC';
												 Var_NCd = RNC*co_var_d*RNC';
												 Var_NCCd = RNC*co_var_d*RC';
												
											
												 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
												 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
											
												 om = diag(Var_NC_changed);
												 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
												 Var_NC_final = corrvc(Var_NC_changed);
												 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
											
											  //*****************************************************************************	
												 phi_r = pdfgcov(Mean_C,vech(Var_C));
												 prob_org1 = pdfmvn(Mean_C,Var_C);
												
												 phi_rd_unq = (vech(Var_Cd))';
												
												 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
													g_part1 = 0;
												 else;	
													g_part1 = (1/prob_org1)*(phi_rd_unq * phi_r);
												 endif; 
											 //******************************************************************************
												 Mean_NCd_changed  =  - (Var_NCCd*(inv(Var_C))*Mean_C) + (Var_NCC * (inv(Var_C)) * Var_Cd *(inv(Var_C))*  Mean_C);	
												 Var_NCd_changed = Var_NCd - (Var_NCCd*(inv(Var_C))*Var_NCC') + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))*  Var_NCC') - (Var_NCC*(inv(Var_C))*Var_NCCd');
												 
												 omncd = diag(Var_NCd_changed);
												 Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
												 Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(1/2))   + ((Var_NC_changed ./(om^(1/2)) )' ./(om^(3/2))) .* omncd ) ;
												 Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
												 
																				
												 if(Total_NC == 1);
													 w = cdfMvn(Mean_NC_final,Var_NC_final);
													 shi_a = pdfn(Mean_NC_final);
													 if(w eq upper_limit OR w lt upper_limit);
														 g_part2 = 0;
													 else;	
													 g_part2 = (1/w)*(Mean_NCd_final * shi_a);
													 endif;
													
												 elseif(Total_NC == 2);
													 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
													 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
													 if(w eq upper_limit OR w lt upper_limit);
														 g_part2 = 0;
													 else;	
														g_part2 = (1/w)*(Mean_NCd_final * shi_a[1:2,1] + Var_NCd_final[1,2]*shi_a[3,1]);
													endif;	
												else;
													 seed20=seednext;	
													 {w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
													 shi_a = (g[1,1:Total_NC])';
													 shi_r = (g[1,Total_NC+1:cols(g)])';
													 seednext=s2;
													 													 
													 shi_r_unq = {};
													 for ishi(1,rows(Var_NCd_final)-1,1);
														shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
													 endfor;
													   
													   if(w eq upper_limit OR w lt upper_limit);
														  g_part2 = 0;
													   else;
														 g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
														 clear g,shi_a,shi_r;
													   endif;

													   clear shi_r_unq;
									          endif;
												 clear Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Var_Cd,Var_NCd,Var_NCCd,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_NCd_changed;
												 clear Var_NCd_changed,Mean_NCd_final,Var_NCd_final,R,RNC,RC,shi_a;
												 clear om,omncd,co_var,co_var_d,mean;
											 endif;
												 
													Total_g = Total_g +g_part1 + g_part2;
															
										endif;
										
							   endfor;
						  endfor;
				Psi_gradient[all_grid,ipsi] = Total_g;
				clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1v_d,p2v_d,p1cv_d,p2cv_d,fix_check;
			endfor;
			clear Final_error;
		endif;
	endfor;
		
 //---------------------------------------------------------------------------------------------------------------------------------------------------
    delta_gradient = zeros(rows(grid),nc-1);
	Grid_pair = zeros(rows(grid),nc-1);
	for idel(1,nc-1,1);
        
		del_required = zeros(nc-1,1);   del_required[idel] = 1;     dell = del_required;
		ddelta = zeros(nc-1,nc-1); ddelta = diagrv(ddelta,dell);
						
		d_Sq1 = (ones(nind,nind).*.ddelta);
		d_Sq2 = d_Sq1 .* (weightM1.*.eye(nc-1));
		d_capS = S_matrix * d_Sq2 * S_matrix;
						
		v2 = (ones(nc-1,1) .*. smallB )*~(X_subtracted)';
		j=1;
		v = {};
		do until j == nc;
			   v = v~(sumc(v2[(j-1)*nvarm+1:(j*nvarm),.]));
			   j = j+1;
		endo;
					
		clear v2;
			  
		v = reshape(v,nind*(nc-1),1);
		capV = d_capS * v;
		clear v;
					
		if(Mean_Negative eq 1);
			Delta_Mean = -(capV);
		else;
			Delta_Mean = (capV);
		endif;
						 
		clear capV;
						 
		Delta_error = (d_capS*Pure_error*S_matrix') + (S_matrix * pure_error* d_capS');
        clear d_capS;	
		seednext = seed30;
		
		for all_grid(1,rows(grid),1);
				 current_grid = grid[all_grid,.];
				 req_grid = {}; r11=1;
				 do until (r11>cols(current_grid));
					if(current_grid[1,r11] ne 0);
					   req_grid = req_grid | current_grid[1,r11];
					endif;
					r11 = r11 + 1;
				endo;
			
			    Total_g = 0;
				inpair = 0;
		        for pair11(1,rows(req_grid),1);
				                pair1 = req_grid[pair11,1];
										
										p1v = {}; p1_mean = {}; p1v_d = {}; p1d_mean = {};
											
											p1v = p1v ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
											p1v_d = p1v_d ~ Delta_error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
											p1_mean = p1_mean ~ B_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
											p1d_mean = p1d_mean ~ Delta_Mean[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),1];
											
									for pair22(pair11,rows(req_grid),1);
							            pair2 = req_grid[pair22,1];
										
										
											 meand = {}; p2v = {}; p1cv = {}; p2cv = {}; p2_mean = {}; co_var = {}; mean = {}; p2v_d = {}; p1cv_d = {}; p2cv_d = {}; co_var_d = {}; p2d_mean = {};
										
													if(pair1 NE pair2);
														
														p2v = p2v ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p1cv = p1cv ~ sigma_mat[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p2cv = p2cv ~ sigma_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
														p2_mean = p2_mean ~ B_mat[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
														co_var = co_var ~ (p1v ~ p1cv);
														co_var = co_var | (p2cv ~ p2v);
														mean = mean | p1_mean;
														mean = mean | p2_mean;
														
														p2v_d = p2v_d ~ Delta_error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p1cv_d = p1cv_d ~ Delta_error[(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1),(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1)];
														p2cv_d = p2cv_d ~ Delta_error[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),(nc-1)*(pair1-1)+1:(nc-1)*(pair1-1)+(nc-1)];
														p2d_mean = p2d_mean ~ Delta_Mean[(nc-1)*(pair2-1)+1:(nc-1)*(pair2-1)+(nc-1),1];
														co_var_d = co_var_d ~ (p1v_d ~ p1cv_d);
														co_var_d = co_var_d | (p2cv_d ~ p2v_d);
														meand = meand | p1d_mean;
														meand = meand | p2d_mean;
														
														pair1_chose = Chosen_Alternative[pair1,.];
														pair2_chose = Chosen_Alternative[pair2,.];
														alt_list = pair1_chose'|pair2_chose';
														R = zeros(2*(nc-1),2*(nc-1)); 
														Total_NC = 2*(nc-1)-sumc(alt_list);
														Total_C = 2*(nc-1)-Total_NC;
														counter = 0;
														for i(1,2*(nc-1),1);
															if(alt_list[i]==0);
															   counter = counter+1;
															   R[counter,i]=1;
															endif;
														endfor;
														
														for j(1,2*(nc-1),1);
															if(alt_list[j]==1);
															   counter = counter+1;
															   R[counter,j]=1;
															endif;
														endfor;	
														
																								
														if(Total_NC == 2*(nc-1));
															om = diag(co_var);
															Mean_NC = mean;
															Mean_NC_changed  =  Mean_NC;
															Mean_NC_final = Mean_NC_changed'./(sqrt(om'));
															Var_NC_changed = co_var ;
															Var_NC_final = corrvc(Var_NC_changed);
															Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
															
															Mean_Cd = meand;
															Mean_NCd = meand;
															Var_NCd = co_var_d;
															Mean_NCd_changed  =  Mean_NCd;
															Var_NCd_changed = Var_NCd;
														
															omncd = diag(Var_NCd_changed);
															Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
															Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(3/2)) .* om  + (Var_NC_changed ./(om^(3/2)) .* om )' ./(om^(3/2)) .* omncd ) ;
															Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
														
															shi_r_unq = {};
															for ishi(1,rows(Var_NCd_final)-1,1);
															   shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
															endfor;
																				
															seed20=seednext;
															{w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
															shi_a = (g[1,1:Total_NC])';
															shi_r = (g[1,Total_NC+1:cols(g)])';
															seednext=s2;
															
														
															if(w eq upper_limit OR w lt upper_limit);
																g_part2 = 0;
															else;
																g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
																clear g,shi_a,shi_r;
															endif;
															
															g_part1 = 0;
															clear Mean_NC_changed,Mean_Cd,Mean_NCd,Mean_NC,Mean_NC_final,Var_NC_final,Mean_NCd_changed,Var_NCd_changed,om,omncd,Mean_NCd_final,Var_NCd_final,shi_r_unq,shi_a,shi_r,g,R,co_var,co_var_d,mean,om1,omncd1;
														elseif(Total_C == 2*(nc-1));
															 Mean_C = mean;
															 Mean_cd = meand;
															 Var_C = co_var;
															 Var_Cd = co_var_d;
															 phi_a = pdfgmean(Mean_C,Var_C);
															 phi_r = pdfgcov(Mean_C,vech(Var_C));
															 prob_org1 = pdfmvn(Mean_C,Var_C);
															
															 phi_rd_unq = (vech(Var_Cd))';
															
															 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
																 g_part1 = 0;
															 else;
																 g_part1 = (1/prob_org1)*(Mean_cd'*phi_a + phi_rd_unq*phi_r);
															 endif;
															 
															 g_part2 = 0;
															 clear Mean_C,Var_C,Var_Cd,phi_r,phi_r_unq,phi_rd_unq,R,co_var,co_var_d,mean; 
														 else;
															 RNC = R[1:Total_NC,.];
															 RC =  R[Total_NC+1:2*(nc-1),.];

															 Mean_C = RC*mean;
															 Mean_NC = RNC*mean;
															 
															 Mean_Cd = RC*meand;
															 Mean_NCd = RNC*meand;
														
															 Var_C = RC*co_var*RC';
															 Var_NC = RNC*co_var*RNC';
															 Var_NCC = RNC*co_var*RC';
														
															 Var_Cd = RC*co_var_d*RC';
															 Var_NCd = RNC*co_var_d*RNC';
															 Var_NCCd = RNC*co_var_d*RC';
															
														
															 Mean_NC_changed  = Mean_NC - (Var_NCC*(inv(Var_C))*Mean_C);	
															 Var_NC_changed = Var_NC - (Var_NCC*(inv(Var_C))*Var_NCC');
														
															 om = diag(Var_NC_changed);
															 Mean_NC_final = Mean_NC_changed'./(sqrt((om')));
															 Var_NC_final = corrvc(Var_NC_changed);
															 Var_NC_final = diagrv(Var_NC_final,ones(Total_NC,1));
														
														  //*****************************************************************************	
															 phi_a = pdfgmean(Mean_C,Var_C);
															 phi_r = pdfgcov(Mean_C,vech(Var_C));
															 prob_org1 = pdfmvn(Mean_C,Var_C);
															
															 phi_rd_unq = (vech(Var_Cd))';
															
															 if(prob_org1 eq upper_limit OR prob_org1 lt upper_limit);
																 g_part1 = 0;
															 else;
																 g_part1 = (1/prob_org1)*(Mean_cd'*phi_a + phi_rd_unq*phi_r);
															 endif;
															 
														 //******************************************************************************
															 Mean_NCd_changed  =  Mean_NCd - (Var_NCC*(inv(Var_C))*Mean_Cd)	- (Var_NCCd*(inv(Var_C))*Mean_C) + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Mean_C);	
															 Var_NCd_changed = Var_NCd - (Var_NCCd*(inv(Var_C))*Var_NCC') + (Var_NCC * (inv(Var_C)) * Var_Cd* (inv(Var_C))* Var_NCC') - (Var_NCC*(inv(Var_C))*Var_NCCd');
														
															 omncd = diag(Var_NCd_changed);
															 Mean_NCd_final = (  sqrt(om') .* Mean_NCd_changed' - Mean_NC_changed' .* omncd' ./ sqrt(om') ./2   ) ./ (om');
															 Var_NCd_final = ( (Var_NCd_changed./sqrt(om))' ./ sqrt(om) ) - 0.5 * ( (Var_NC_changed ./(om^(3/2)) .* omncd )' ./(om^(3/2)) .* om  + (Var_NC_changed ./(om^(3/2)) .* om )' ./(om^(3/2)) .* omncd ) ;
															 Var_NCd_final = diagrv(Var_NCd_final,ones(Total_NC,1));
														
																							
															 if(Total_NC == 1);
																 w = cdfMvn(Mean_NC_final,Var_NC_final);
																 shi_a = pdfn(Mean_NC_final);
																 if(w eq upper_limit OR w lt upper_limit);
																	 g_part2 = 0;
																 else;
																 g_part2 = (1/w)*(Mean_NCd_final * shi_a);
																 endif;
															elseif(Total_NC == 2);
																 w = cdfbvn(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
																 shi_a = cdfbvn_grad1(Mean_NC_final[1,1],Mean_NC_final[1,2],Var_NC_final[1,2]);
																 if(w eq upper_limit OR w lt upper_limit);
																	 g_part2 = 0;
																 else;	
																	g_part2 = (1/w)*(Mean_NCd_final * shi_a[1:2,1] + Var_NCd_final[1,2]*shi_a[3,1]);
																 endif;	
														   else;
																seed20=seednext;
																{w,g,s2} = pdfmvna(Mean_NC_final,Var_NC_final,seed20);
																shi_a = (g[1,1:Total_NC])';
																shi_r = (g[1,Total_NC+1:cols(g)])';
																seednext=s2;
																 
																	
																 
																 shi_r_unq = {};
																 for ishi(1,rows(Var_NCd_final)-1,1);
																	shi_r_unq = shi_r_unq ~ Var_NCd_final[ishi,ishi+1:cols(Var_NCd_final)];
																 endfor;
																 
																  if(w eq upper_limit OR w lt upper_limit);
																	g_part2 = 0;
																  else;
																	g_part2 = (1/w)*((Mean_NCd_final * shi_a) + (shi_r_unq*shi_r));
																	clear g,shi_a,shi_r;
																  endif;
																 
																  clear shi_r_unq;
														   endif;
															 clear Mean_C,Mean_NC,Var_C,Var_NC,Var_NCC,Var_Cd,Var_NCd,Var_NCCd,Mean_NC_changed,Var_NC_changed,Mean_NC_final,Var_NC_final,Mean_NCd_changed;
															 clear Var_NCd_changed,Mean_NCd_final,Var_NCd_final,R,RNC,RC,shi_a;
															 clear om,omncd,co_var,co_var_d,mean;
													   endif;
																
																Total_g = Total_g +g_part1 + g_part2;
																inpair = inpair + 1;
																						   
																
													//*****************************************************************************
												endif;
													
										endfor;
									endfor;
					
					delta_gradient[all_grid,idel] =  Total_g;
					
					if(idel eq 1);
					Grid_pair[all_grid,idel] = inpair;
				    endif;
				
					clear p1cv,p2cv,p1v,p2v,pair1_chose,pair2_chose,alt_list,p1v_d,p2v_d,p1cv_d,p2cv_d,p1_mean,p2_mean,p1d_mean,p2d_mean;
				endfor;
				clear Delta_Mean,Delta_error;
	endfor;
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------			
			
 Collect_all = zeros(rows(parm),rows(grid));
 beta_gradient = beta_gradient';
 OmTild_gradient = OmTild_gradient';
 alpha_gradient = alpha_gradient';
 gamma_gradient = gamma_gradient';
 Psi_gradient = Psi_gradient';
 delta_gradient = delta_gradient';
 
 for ic(1,rows(grid),1);
	 Collect_all[.,ic] = (beta_gradient[.,ic]|OmTild_gradient[.,ic]|alpha_gradient[.,ic]|gamma_gradient[.,ic]|0|Psi_gradient[.,ic]|delta_gradient[.,ic]);
 endfor;
 
 Collect_all = selif(Collect_all,_max_active);
 All_gradient = zeros(sumc(_max_active),sumc(_max_active));
 for ic(1,rows(grid),1); 
     temp = Collect_all[.,ic]*(Collect_all[.,ic])';
	 temp = temp./Grid_pair[ic,1];
	 All_gradient = All_gradient + temp;
	 clear temp;
 endfor;
 
 All_gradient = (1/rows(grid))*All_gradient;
 retp(All_gradient);
endp;
 
 //----------------------------------------------------------------------------------------------------------------------------
 proc(1)=pdfmvn(x,s);
	 local d,p,p1,p2;
	 d = rows(x);
	 p1 = exp(-0.5*(x'*inv(s)*x));
	 p2 = ((2*pi)^(d/2))*sqrt(det(s));
	 p = p1/p2;
	 retp(p);
endp;

proc(1)=pdfgmean(x,s);
    local d,p,p1,p2,p3,grad1,grad,store,ie;
	 d = rows(x);
	 p1 = exp(-0.5*((x)'*inv(s)*(x)));
	 p2 = ((2*pi)^(d/2))*sqrt(det(s));
	 p3 = inv(s);
	 p = p1/p2;
	 store = zeros(d,1);
	 for ie(1,d,1);
		  grad = -1*(x.*p3[.,ie]);
		  grad1 = sumc(grad);
		  grad1 = p*grad1;
		  store[ie] = grad1;
	 endfor;
	 retp(store);
endp;

proc(1)=pdfgcov(x,r);
	local d,p1,p2,p,p4,out,i,j,diff_matrix,part11,part12,part13,part1,s,ncholerr,diff_matrix1;
    local part21,part22,part23,part24,part2,gradient;
    d = rows(x);
    s = xpnd(r);
	ncholerr = rows(r);
    p1 = exp(-0.5*((x)'*inv(s)*(x)));
    p2 = ((2*pi)^(d/2));
    p = p1/p2;
    p4 = inv(s);
    out = {};
    for i(1,ncholerr,1);
        
            diff_matrix1 = zeros(ncholerr,1);
			diff_matrix1[i,1]= 1;
			diff_matrix = xpnd(diff_matrix1);
            
            part11 = p4*diff_matrix;
            part12 = diag(part11);
            part13 = sumc(part12);
            part1 = -0.5*part13;
            part1 = part1/sqrt(det(s));
            
            part21 = (((p4*x)*x')*p4);
            part22 = part21*diff_matrix;
            part23 = diag(part22);
            part24 = sumc(part23);
            part2 = 0.5*part24;
            part2 = part2/sqrt(det(s));
            
            gradient = p*(part1 + part2);
            out = out | gradient;
        
    endfor;
    retp(out);
endp;

proc(1)=cdfbvn_grad1(a,b,corr);
    local d_a,d_b,d_corr;
    d_a     = pdfn(a) .* cdfn((b- corr .* a) ./ sqrt(1-corr .* corr) );
    d_b     = pdfn(b) .* cdfn((a- corr .* b) ./ sqrt(1-corr .* corr) );
    d_corr  = (exp(-0.5*((a^2 + b^2 - 2*corr .* a .* b   ) ./ (1-corr .* corr) ))) ./ ((2*pi) * sqrt(1-corr .* corr));
    retp(d_a|d_b|d_corr);
endp;

proc(1) = gettime();
	local y,timesec;
	y = time;
	timesec = y[1,1]*3600 + y[2,1]*60 + y[3,1];
	retp(timesec);
endp;

proc (2) = cdfmvna(a,r,s);
local nn,ss1,om,m,aa,ab,w,cm,s1,n1,p,j,x,rho,y,z,z1,z3,z2,cond,k,omega21,omega11,condk,pcomb,newper,rnum,ss;

  m = cols(a);
  w = {};
  { rnum, ss } = rndn(1,m,s);
  aa = seqa(1,1,m)~(rnum)';
  aa = sortc(aa,2);
  w  = w|((aa[.,1])');
  s  = ss;	
  w  = w';  
  
n1 = cols(w);
p = 0;
j = 1;

a = a.*(a .<5.7)+5.7*(a.>=5.7);      
a = a.*(a .>-5.7)-5.7*(a.<=-5.7);  

ab = a';
do until j > n1;
  x = ab[w[.,j]];
  rho = submat(r,w[.,j],w[.,j]);
  y = reshape(((ones(m,1).*.x)'),m,m);
  z = cdfbvn(x,y,rho);
  z = diagrv(z,cdfn(x));
  z1 = cdfn(x).*cdfn(y);
  z3 = cdfn(x);
  z2 = 1-z3;
  cond = 1;
  k = 3;
  do until k > m;
    omega21 = z[k,1:k-1]-z1[k,1:k-1];
    omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
    trap 1;
    cm = invpd(omega11);
    if scalerr(cm);
      cm=inv(omega11);
    endif;
    trap 0;
    condk = z3[k]+omega21*(cm)*z2[1:k-1];   
    cond=cond*condk;
    k = k+1;
  endo;
  pcomb = z[1,2]*cond;
  p = p+pcomb;    
  j=j+1;
endo;
if ((p/n1) >0 and (p/n1) <=1);
  retp(p/n1,s);
else;
  { nn,ss1 } = cdfmvna(a,r,s);
  retp(nn,ss1);
endif;  
endp;


proc (3) = pdfmvna(a,r,s);
local m,w,s1,n1,p,j,x,rho,y,z,z1,z3,z2,cond,k,omega21,omega11,omega55,condk,pcomb,cm,int_count;
local rhovec,c,rho1,rho2,g3,g5,g10,g11,g12,g13,g14,g15,g20,g25,g30,g53,g31,g35,g36,g40,g45,g46,g47,g50,g51;
local grff,gw,condpass,sk,l,ab,ir,jr,res2,g80,g81,g59,kk,g49,g65,g55,mm,res,res1,aaa1,g56,g57,g58,g60,g61,g62,gr,gr1,gw1;
local gw2,gr2,gr3,aaa,gwf,grf,gwfinal,grfinal,invomg11,nnnn,gggg,ssss1,aa,t,newper,rnum,ss,r_1;

	  m = cols(a);
	  w = {};
	  { rnum, ss } = rndn(1,m,s);
	  aa = seqa(1,1,m)~(rnum)';
	  aa = sortc(aa,2);
	  w  = w|((aa[.,1])');
	  s  = ss;	
	  w  = w';

	n1 = cols(w);
	p = 0;
	j = 1;

	a = a.*(a .<5.7)+5.7*(a.>=5.7);     
	a = a.*(a .>-5.7)-5.7*(a.<=-5.7);  

	ab = a';
	condpass={};
	do until j > n1;
	  x = ab[w[.,j]];
	  rho = submat(r,w[.,j],w[.,j]);
	  y = reshape(((ones(m,1).*.x)'),m,m);
	  z = cdfbvn(x,y,rho);
	  z = diagrv(z,cdfn(x));
	  z1 = cdfn(x).*cdfn(y);
	  z3 = cdfn(x);
	  z2 = 1-z3;
	  cond = 1;
	  k = 3;
	  do until k > m;
		omega21 = z[k,1:k-1]-z1[k,1:k-1];
		omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
		trap 1;
		cm = invpd(omega11);
		if scalerr(cm);
		  cm=inv(omega11);
		endif;
		trap 0;
		condk = z3[k]+omega21*(cm)*z2[1:k-1];  
		cond=cond*condk;
		k = k+1;
	  endo;
	  pcomb = z[1,2]*cond;
	  condpass = condpass~cond;
	  p = p+pcomb;    
	  j=j+1;
	endo;

	gwfinal = zeros(1,m);
	grfinal = zeros(1,((m-1)*(m)/2));
	j=1;
	do until j > n1;
	  x = ab[w[.,j]];
	  rho = submat(r,w[.,j],w[.,j]);
	  rhovec = {};
	  c=1;
	  do until c==cols(rho);
		 rhovec = rhovec~rho[c,c+1:cols(rho)];
		 c=c+1;
	  endo;
	  y = reshape(((ones(m,1).*.x)'),m,m);
	  z = cdfbvn(x,y,rho);
	  z = diagrv(z,cdfn(x));
	  z1 = cdfn(x).*cdfn(y);
	  z3 = cdfn(x);
	  z2 = 1-z3;
	  rho1 = diagrv(rho,zeros(m,1));
	  rho2 = sqrt(1-rho1^2);
	  g3 = pdfn(x);
	  g5 = (y-rho1.*x)./rho2;
	  g10 = g3.*cdfn(g5);
	  g11 = g3.*cdfn(y);
	  g12 = g10-g11;
	  g13 = g12;
	  g14 = g3.*(1-2*cdfn(x));
	  g15 = diagrv(g13,g14);
	  g20 = -g3;

	  g25 = (1/rho2).*g3.*pdfn(g5);
	  g25 = diagrv(g25,zeros(m,1));
	  

	  g30 = g10[1,2]~g10[2,1]~zeros(1,m-2);
	  g53 = g25[1,2]~zeros(1,cols(rhovec)-1);


	  k = 3;
	  gw1 = zeros(1,m);
	  gr1 = zeros(1,cols(rhovec));
	  do until k > m;
		omega21 = z[k,1:k-1]-z1[k,1:k-1];
		omega11 = z[1:k-1,1:k-1]-z1[1:k-1,1:k-1];
		trap 1;
		invomg11 = invpd(omega11); 
		if scalerr(invomg11);
		  invomg11=inv(omega11);
		endif;
		trap 0;  
		condk = z3[k]+omega21*invomg11*z2[1:k-1];
		g31 = zeros(1,m);
		g31[k] = g3[k];
		l = 1;
		g40={};
		g46={};
		g51={};
		g81 = z2[1:k-1];    
		do until l == k;
		  g35 = zeros(k-1,k-1);
		  g35[l,1:k-1] = g15[l,1:k-1];
		  g35=g35+g35';
		  g35 = diagrv(g35,(diag(g35)/2));
		  g36 = -invomg11*g35*invomg11;
		  g36 = omega21*g36*g81;
		  g40=g40~g36;

		  g45 = zeros(1,k-1);
		  g45[l] = g15[l,k];
		  g46 = g46~(g45*invomg11*g81);

		  g50 = zeros(k-1,1);
		  g50[l]=g20[l];
		  g51 = g51~(omega21*invomg11*g50);
		  l=l+1;
		endo;

		g40 = g40~zeros(1,m-(k-1));
		
		g49 = g15[k,1:k-1];
		g46 = g46~(g49*invomg11*g81);

		g47 = zeros(1,m);
		g47[1:cols(g46)] = g46;

		g51 =g51~zeros(1,m-(k-1));

		gw = (g31+g40+g47+g51)*((condpass[j])/condk).*z[1,2];
	 
		/* Start here for gradients with respect to rho parameters */


		l=1;
		kk = cols(rhovec);
		g60={};
		g65={};
		do until l>kk;
		  g55 = zeros(1,kk);
		  g55[l]=1; 
		  mm = 1;
		  sk=0;
		  g56 = zeros(m,m);
		  do until mm>m-1;
			g56[mm,mm+1:m] = (g55[sk+1:sk+m-mm]);
			sk=sk+m-mm;
			mm=mm+1;
		  endo; 
		  g57=g56+g56';
		  g59 = g57.*g25;
		  g59 = g59[1:k-1,1:k-1];
		  g58 = -invomg11*g59*invomg11;
		  g58 = omega21*g58*z2[1:k-1];
		  g60 = g60~g58;

		  g61 = g57[k,1:k-1].*g25[k,1:k-1];
		  g62 = g61*invomg11*z2[1:k-1];
		  g65 = g65~g62;      
		  l=l+1;
		endo;
	  
		gr = (g60+g65)*((condpass[j])/condk).*z[1,2];
		gw1 = gw+gw1;
		gr1 = gr+gr1;
		k=k+1;
	  endo;
	  gw2 = (g30.*condpass[j])+gw1;
	  gr2 = (g53.*condpass[j])+gr1;

	  mm=1;
	  sk=0;
	  gr3 = zeros(m,m);
	  do until mm>m-1;
		gr3[mm,mm+1:m] = (gr2[sk+1:sk+m-mm]);
		sk=sk+m-mm;
		mm=mm+1;
	  endo; 

	  /* commands below to resequence gradients based on permutation */
	  
	  aaa = indnv(seqa(1,1,m),w[.,j]);
	  gwf = gw2[aaa];
	  grf = submat(gr3,aaa,aaa); 

	  res = {};
	  ir = 1;
	  do until ir == m;
		jr = ir+1;
		res = res|((ones(m-ir,1).*.w[ir,j])~w[jr:m,j]);
		ir=ir+1;
	  endo;

	  res=res';
	  res2={};
	  t=1;
	  do until t>cols(res);
		res2 = res2~sortc(res[.,t],1);
		t=t+1;
	  endo;

	  res2=res2';
	  res1 = combinate(m,2);
	  res1 = res1[.,1] .*(10^(trunc (ln(res1[.,2])./ln(10))+1)) + res1[.,2];
	  res2 = res2[.,1] .*(10^(trunc (ln(res2[.,2])./ln(10))+1)) + res2[.,2];
	 
	  aaa1 = indnv(res1,res2);
	  grf = gr2[aaa1];
	  gwfinal = gwfinal+gwf;
	  grfinal = grfinal+grf;
	  j=j+1;
	endo;
	if ((p/n1) >0 and (p/n1) <=1);
	  retp(p/n1,(gwfinal~grfinal)/n1,s);
	else;
	 { nnnn,gggg,ssss1 } = pdfmvna(a,r,s);
	  retp(nnnn,gggg,ssss1);
	endif;
endp;
